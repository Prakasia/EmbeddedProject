
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20001f50 1000128d 100059fb 10001219     P.. .....Y......
	...
1000012c:	100010a5 00000000 00000000 10001045     ............E...
1000013c:	1000190d                                ....

10000140 <_irq_vector_table>:
10000140:	10001119 10001119 10001119 10001119     ................
10000150:	10001119 10001119 10001119 10001119     ................
10000160:	10001119 10001119 10001119 10001119     ................
10000170:	10001119 10001119 10001119 10001119     ................
10000180:	10001119 10001119 10001119 10001119     ................
10000190:	10001119 10001119 10001119 10001119     ................
100001a0:	10001119 10001119                       ........

Disassembly of section text:

100001a8 <__udivsi3>:
100001a8:	2900      	cmp	r1, #0
100001aa:	d034      	beq.n	10000216 <.udivsi3_skip_div0_test+0x6a>

100001ac <.udivsi3_skip_div0_test>:
100001ac:	2301      	movs	r3, #1
100001ae:	2200      	movs	r2, #0
100001b0:	b410      	push	{r4}
100001b2:	4288      	cmp	r0, r1
100001b4:	d32c      	bcc.n	10000210 <.udivsi3_skip_div0_test+0x64>
100001b6:	2401      	movs	r4, #1
100001b8:	0724      	lsls	r4, r4, #28
100001ba:	42a1      	cmp	r1, r4
100001bc:	d204      	bcs.n	100001c8 <.udivsi3_skip_div0_test+0x1c>
100001be:	4281      	cmp	r1, r0
100001c0:	d202      	bcs.n	100001c8 <.udivsi3_skip_div0_test+0x1c>
100001c2:	0109      	lsls	r1, r1, #4
100001c4:	011b      	lsls	r3, r3, #4
100001c6:	e7f8      	b.n	100001ba <.udivsi3_skip_div0_test+0xe>
100001c8:	00e4      	lsls	r4, r4, #3
100001ca:	42a1      	cmp	r1, r4
100001cc:	d204      	bcs.n	100001d8 <.udivsi3_skip_div0_test+0x2c>
100001ce:	4281      	cmp	r1, r0
100001d0:	d202      	bcs.n	100001d8 <.udivsi3_skip_div0_test+0x2c>
100001d2:	0049      	lsls	r1, r1, #1
100001d4:	005b      	lsls	r3, r3, #1
100001d6:	e7f8      	b.n	100001ca <.udivsi3_skip_div0_test+0x1e>
100001d8:	4288      	cmp	r0, r1
100001da:	d301      	bcc.n	100001e0 <.udivsi3_skip_div0_test+0x34>
100001dc:	1a40      	subs	r0, r0, r1
100001de:	431a      	orrs	r2, r3
100001e0:	084c      	lsrs	r4, r1, #1
100001e2:	42a0      	cmp	r0, r4
100001e4:	d302      	bcc.n	100001ec <.udivsi3_skip_div0_test+0x40>
100001e6:	1b00      	subs	r0, r0, r4
100001e8:	085c      	lsrs	r4, r3, #1
100001ea:	4322      	orrs	r2, r4
100001ec:	088c      	lsrs	r4, r1, #2
100001ee:	42a0      	cmp	r0, r4
100001f0:	d302      	bcc.n	100001f8 <.udivsi3_skip_div0_test+0x4c>
100001f2:	1b00      	subs	r0, r0, r4
100001f4:	089c      	lsrs	r4, r3, #2
100001f6:	4322      	orrs	r2, r4
100001f8:	08cc      	lsrs	r4, r1, #3
100001fa:	42a0      	cmp	r0, r4
100001fc:	d302      	bcc.n	10000204 <.udivsi3_skip_div0_test+0x58>
100001fe:	1b00      	subs	r0, r0, r4
10000200:	08dc      	lsrs	r4, r3, #3
10000202:	4322      	orrs	r2, r4
10000204:	2800      	cmp	r0, #0
10000206:	d003      	beq.n	10000210 <.udivsi3_skip_div0_test+0x64>
10000208:	091b      	lsrs	r3, r3, #4
1000020a:	d001      	beq.n	10000210 <.udivsi3_skip_div0_test+0x64>
1000020c:	0909      	lsrs	r1, r1, #4
1000020e:	e7e3      	b.n	100001d8 <.udivsi3_skip_div0_test+0x2c>
10000210:	0010      	movs	r0, r2
10000212:	bc10      	pop	{r4}
10000214:	4770      	bx	lr
10000216:	b501      	push	{r0, lr}
10000218:	2000      	movs	r0, #0
1000021a:	f000 f85f 	bl	100002dc <__aeabi_idiv0>
1000021e:	bd02      	pop	{r1, pc}

10000220 <__aeabi_uidivmod>:
10000220:	2900      	cmp	r1, #0
10000222:	d0f8      	beq.n	10000216 <.udivsi3_skip_div0_test+0x6a>
10000224:	b503      	push	{r0, r1, lr}
10000226:	f7ff ffc1 	bl	100001ac <.udivsi3_skip_div0_test>
1000022a:	bc0e      	pop	{r1, r2, r3}
1000022c:	4342      	muls	r2, r0
1000022e:	1a89      	subs	r1, r1, r2
10000230:	4718      	bx	r3
10000232:	46c0      	nop			; (mov r8, r8)

10000234 <__divsi3>:
10000234:	2900      	cmp	r1, #0
10000236:	d041      	beq.n	100002bc <.divsi3_skip_div0_test+0x84>

10000238 <.divsi3_skip_div0_test>:
10000238:	b410      	push	{r4}
1000023a:	0004      	movs	r4, r0
1000023c:	404c      	eors	r4, r1
1000023e:	46a4      	mov	ip, r4
10000240:	2301      	movs	r3, #1
10000242:	2200      	movs	r2, #0
10000244:	2900      	cmp	r1, #0
10000246:	d500      	bpl.n	1000024a <.divsi3_skip_div0_test+0x12>
10000248:	4249      	negs	r1, r1
1000024a:	2800      	cmp	r0, #0
1000024c:	d500      	bpl.n	10000250 <.divsi3_skip_div0_test+0x18>
1000024e:	4240      	negs	r0, r0
10000250:	4288      	cmp	r0, r1
10000252:	d32c      	bcc.n	100002ae <.divsi3_skip_div0_test+0x76>
10000254:	2401      	movs	r4, #1
10000256:	0724      	lsls	r4, r4, #28
10000258:	42a1      	cmp	r1, r4
1000025a:	d204      	bcs.n	10000266 <.divsi3_skip_div0_test+0x2e>
1000025c:	4281      	cmp	r1, r0
1000025e:	d202      	bcs.n	10000266 <.divsi3_skip_div0_test+0x2e>
10000260:	0109      	lsls	r1, r1, #4
10000262:	011b      	lsls	r3, r3, #4
10000264:	e7f8      	b.n	10000258 <.divsi3_skip_div0_test+0x20>
10000266:	00e4      	lsls	r4, r4, #3
10000268:	42a1      	cmp	r1, r4
1000026a:	d204      	bcs.n	10000276 <.divsi3_skip_div0_test+0x3e>
1000026c:	4281      	cmp	r1, r0
1000026e:	d202      	bcs.n	10000276 <.divsi3_skip_div0_test+0x3e>
10000270:	0049      	lsls	r1, r1, #1
10000272:	005b      	lsls	r3, r3, #1
10000274:	e7f8      	b.n	10000268 <.divsi3_skip_div0_test+0x30>
10000276:	4288      	cmp	r0, r1
10000278:	d301      	bcc.n	1000027e <.divsi3_skip_div0_test+0x46>
1000027a:	1a40      	subs	r0, r0, r1
1000027c:	431a      	orrs	r2, r3
1000027e:	084c      	lsrs	r4, r1, #1
10000280:	42a0      	cmp	r0, r4
10000282:	d302      	bcc.n	1000028a <.divsi3_skip_div0_test+0x52>
10000284:	1b00      	subs	r0, r0, r4
10000286:	085c      	lsrs	r4, r3, #1
10000288:	4322      	orrs	r2, r4
1000028a:	088c      	lsrs	r4, r1, #2
1000028c:	42a0      	cmp	r0, r4
1000028e:	d302      	bcc.n	10000296 <.divsi3_skip_div0_test+0x5e>
10000290:	1b00      	subs	r0, r0, r4
10000292:	089c      	lsrs	r4, r3, #2
10000294:	4322      	orrs	r2, r4
10000296:	08cc      	lsrs	r4, r1, #3
10000298:	42a0      	cmp	r0, r4
1000029a:	d302      	bcc.n	100002a2 <.divsi3_skip_div0_test+0x6a>
1000029c:	1b00      	subs	r0, r0, r4
1000029e:	08dc      	lsrs	r4, r3, #3
100002a0:	4322      	orrs	r2, r4
100002a2:	2800      	cmp	r0, #0
100002a4:	d003      	beq.n	100002ae <.divsi3_skip_div0_test+0x76>
100002a6:	091b      	lsrs	r3, r3, #4
100002a8:	d001      	beq.n	100002ae <.divsi3_skip_div0_test+0x76>
100002aa:	0909      	lsrs	r1, r1, #4
100002ac:	e7e3      	b.n	10000276 <.divsi3_skip_div0_test+0x3e>
100002ae:	0010      	movs	r0, r2
100002b0:	4664      	mov	r4, ip
100002b2:	2c00      	cmp	r4, #0
100002b4:	d500      	bpl.n	100002b8 <.divsi3_skip_div0_test+0x80>
100002b6:	4240      	negs	r0, r0
100002b8:	bc10      	pop	{r4}
100002ba:	4770      	bx	lr
100002bc:	b501      	push	{r0, lr}
100002be:	2000      	movs	r0, #0
100002c0:	f000 f80c 	bl	100002dc <__aeabi_idiv0>
100002c4:	bd02      	pop	{r1, pc}
100002c6:	46c0      	nop			; (mov r8, r8)

100002c8 <__aeabi_idivmod>:
100002c8:	2900      	cmp	r1, #0
100002ca:	d0f7      	beq.n	100002bc <.divsi3_skip_div0_test+0x84>
100002cc:	b503      	push	{r0, r1, lr}
100002ce:	f7ff ffb3 	bl	10000238 <.divsi3_skip_div0_test>
100002d2:	bc0e      	pop	{r1, r2, r3}
100002d4:	4342      	muls	r2, r0
100002d6:	1a89      	subs	r1, r1, r2
100002d8:	4718      	bx	r3
100002da:	46c0      	nop			; (mov r8, r8)

100002dc <__aeabi_idiv0>:
100002dc:	4770      	bx	lr
100002de:	46c0      	nop			; (mov r8, r8)

100002e0 <__clzsi2>:
100002e0:	211c      	movs	r1, #28
100002e2:	2301      	movs	r3, #1
100002e4:	041b      	lsls	r3, r3, #16
100002e6:	4298      	cmp	r0, r3
100002e8:	d301      	bcc.n	100002ee <__clzsi2+0xe>
100002ea:	0c00      	lsrs	r0, r0, #16
100002ec:	3910      	subs	r1, #16
100002ee:	0a1b      	lsrs	r3, r3, #8
100002f0:	4298      	cmp	r0, r3
100002f2:	d301      	bcc.n	100002f8 <__clzsi2+0x18>
100002f4:	0a00      	lsrs	r0, r0, #8
100002f6:	3908      	subs	r1, #8
100002f8:	091b      	lsrs	r3, r3, #4
100002fa:	4298      	cmp	r0, r3
100002fc:	d301      	bcc.n	10000302 <__clzsi2+0x22>
100002fe:	0900      	lsrs	r0, r0, #4
10000300:	3904      	subs	r1, #4
10000302:	a202      	add	r2, pc, #8	; (adr r2, 1000030c <__clzsi2+0x2c>)
10000304:	5c10      	ldrb	r0, [r2, r0]
10000306:	1840      	adds	r0, r0, r1
10000308:	4770      	bx	lr
1000030a:	46c0      	nop			; (mov r8, r8)
1000030c:	02020304 	.word	0x02020304
10000310:	01010101 	.word	0x01010101
	...

1000031c <__aeabi_uldivmod>:
1000031c:	2b00      	cmp	r3, #0
1000031e:	d111      	bne.n	10000344 <__aeabi_uldivmod+0x28>
10000320:	2a00      	cmp	r2, #0
10000322:	d10f      	bne.n	10000344 <__aeabi_uldivmod+0x28>
10000324:	2900      	cmp	r1, #0
10000326:	d100      	bne.n	1000032a <__aeabi_uldivmod+0xe>
10000328:	2800      	cmp	r0, #0
1000032a:	d002      	beq.n	10000332 <__aeabi_uldivmod+0x16>
1000032c:	2100      	movs	r1, #0
1000032e:	43c9      	mvns	r1, r1
10000330:	0008      	movs	r0, r1
10000332:	b407      	push	{r0, r1, r2}
10000334:	4802      	ldr	r0, [pc, #8]	; (10000340 <__aeabi_uldivmod+0x24>)
10000336:	a102      	add	r1, pc, #8	; (adr r1, 10000340 <__aeabi_uldivmod+0x24>)
10000338:	1840      	adds	r0, r0, r1
1000033a:	9002      	str	r0, [sp, #8]
1000033c:	bd03      	pop	{r0, r1, pc}
1000033e:	46c0      	nop			; (mov r8, r8)
10000340:	ffffff9d 	.word	0xffffff9d
10000344:	b403      	push	{r0, r1}
10000346:	4668      	mov	r0, sp
10000348:	b501      	push	{r0, lr}
1000034a:	9802      	ldr	r0, [sp, #8]
1000034c:	f000 f82a 	bl	100003a4 <__udivmoddi4>
10000350:	9b01      	ldr	r3, [sp, #4]
10000352:	469e      	mov	lr, r3
10000354:	b002      	add	sp, #8
10000356:	bc0c      	pop	{r2, r3}
10000358:	4770      	bx	lr
1000035a:	46c0      	nop			; (mov r8, r8)

1000035c <__aeabi_llsr>:
1000035c:	40d0      	lsrs	r0, r2
1000035e:	000b      	movs	r3, r1
10000360:	40d1      	lsrs	r1, r2
10000362:	469c      	mov	ip, r3
10000364:	3a20      	subs	r2, #32
10000366:	40d3      	lsrs	r3, r2
10000368:	4318      	orrs	r0, r3
1000036a:	4252      	negs	r2, r2
1000036c:	4663      	mov	r3, ip
1000036e:	4093      	lsls	r3, r2
10000370:	4318      	orrs	r0, r3
10000372:	4770      	bx	lr

10000374 <__aeabi_llsl>:
10000374:	4091      	lsls	r1, r2
10000376:	0003      	movs	r3, r0
10000378:	4090      	lsls	r0, r2
1000037a:	469c      	mov	ip, r3
1000037c:	3a20      	subs	r2, #32
1000037e:	4093      	lsls	r3, r2
10000380:	4319      	orrs	r1, r3
10000382:	4252      	negs	r2, r2
10000384:	4663      	mov	r3, ip
10000386:	40d3      	lsrs	r3, r2
10000388:	4319      	orrs	r1, r3
1000038a:	4770      	bx	lr

1000038c <__clzdi2>:
1000038c:	b510      	push	{r4, lr}
1000038e:	2900      	cmp	r1, #0
10000390:	d103      	bne.n	1000039a <__clzdi2+0xe>
10000392:	f7ff ffa5 	bl	100002e0 <__clzsi2>
10000396:	3020      	adds	r0, #32
10000398:	e002      	b.n	100003a0 <__clzdi2+0x14>
1000039a:	0008      	movs	r0, r1
1000039c:	f7ff ffa0 	bl	100002e0 <__clzsi2>
100003a0:	bd10      	pop	{r4, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <__udivmoddi4>:
100003a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100003a6:	0006      	movs	r6, r0
100003a8:	000f      	movs	r7, r1
100003aa:	0015      	movs	r5, r2
100003ac:	001c      	movs	r4, r3
100003ae:	b085      	sub	sp, #20
100003b0:	428b      	cmp	r3, r1
100003b2:	d863      	bhi.n	1000047c <__udivmoddi4+0xd8>
100003b4:	d101      	bne.n	100003ba <__udivmoddi4+0x16>
100003b6:	4282      	cmp	r2, r0
100003b8:	d860      	bhi.n	1000047c <__udivmoddi4+0xd8>
100003ba:	0021      	movs	r1, r4
100003bc:	0028      	movs	r0, r5
100003be:	f7ff ffe5 	bl	1000038c <__clzdi2>
100003c2:	0039      	movs	r1, r7
100003c4:	9000      	str	r0, [sp, #0]
100003c6:	0030      	movs	r0, r6
100003c8:	f7ff ffe0 	bl	1000038c <__clzdi2>
100003cc:	9b00      	ldr	r3, [sp, #0]
100003ce:	0021      	movs	r1, r4
100003d0:	1a1b      	subs	r3, r3, r0
100003d2:	001a      	movs	r2, r3
100003d4:	0028      	movs	r0, r5
100003d6:	9303      	str	r3, [sp, #12]
100003d8:	f7ff ffcc 	bl	10000374 <__aeabi_llsl>
100003dc:	9000      	str	r0, [sp, #0]
100003de:	9101      	str	r1, [sp, #4]
100003e0:	42b9      	cmp	r1, r7
100003e2:	d845      	bhi.n	10000470 <__udivmoddi4+0xcc>
100003e4:	d101      	bne.n	100003ea <__udivmoddi4+0x46>
100003e6:	42b0      	cmp	r0, r6
100003e8:	d842      	bhi.n	10000470 <__udivmoddi4+0xcc>
100003ea:	9b00      	ldr	r3, [sp, #0]
100003ec:	9c01      	ldr	r4, [sp, #4]
100003ee:	2001      	movs	r0, #1
100003f0:	2100      	movs	r1, #0
100003f2:	9a03      	ldr	r2, [sp, #12]
100003f4:	1af6      	subs	r6, r6, r3
100003f6:	41a7      	sbcs	r7, r4
100003f8:	f7ff ffbc 	bl	10000374 <__aeabi_llsl>
100003fc:	0004      	movs	r4, r0
100003fe:	000d      	movs	r5, r1
10000400:	9b03      	ldr	r3, [sp, #12]
10000402:	2b00      	cmp	r3, #0
10000404:	d02b      	beq.n	1000045e <__udivmoddi4+0xba>
10000406:	9b01      	ldr	r3, [sp, #4]
10000408:	9a00      	ldr	r2, [sp, #0]
1000040a:	07db      	lsls	r3, r3, #31
1000040c:	0850      	lsrs	r0, r2, #1
1000040e:	4318      	orrs	r0, r3
10000410:	9b01      	ldr	r3, [sp, #4]
10000412:	0859      	lsrs	r1, r3, #1
10000414:	9b03      	ldr	r3, [sp, #12]
10000416:	469c      	mov	ip, r3
10000418:	42b9      	cmp	r1, r7
1000041a:	d82c      	bhi.n	10000476 <__udivmoddi4+0xd2>
1000041c:	d101      	bne.n	10000422 <__udivmoddi4+0x7e>
1000041e:	42b0      	cmp	r0, r6
10000420:	d829      	bhi.n	10000476 <__udivmoddi4+0xd2>
10000422:	0032      	movs	r2, r6
10000424:	003b      	movs	r3, r7
10000426:	1a12      	subs	r2, r2, r0
10000428:	418b      	sbcs	r3, r1
1000042a:	2601      	movs	r6, #1
1000042c:	1892      	adds	r2, r2, r2
1000042e:	415b      	adcs	r3, r3
10000430:	2700      	movs	r7, #0
10000432:	18b6      	adds	r6, r6, r2
10000434:	415f      	adcs	r7, r3
10000436:	2301      	movs	r3, #1
10000438:	425b      	negs	r3, r3
1000043a:	449c      	add	ip, r3
1000043c:	4663      	mov	r3, ip
1000043e:	2b00      	cmp	r3, #0
10000440:	d1ea      	bne.n	10000418 <__udivmoddi4+0x74>
10000442:	0030      	movs	r0, r6
10000444:	0039      	movs	r1, r7
10000446:	9a03      	ldr	r2, [sp, #12]
10000448:	f7ff ff88 	bl	1000035c <__aeabi_llsr>
1000044c:	9a03      	ldr	r2, [sp, #12]
1000044e:	19a4      	adds	r4, r4, r6
10000450:	417d      	adcs	r5, r7
10000452:	0006      	movs	r6, r0
10000454:	000f      	movs	r7, r1
10000456:	f7ff ff8d 	bl	10000374 <__aeabi_llsl>
1000045a:	1a24      	subs	r4, r4, r0
1000045c:	418d      	sbcs	r5, r1
1000045e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10000460:	2b00      	cmp	r3, #0
10000462:	d001      	beq.n	10000468 <__udivmoddi4+0xc4>
10000464:	601e      	str	r6, [r3, #0]
10000466:	605f      	str	r7, [r3, #4]
10000468:	0020      	movs	r0, r4
1000046a:	0029      	movs	r1, r5
1000046c:	b005      	add	sp, #20
1000046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000470:	2400      	movs	r4, #0
10000472:	2500      	movs	r5, #0
10000474:	e7c4      	b.n	10000400 <__udivmoddi4+0x5c>
10000476:	19b6      	adds	r6, r6, r6
10000478:	417f      	adcs	r7, r7
1000047a:	e7dc      	b.n	10000436 <__udivmoddi4+0x92>
1000047c:	2400      	movs	r4, #0
1000047e:	2500      	movs	r5, #0
10000480:	e7ed      	b.n	1000045e <__udivmoddi4+0xba>
	...

10000484 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
10000484:	b570      	push	{r4, r5, r6, lr}
10000486:	0013      	movs	r3, r2
	const struct gpio_driver_api *api =
10000488:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
1000048a:	6904      	ldr	r4, [r0, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
1000048c:	02da      	lsls	r2, r3, #11
1000048e:	d508      	bpl.n	100004a2 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
10000490:	22c0      	movs	r2, #192	; 0xc0
10000492:	0312      	lsls	r2, r2, #12
10000494:	4213      	tst	r3, r2
10000496:	d004      	beq.n	100004a2 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
10000498:	07da      	lsls	r2, r3, #31
1000049a:	d502      	bpl.n	100004a2 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
1000049c:	22c0      	movs	r2, #192	; 0xc0
1000049e:	0312      	lsls	r2, r2, #12
100004a0:	4053      	eors	r3, r2
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
100004a2:	4a09      	ldr	r2, [pc, #36]	; (100004c8 <z_impl_gpio_pin_configure+0x44>)
100004a4:	401a      	ands	r2, r3

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
100004a6:	07db      	lsls	r3, r3, #31
100004a8:	d507      	bpl.n	100004ba <z_impl_gpio_pin_configure+0x36>
		data->invert |= (gpio_port_pins_t)BIT(pin);
100004aa:	6823      	ldr	r3, [r4, #0]
100004ac:	2601      	movs	r6, #1
100004ae:	408e      	lsls	r6, r1
100004b0:	4333      	orrs	r3, r6
100004b2:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
100004b4:	682b      	ldr	r3, [r5, #0]
100004b6:	4798      	blx	r3
}
100004b8:	bd70      	pop	{r4, r5, r6, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
100004ba:	6823      	ldr	r3, [r4, #0]
100004bc:	2601      	movs	r6, #1
100004be:	408e      	lsls	r6, r1
100004c0:	43b3      	bics	r3, r6
100004c2:	6023      	str	r3, [r4, #0]
100004c4:	e7f6      	b.n	100004b4 <z_impl_gpio_pin_configure+0x30>
100004c6:	46c0      	nop			; (mov r8, r8)
100004c8:	ffefffff 	.word	0xffefffff

100004cc <response_isr>:
int aq_delay;

K_SEM_DEFINE(sem, 0, 1);
K_MUTEX_DEFINE(mutex);

void response_isr() {
100004cc:	b510      	push	{r4, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
100004ce:	4802      	ldr	r0, [pc, #8]	; (100004d8 <response_isr+0xc>)
100004d0:	f002 f81a 	bl	10002508 <z_impl_k_sem_give>
    k_sem_give(&sem);
}
100004d4:	bd10      	pop	{r4, pc}
100004d6:	46c0      	nop			; (mov r8, r8)
100004d8:	2000089c 	.word	0x2000089c

100004dc <main_task>:

void main_task(void)
{
100004dc:	b530      	push	{r4, r5, lr}
100004de:	b089      	sub	sp, #36	; 0x24
    int ret;
	gpio_pin_configure_dt(&status, GPIO_OUTPUT);
100004e0:	2480      	movs	r4, #128	; 0x80
100004e2:	02a4      	lsls	r4, r4, #10
100004e4:	4832      	ldr	r0, [pc, #200]	; (100005b0 <main_task+0xd4>)
100004e6:	0021      	movs	r1, r4
100004e8:	f005 f94b 	bl	10005782 <gpio_pin_configure_dt>
	gpio_pin_configure_dt(&aq_led, GPIO_OUTPUT);
100004ec:	4831      	ldr	r0, [pc, #196]	; (100005b4 <main_task+0xd8>)
100004ee:	0021      	movs	r1, r4
100004f0:	f005 f947 	bl	10005782 <gpio_pin_configure_dt>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
100004f4:	4830      	ldr	r0, [pc, #192]	; (100005b8 <main_task+0xdc>)
100004f6:	f006 f9c5 	bl	10006884 <z_device_is_ready>

	const struct device *const dev = DEVICE_DT_GET_ONE(ec2023);
	struct sensor_value temp, moisture, air_qual;

	if (!device_is_ready(dev)) {
100004fa:	2800      	cmp	r0, #0
100004fc:	d120      	bne.n	10000540 <main_task+0x64>
		printk("sensor: device not ready.\n");
100004fe:	482f      	ldr	r0, [pc, #188]	; (100005bc <main_task+0xe0>)
10000500:	f005 f993 	bl	1000582a <printk>
		else{
			gpio_pin_set_dt(&aq_led, 0);
		}
		k_sleep(K_MSEC(3000));
	}
}
10000504:	b009      	add	sp, #36	; 0x24
10000506:	bd30      	pop	{r4, r5, pc}
            printk("Error");
10000508:	482d      	ldr	r0, [pc, #180]	; (100005c0 <main_task+0xe4>)
1000050a:	f005 f98e 	bl	1000582a <printk>
1000050e:	e021      	b.n	10000554 <main_task+0x78>
	return z_impl_k_mutex_lock(mutex, timeout);
10000510:	4c2c      	ldr	r4, [pc, #176]	; (100005c4 <main_task+0xe8>)
10000512:	2201      	movs	r2, #1
10000514:	4252      	negs	r2, r2
10000516:	17d3      	asrs	r3, r2, #31
10000518:	0020      	movs	r0, r4
1000051a:	f001 ff35 	bl	10002388 <z_impl_k_mutex_lock>
            moisture_flag = 0;
1000051e:	4b2a      	ldr	r3, [pc, #168]	; (100005c8 <main_task+0xec>)
10000520:	2200      	movs	r2, #0
10000522:	701a      	strb	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
10000524:	0020      	movs	r0, r4
10000526:	f001 ffb3 	bl	10002490 <z_impl_k_mutex_unlock>
1000052a:	e036      	b.n	1000059a <main_task+0xbe>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
1000052c:	4b21      	ldr	r3, [pc, #132]	; (100005b4 <main_task+0xd8>)
1000052e:	6818      	ldr	r0, [r3, #0]
10000530:	7919      	ldrb	r1, [r3, #4]
10000532:	2201      	movs	r2, #1
10000534:	f005 f940 	bl	100057b8 <gpio_pin_set>
	return z_impl_k_sleep(timeout);
10000538:	4824      	ldr	r0, [pc, #144]	; (100005cc <main_task+0xf0>)
1000053a:	2100      	movs	r1, #0
1000053c:	f002 fb98 	bl	10002c70 <z_impl_k_sleep>
		gpio_pin_toggle_dt(&status);				//Status led just toggles each loop
10000540:	481b      	ldr	r0, [pc, #108]	; (100005b0 <main_task+0xd4>)
10000542:	f005 f946 	bl	100057d2 <gpio_pin_toggle_dt>
 */
__syscall int sensor_sample_fetch(const struct device *dev);

static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
10000546:	481c      	ldr	r0, [pc, #112]	; (100005b8 <main_task+0xdc>)
10000548:	6883      	ldr	r3, [r0, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
1000054a:	68db      	ldr	r3, [r3, #12]
1000054c:	2139      	movs	r1, #57	; 0x39
1000054e:	4798      	blx	r3
        if(ret < 0){
10000550:	2800      	cmp	r0, #0
10000552:	dbd9      	blt.n	10000508 <main_task+0x2c>

static inline int z_impl_sensor_channel_get(const struct device *dev,
					    enum sensor_channel chan,
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
10000554:	4c18      	ldr	r4, [pc, #96]	; (100005b8 <main_task+0xdc>)
10000556:	68a5      	ldr	r5, [r4, #8]
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
10000558:	692b      	ldr	r3, [r5, #16]
1000055a:	aa06      	add	r2, sp, #24
1000055c:	210d      	movs	r1, #13
1000055e:	0020      	movs	r0, r4
10000560:	4798      	blx	r3
10000562:	692b      	ldr	r3, [r5, #16]
10000564:	aa04      	add	r2, sp, #16
10000566:	2110      	movs	r1, #16
10000568:	0020      	movs	r0, r4
1000056a:	4798      	blx	r3
1000056c:	692b      	ldr	r3, [r5, #16]
1000056e:	aa02      	add	r2, sp, #8
10000570:	211c      	movs	r1, #28
10000572:	0020      	movs	r0, r4
10000574:	4798      	blx	r3
		printk("Temperature\t: %d.%06d\t*\nSoil Moisture\t: %d\t\t*\nAQ index\t: %d\t\t*\n",temp.val1, temp.val2, moisture.val1, air_qual.val1);
10000576:	9b04      	ldr	r3, [sp, #16]
10000578:	9a07      	ldr	r2, [sp, #28]
1000057a:	9906      	ldr	r1, [sp, #24]
1000057c:	4814      	ldr	r0, [pc, #80]	; (100005d0 <main_task+0xf4>)
1000057e:	9c02      	ldr	r4, [sp, #8]
10000580:	9400      	str	r4, [sp, #0]
10000582:	f005 f952 	bl	1000582a <printk>
		printk("*********************************\n");
10000586:	4813      	ldr	r0, [pc, #76]	; (100005d4 <main_task+0xf8>)
10000588:	f005 f94f 	bl	1000582a <printk>
		if(moisture.val1 > MOIST_LOW && moisture.val1 < MOIST_HIGH)
1000058c:	9b04      	ldr	r3, [sp, #16]
1000058e:	3b60      	subs	r3, #96	; 0x60
10000590:	3bff      	subs	r3, #255	; 0xff
10000592:	22e0      	movs	r2, #224	; 0xe0
10000594:	0052      	lsls	r2, r2, #1
10000596:	4293      	cmp	r3, r2
10000598:	d9ba      	bls.n	10000510 <main_task+0x34>
		if(air_qual.val1 == 2){
1000059a:	9b02      	ldr	r3, [sp, #8]
1000059c:	2b02      	cmp	r3, #2
1000059e:	d0c5      	beq.n	1000052c <main_task+0x50>
100005a0:	4b04      	ldr	r3, [pc, #16]	; (100005b4 <main_task+0xd8>)
100005a2:	6818      	ldr	r0, [r3, #0]
100005a4:	7919      	ldrb	r1, [r3, #4]
100005a6:	2200      	movs	r2, #0
100005a8:	f005 f906 	bl	100057b8 <gpio_pin_set>
100005ac:	e7c4      	b.n	10000538 <main_task+0x5c>
100005ae:	46c0      	nop			; (mov r8, r8)
100005b0:	200006b0 	.word	0x200006b0
100005b4:	200006a8 	.word	0x200006a8
100005b8:	10006cf8 	.word	0x10006cf8
100005bc:	10006ed4 	.word	0x10006ed4
100005c0:	10006ef0 	.word	0x10006ef0
100005c4:	20000888 	.word	0x20000888
100005c8:	20000c60 	.word	0x20000c60
100005cc:	00007530 	.word	0x00007530
100005d0:	10006ef8 	.word	0x10006ef8
100005d4:	10006f38 	.word	0x10006f38

100005d8 <led_task>:
        k_mutex_unlock(&mutex);
    }

}

void led_task(){
100005d8:	b570      	push	{r4, r5, r6, lr}
	bool f;
    gpio_pin_configure_dt(&soil_led, GPIO_OUTPUT);
100005da:	2180      	movs	r1, #128	; 0x80
100005dc:	480f      	ldr	r0, [pc, #60]	; (1000061c <led_task+0x44>)
100005de:	0289      	lsls	r1, r1, #10
100005e0:	f005 f8cf 	bl	10005782 <gpio_pin_configure_dt>
100005e4:	e005      	b.n	100005f2 <led_task+0x1a>
        k_mutex_lock(&mutex, K_FOREVER);
        f = moisture_flag;
        k_mutex_unlock(&mutex);
        if(f){
            // printk("\ntoggle led");
            gpio_pin_toggle_dt(&soil_led);
100005e6:	480d      	ldr	r0, [pc, #52]	; (1000061c <led_task+0x44>)
100005e8:	f005 f8f3 	bl	100057d2 <gpio_pin_toggle_dt>
        }
        else{
            // printk("\noff led");
            gpio_pin_set_dt(&soil_led,0);
        } 
        k_msleep(250);  
100005ec:	20fa      	movs	r0, #250	; 0xfa
100005ee:	f005 f905 	bl	100057fc <k_msleep>
	return z_impl_k_mutex_lock(mutex, timeout);
100005f2:	4c0b      	ldr	r4, [pc, #44]	; (10000620 <led_task+0x48>)
100005f4:	2201      	movs	r2, #1
100005f6:	4252      	negs	r2, r2
100005f8:	17d3      	asrs	r3, r2, #31
100005fa:	0020      	movs	r0, r4
100005fc:	f001 fec4 	bl	10002388 <z_impl_k_mutex_lock>
        f = moisture_flag;
10000600:	4b08      	ldr	r3, [pc, #32]	; (10000624 <led_task+0x4c>)
10000602:	781d      	ldrb	r5, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
10000604:	0020      	movs	r0, r4
10000606:	f001 ff43 	bl	10002490 <z_impl_k_mutex_unlock>
        if(f){
1000060a:	2d00      	cmp	r5, #0
1000060c:	d1eb      	bne.n	100005e6 <led_task+0xe>
1000060e:	4b03      	ldr	r3, [pc, #12]	; (1000061c <led_task+0x44>)
10000610:	6818      	ldr	r0, [r3, #0]
10000612:	7919      	ldrb	r1, [r3, #4]
10000614:	2200      	movs	r2, #0
10000616:	f005 f8cf 	bl	100057b8 <gpio_pin_set>
1000061a:	e7e7      	b.n	100005ec <led_task+0x14>
1000061c:	20000698 	.word	0x20000698
10000620:	20000888 	.word	0x20000888
10000624:	20000c60 	.word	0x20000c60

10000628 <trigger_task>:
void trigger_task(){
10000628:	b5d0      	push	{r4, r6, r7, lr}
    gpio_pin_configure_dt(&soil_intr, GPIO_INPUT);
1000062a:	2180      	movs	r1, #128	; 0x80
1000062c:	4c14      	ldr	r4, [pc, #80]	; (10000680 <trigger_task+0x58>)
1000062e:	0249      	lsls	r1, r1, #9
10000630:	0020      	movs	r0, r4
10000632:	f005 f8a6 	bl	10005782 <gpio_pin_configure_dt>
    gpio_pin_interrupt_configure_dt(&soil_intr, GPIO_INT_EDGE_FALLING);
10000636:	21d0      	movs	r1, #208	; 0xd0
10000638:	0489      	lsls	r1, r1, #18
1000063a:	0020      	movs	r0, r4
1000063c:	f005 f899 	bl	10005772 <gpio_pin_interrupt_configure_dt>
    gpio_init_callback(&soil_cb_data, response_isr, BIT(soil_intr.pin));
10000640:	7922      	ldrb	r2, [r4, #4]
10000642:	2301      	movs	r3, #1
10000644:	4093      	lsls	r3, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
10000646:	490f      	ldr	r1, [pc, #60]	; (10000684 <trigger_task+0x5c>)
10000648:	4a0f      	ldr	r2, [pc, #60]	; (10000688 <trigger_task+0x60>)
1000064a:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
1000064c:	608b      	str	r3, [r1, #8]
    gpio_add_callback(soil_intr.port, &soil_cb_data);
1000064e:	6820      	ldr	r0, [r4, #0]
10000650:	f005 f8c9 	bl	100057e6 <gpio_add_callback>
        k_sem_take(&sem, K_FOREVER);
10000654:	2601      	movs	r6, #1
10000656:	4276      	negs	r6, r6
10000658:	17f7      	asrs	r7, r6, #31
	return z_impl_k_sem_take(sem, timeout);
1000065a:	480c      	ldr	r0, [pc, #48]	; (1000068c <trigger_task+0x64>)
1000065c:	0032      	movs	r2, r6
1000065e:	003b      	movs	r3, r7
10000660:	f001 ff70 	bl	10002544 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
10000664:	4c0a      	ldr	r4, [pc, #40]	; (10000690 <trigger_task+0x68>)
10000666:	0032      	movs	r2, r6
10000668:	003b      	movs	r3, r7
1000066a:	0020      	movs	r0, r4
1000066c:	f001 fe8c 	bl	10002388 <z_impl_k_mutex_lock>
        moisture_flag = 1;
10000670:	4b08      	ldr	r3, [pc, #32]	; (10000694 <trigger_task+0x6c>)
10000672:	2201      	movs	r2, #1
10000674:	701a      	strb	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
10000676:	0020      	movs	r0, r4
10000678:	f001 ff0a 	bl	10002490 <z_impl_k_mutex_unlock>
    while(1){
1000067c:	e7ea      	b.n	10000654 <trigger_task+0x2c>
1000067e:	46c0      	nop			; (mov r8, r8)
10000680:	200006a0 	.word	0x200006a0
10000684:	20000b38 	.word	0x20000b38
10000688:	100004cd 	.word	0x100004cd
1000068c:	2000089c 	.word	0x2000089c
10000690:	20000888 	.word	0x20000888
10000694:	20000c60 	.word	0x20000c60

10000698 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
10000698:	b510      	push	{r4, lr}
	(void) ctx_p;
	return _char_out(c);
1000069a:	4b02      	ldr	r3, [pc, #8]	; (100006a4 <char_out+0xc>)
1000069c:	681b      	ldr	r3, [r3, #0]
1000069e:	4798      	blx	r3
}
100006a0:	bd10      	pop	{r4, pc}
100006a2:	46c0      	nop			; (mov r8, r8)
100006a4:	200006b8 	.word	0x200006b8

100006a8 <__printk_hook_install>:
	_char_out = fn;
100006a8:	4b01      	ldr	r3, [pc, #4]	; (100006b0 <__printk_hook_install+0x8>)
100006aa:	6018      	str	r0, [r3, #0]
}
100006ac:	4770      	bx	lr
100006ae:	46c0      	nop			; (mov r8, r8)
100006b0:	200006b8 	.word	0x200006b8

100006b4 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
100006b4:	b510      	push	{r4, lr}
100006b6:	b082      	sub	sp, #8
100006b8:	0002      	movs	r2, r0
100006ba:	000b      	movs	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
100006bc:	4c03      	ldr	r4, [pc, #12]	; (100006cc <vprintk+0x18>)
100006be:	2100      	movs	r1, #0
100006c0:	9100      	str	r1, [sp, #0]
100006c2:	0020      	movs	r0, r4
100006c4:	f000 f9c0 	bl	10000a48 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
100006c8:	b002      	add	sp, #8
100006ca:	bd10      	pop	{r4, pc}
100006cc:	10000699 	.word	0x10000699

100006d0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
100006d0:	b510      	push	{r4, lr}
100006d2:	0004      	movs	r4, r0
	const char *sp = *str;
100006d4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
100006d6:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
100006d8:	e005      	b.n	100006e6 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
100006da:	0083      	lsls	r3, r0, #2
100006dc:	181b      	adds	r3, r3, r0
100006de:	005b      	lsls	r3, r3, #1
100006e0:	3201      	adds	r2, #1
100006e2:	1858      	adds	r0, r3, r1
100006e4:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
100006e6:	7811      	ldrb	r1, [r2, #0]
100006e8:	4b02      	ldr	r3, [pc, #8]	; (100006f4 <extract_decimal+0x24>)
100006ea:	5c5b      	ldrb	r3, [r3, r1]
100006ec:	075b      	lsls	r3, r3, #29
100006ee:	d4f4      	bmi.n	100006da <extract_decimal+0xa>
	}
	*str = sp;
100006f0:	6022      	str	r2, [r4, #0]
	return val;
}
100006f2:	bd10      	pop	{r4, pc}
100006f4:	10007625 	.word	0x10007625

100006f8 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
100006f8:	b510      	push	{r4, lr}
100006fa:	0004      	movs	r4, r0
100006fc:	0008      	movs	r0, r1
	bool loop = true;
100006fe:	2201      	movs	r2, #1
10000700:	e01e      	b.n	10000740 <extract_flags+0x48>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
10000702:	7823      	ldrb	r3, [r4, #0]
10000704:	2104      	movs	r1, #4
10000706:	430b      	orrs	r3, r1
10000708:	7023      	strb	r3, [r4, #0]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
1000070a:	2a00      	cmp	r2, #0
1000070c:	d016      	beq.n	1000073c <extract_flags+0x44>
			++sp;
1000070e:	3001      	adds	r0, #1
10000710:	e014      	b.n	1000073c <extract_flags+0x44>
			conv->flag_plus = true;
10000712:	7823      	ldrb	r3, [r4, #0]
10000714:	2108      	movs	r1, #8
10000716:	430b      	orrs	r3, r1
10000718:	7023      	strb	r3, [r4, #0]
			break;
1000071a:	e7f6      	b.n	1000070a <extract_flags+0x12>
			conv->flag_space = true;
1000071c:	7823      	ldrb	r3, [r4, #0]
1000071e:	2110      	movs	r1, #16
10000720:	430b      	orrs	r3, r1
10000722:	7023      	strb	r3, [r4, #0]
			break;
10000724:	e7f1      	b.n	1000070a <extract_flags+0x12>
			conv->flag_hash = true;
10000726:	7823      	ldrb	r3, [r4, #0]
10000728:	2120      	movs	r1, #32
1000072a:	430b      	orrs	r3, r1
1000072c:	7023      	strb	r3, [r4, #0]
			break;
1000072e:	e7ec      	b.n	1000070a <extract_flags+0x12>
			conv->flag_zero = true;
10000730:	7823      	ldrb	r3, [r4, #0]
10000732:	2140      	movs	r1, #64	; 0x40
10000734:	430b      	orrs	r3, r1
10000736:	7023      	strb	r3, [r4, #0]
			break;
10000738:	e7e7      	b.n	1000070a <extract_flags+0x12>
		switch (*sp) {
1000073a:	2200      	movs	r2, #0
		}
	} while (loop);
1000073c:	2a00      	cmp	r2, #0
1000073e:	d008      	beq.n	10000752 <extract_flags+0x5a>
		switch (*sp) {
10000740:	7803      	ldrb	r3, [r0, #0]
10000742:	3b20      	subs	r3, #32
10000744:	b2d9      	uxtb	r1, r3
10000746:	2910      	cmp	r1, #16
10000748:	d8f7      	bhi.n	1000073a <extract_flags+0x42>
1000074a:	008b      	lsls	r3, r1, #2
1000074c:	4906      	ldr	r1, [pc, #24]	; (10000768 <extract_flags+0x70>)
1000074e:	58cb      	ldr	r3, [r1, r3]
10000750:	469f      	mov	pc, r3

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
10000752:	7822      	ldrb	r2, [r4, #0]
10000754:	2344      	movs	r3, #68	; 0x44
10000756:	4013      	ands	r3, r2
10000758:	2b44      	cmp	r3, #68	; 0x44
1000075a:	d000      	beq.n	1000075e <extract_flags+0x66>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
1000075c:	bd10      	pop	{r4, pc}
		conv->flag_zero = false;
1000075e:	0013      	movs	r3, r2
10000760:	2240      	movs	r2, #64	; 0x40
10000762:	4393      	bics	r3, r2
10000764:	7023      	strb	r3, [r4, #0]
10000766:	e7f9      	b.n	1000075c <extract_flags+0x64>
10000768:	10006f94 	.word	0x10006f94

1000076c <extract_length>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_length(struct conversion *conv,
					 const char *sp)
{
1000076c:	b510      	push	{r4, lr}
1000076e:	0004      	movs	r4, r0
	switch (*sp) {
10000770:	780b      	ldrb	r3, [r1, #0]
10000772:	3b4c      	subs	r3, #76	; 0x4c
10000774:	b2da      	uxtb	r2, r3
10000776:	2a2e      	cmp	r2, #46	; 0x2e
10000778:	d84d      	bhi.n	10000816 <extract_length+0xaa>
1000077a:	0093      	lsls	r3, r2, #2
1000077c:	4a29      	ldr	r2, [pc, #164]	; (10000824 <extract_length+0xb8>)
1000077e:	58d3      	ldr	r3, [r2, r3]
10000780:	469f      	mov	pc, r3
	case 'h':
		if (*++sp == 'h') {
10000782:	1c48      	adds	r0, r1, #1
10000784:	784b      	ldrb	r3, [r1, #1]
10000786:	2b68      	cmp	r3, #104	; 0x68
10000788:	d006      	beq.n	10000798 <extract_length+0x2c>
			conv->length_mod = LENGTH_HH;
			++sp;
		} else {
			conv->length_mod = LENGTH_H;
1000078a:	7863      	ldrb	r3, [r4, #1]
1000078c:	2278      	movs	r2, #120	; 0x78
1000078e:	4393      	bics	r3, r2
10000790:	2210      	movs	r2, #16
10000792:	4313      	orrs	r3, r2
10000794:	7063      	strb	r3, [r4, #1]
10000796:	e021      	b.n	100007dc <extract_length+0x70>
			conv->length_mod = LENGTH_HH;
10000798:	7863      	ldrb	r3, [r4, #1]
1000079a:	2278      	movs	r2, #120	; 0x78
1000079c:	4393      	bics	r3, r2
1000079e:	2208      	movs	r2, #8
100007a0:	4313      	orrs	r3, r2
100007a2:	7063      	strb	r3, [r4, #1]
			++sp;
100007a4:	1c88      	adds	r0, r1, #2
100007a6:	e019      	b.n	100007dc <extract_length+0x70>
		}
		break;
	case 'l':
		if (*++sp == 'l') {
100007a8:	1c48      	adds	r0, r1, #1
100007aa:	784b      	ldrb	r3, [r1, #1]
100007ac:	2b6c      	cmp	r3, #108	; 0x6c
100007ae:	d006      	beq.n	100007be <extract_length+0x52>
			conv->length_mod = LENGTH_LL;
			++sp;
		} else {
			conv->length_mod = LENGTH_L;
100007b0:	7863      	ldrb	r3, [r4, #1]
100007b2:	2278      	movs	r2, #120	; 0x78
100007b4:	4393      	bics	r3, r2
100007b6:	2218      	movs	r2, #24
100007b8:	4313      	orrs	r3, r2
100007ba:	7063      	strb	r3, [r4, #1]
100007bc:	e00e      	b.n	100007dc <extract_length+0x70>
			conv->length_mod = LENGTH_LL;
100007be:	7863      	ldrb	r3, [r4, #1]
100007c0:	2278      	movs	r2, #120	; 0x78
100007c2:	4393      	bics	r3, r2
100007c4:	2220      	movs	r2, #32
100007c6:	4313      	orrs	r3, r2
100007c8:	7063      	strb	r3, [r4, #1]
			++sp;
100007ca:	1c88      	adds	r0, r1, #2
100007cc:	e006      	b.n	100007dc <extract_length+0x70>
		}
		break;
	case 'j':
		conv->length_mod = LENGTH_J;
100007ce:	7843      	ldrb	r3, [r0, #1]
100007d0:	2278      	movs	r2, #120	; 0x78
100007d2:	4393      	bics	r3, r2
100007d4:	2228      	movs	r2, #40	; 0x28
100007d6:	4313      	orrs	r3, r2
100007d8:	7043      	strb	r3, [r0, #1]
		++sp;
100007da:	1c48      	adds	r0, r1, #1
	default:
		conv->length_mod = LENGTH_NONE;
		break;
	}
	return sp;
}
100007dc:	bd10      	pop	{r4, pc}
		conv->length_mod = LENGTH_Z;
100007de:	7843      	ldrb	r3, [r0, #1]
100007e0:	2278      	movs	r2, #120	; 0x78
100007e2:	4393      	bics	r3, r2
100007e4:	2230      	movs	r2, #48	; 0x30
100007e6:	4313      	orrs	r3, r2
100007e8:	7043      	strb	r3, [r0, #1]
		++sp;
100007ea:	1c48      	adds	r0, r1, #1
		break;
100007ec:	e7f6      	b.n	100007dc <extract_length+0x70>
		conv->length_mod = LENGTH_T;
100007ee:	7843      	ldrb	r3, [r0, #1]
100007f0:	2278      	movs	r2, #120	; 0x78
100007f2:	4393      	bics	r3, r2
100007f4:	2238      	movs	r2, #56	; 0x38
100007f6:	4313      	orrs	r3, r2
100007f8:	7043      	strb	r3, [r0, #1]
		++sp;
100007fa:	1c48      	adds	r0, r1, #1
		break;
100007fc:	e7ee      	b.n	100007dc <extract_length+0x70>
		conv->length_mod = LENGTH_UPPER_L;
100007fe:	7843      	ldrb	r3, [r0, #1]
10000800:	2278      	movs	r2, #120	; 0x78
10000802:	4393      	bics	r3, r2
10000804:	2240      	movs	r2, #64	; 0x40
10000806:	4313      	orrs	r3, r2
10000808:	7043      	strb	r3, [r0, #1]
		++sp;
1000080a:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
1000080c:	7823      	ldrb	r3, [r4, #0]
1000080e:	2202      	movs	r2, #2
10000810:	4313      	orrs	r3, r2
10000812:	7023      	strb	r3, [r4, #0]
		break;
10000814:	e7e2      	b.n	100007dc <extract_length+0x70>
		conv->length_mod = LENGTH_NONE;
10000816:	7863      	ldrb	r3, [r4, #1]
10000818:	2278      	movs	r2, #120	; 0x78
1000081a:	4393      	bics	r3, r2
1000081c:	7063      	strb	r3, [r4, #1]
		break;
1000081e:	0008      	movs	r0, r1
	return sp;
10000820:	e7dc      	b.n	100007dc <extract_length+0x70>
10000822:	46c0      	nop			; (mov r8, r8)
10000824:	10006fd8 	.word	0x10006fd8

10000828 <extract_specifier>:
 *
 * @return a pointer the first character that follows the specifier.
 */
static inline const char *extract_specifier(struct conversion *conv,
					    const char *sp)
{
10000828:	b530      	push	{r4, r5, lr}
1000082a:	0002      	movs	r2, r0
	bool unsupported = false;

	conv->specifier = *sp++;
1000082c:	1c48      	adds	r0, r1, #1
1000082e:	780b      	ldrb	r3, [r1, #0]
10000830:	70d3      	strb	r3, [r2, #3]

	switch (conv->specifier) {
10000832:	2b78      	cmp	r3, #120	; 0x78
10000834:	d815      	bhi.n	10000862 <extract_specifier+0x3a>
10000836:	2b6e      	cmp	r3, #110	; 0x6e
10000838:	d228      	bcs.n	1000088c <extract_specifier+0x64>
1000083a:	2b69      	cmp	r3, #105	; 0x69
1000083c:	d811      	bhi.n	10000862 <extract_specifier+0x3a>
1000083e:	2b58      	cmp	r3, #88	; 0x58
10000840:	d315      	bcc.n	1000086e <extract_specifier+0x46>
10000842:	001c      	movs	r4, r3
10000844:	3c58      	subs	r4, #88	; 0x58
10000846:	b2e4      	uxtb	r4, r4
10000848:	2101      	movs	r1, #1
1000084a:	40a1      	lsls	r1, r4
1000084c:	24e2      	movs	r4, #226	; 0xe2
1000084e:	0224      	lsls	r4, r4, #8
10000850:	4221      	tst	r1, r4
10000852:	d113      	bne.n	1000087c <extract_specifier+0x54>
10000854:	4c3a      	ldr	r4, [pc, #232]	; (10000940 <extract_specifier+0x118>)
10000856:	4221      	tst	r1, r4
10000858:	d155      	bne.n	10000906 <extract_specifier+0xde>
1000085a:	2484      	movs	r4, #132	; 0x84
1000085c:	02a4      	lsls	r4, r4, #10
1000085e:	4221      	tst	r1, r4
10000860:	d139      	bne.n	100008d6 <extract_specifier+0xae>
			unsupported = true;
		}
		break;

	default:
		conv->invalid = true;
10000862:	7813      	ldrb	r3, [r2, #0]
10000864:	2101      	movs	r1, #1
10000866:	430b      	orrs	r3, r1
10000868:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
1000086a:	2300      	movs	r3, #0
		break;
1000086c:	e041      	b.n	100008f2 <extract_specifier+0xca>
	switch (conv->specifier) {
1000086e:	2b41      	cmp	r3, #65	; 0x41
10000870:	d004      	beq.n	1000087c <extract_specifier+0x54>
10000872:	d3f6      	bcc.n	10000862 <extract_specifier+0x3a>
10000874:	3b45      	subs	r3, #69	; 0x45
10000876:	b2db      	uxtb	r3, r3
10000878:	2b02      	cmp	r3, #2
1000087a:	d8f2      	bhi.n	10000862 <extract_specifier+0x3a>
		conv->specifier_cat = SPECIFIER_FP;
1000087c:	7893      	ldrb	r3, [r2, #2]
1000087e:	2107      	movs	r1, #7
10000880:	438b      	bics	r3, r1
10000882:	2104      	movs	r1, #4
10000884:	430b      	orrs	r3, r1
10000886:	7093      	strb	r3, [r2, #2]
			unsupported = true;
10000888:	2301      	movs	r3, #1
			break;
1000088a:	e032      	b.n	100008f2 <extract_specifier+0xca>
	switch (conv->specifier) {
1000088c:	0019      	movs	r1, r3
1000088e:	396e      	subs	r1, #110	; 0x6e
10000890:	b2c9      	uxtb	r1, r1
10000892:	2401      	movs	r4, #1
10000894:	408c      	lsls	r4, r1
10000896:	492b      	ldr	r1, [pc, #172]	; (10000944 <extract_specifier+0x11c>)
10000898:	4021      	ands	r1, r4
1000089a:	1e4d      	subs	r5, r1, #1
1000089c:	41a9      	sbcs	r1, r5
1000089e:	b2cd      	uxtb	r5, r1
100008a0:	2900      	cmp	r1, #0
100008a2:	d130      	bne.n	10000906 <extract_specifier+0xde>
100008a4:	3124      	adds	r1, #36	; 0x24
100008a6:	4021      	ands	r1, r4
100008a8:	1e4b      	subs	r3, r1, #1
100008aa:	4199      	sbcs	r1, r3
100008ac:	b2cb      	uxtb	r3, r1
100008ae:	2900      	cmp	r1, #0
100008b0:	d139      	bne.n	10000926 <extract_specifier+0xfe>
100008b2:	3101      	adds	r1, #1
100008b4:	000d      	movs	r5, r1
100008b6:	4025      	ands	r5, r4
100008b8:	4221      	tst	r1, r4
100008ba:	d0d2      	beq.n	10000862 <extract_specifier+0x3a>
		conv->specifier_cat = SPECIFIER_PTR;
100008bc:	7891      	ldrb	r1, [r2, #2]
100008be:	2407      	movs	r4, #7
100008c0:	43a1      	bics	r1, r4
100008c2:	2403      	movs	r4, #3
100008c4:	4321      	orrs	r1, r4
100008c6:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
100008c8:	7854      	ldrb	r4, [r2, #1]
100008ca:	2178      	movs	r1, #120	; 0x78
100008cc:	4021      	ands	r1, r4
100008ce:	2940      	cmp	r1, #64	; 0x40
100008d0:	d10f      	bne.n	100008f2 <extract_specifier+0xca>
			unsupported = true;
100008d2:	002b      	movs	r3, r5
100008d4:	e00d      	b.n	100008f2 <extract_specifier+0xca>
		conv->specifier_cat = SPECIFIER_SINT;
100008d6:	7891      	ldrb	r1, [r2, #2]
100008d8:	2407      	movs	r4, #7
100008da:	43a1      	bics	r1, r4
100008dc:	2401      	movs	r4, #1
100008de:	4321      	orrs	r1, r4
100008e0:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
100008e2:	7854      	ldrb	r4, [r2, #1]
100008e4:	2178      	movs	r1, #120	; 0x78
100008e6:	4021      	ands	r1, r4
100008e8:	2940      	cmp	r1, #64	; 0x40
100008ea:	d013      	beq.n	10000914 <extract_specifier+0xec>
		if (conv->specifier == 'c') {
100008ec:	2b63      	cmp	r3, #99	; 0x63
100008ee:	d016      	beq.n	1000091e <extract_specifier+0xf6>
	bool unsupported = false;
100008f0:	2300      	movs	r3, #0
	}

	conv->unsupported |= unsupported;
100008f2:	7811      	ldrb	r1, [r2, #0]
100008f4:	078c      	lsls	r4, r1, #30
100008f6:	0fe4      	lsrs	r4, r4, #31
100008f8:	4323      	orrs	r3, r4
100008fa:	005b      	lsls	r3, r3, #1
100008fc:	2402      	movs	r4, #2
100008fe:	43a1      	bics	r1, r4
10000900:	4319      	orrs	r1, r3
10000902:	7011      	strb	r1, [r2, #0]

	return sp;
}
10000904:	bd30      	pop	{r4, r5, pc}
		conv->specifier_cat = SPECIFIER_UINT;
10000906:	7891      	ldrb	r1, [r2, #2]
10000908:	2407      	movs	r4, #7
1000090a:	43a1      	bics	r1, r4
1000090c:	2402      	movs	r4, #2
1000090e:	4321      	orrs	r1, r4
10000910:	7091      	strb	r1, [r2, #2]
10000912:	e7e6      	b.n	100008e2 <extract_specifier+0xba>
			conv->invalid = true;
10000914:	7814      	ldrb	r4, [r2, #0]
10000916:	2501      	movs	r5, #1
10000918:	432c      	orrs	r4, r5
1000091a:	7014      	strb	r4, [r2, #0]
1000091c:	e7e6      	b.n	100008ec <extract_specifier+0xc4>
			unsupported = (conv->length_mod != LENGTH_NONE);
1000091e:	1e4b      	subs	r3, r1, #1
10000920:	4199      	sbcs	r1, r3
10000922:	b2cb      	uxtb	r3, r1
10000924:	e7e5      	b.n	100008f2 <extract_specifier+0xca>
		conv->specifier_cat = SPECIFIER_PTR;
10000926:	7891      	ldrb	r1, [r2, #2]
10000928:	2407      	movs	r4, #7
1000092a:	43a1      	bics	r1, r4
1000092c:	2403      	movs	r4, #3
1000092e:	4321      	orrs	r1, r4
10000930:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
10000932:	7851      	ldrb	r1, [r2, #1]
10000934:	2478      	movs	r4, #120	; 0x78
10000936:	420c      	tst	r4, r1
10000938:	d1db      	bne.n	100008f2 <extract_specifier+0xca>
	bool unsupported = false;
1000093a:	002b      	movs	r3, r5
1000093c:	e7d9      	b.n	100008f2 <extract_specifier+0xca>
1000093e:	46c0      	nop			; (mov r8, r8)
10000940:	00000801 	.word	0x00000801
10000944:	00000482 	.word	0x00000482

10000948 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
10000948:	b5f0      	push	{r4, r5, r6, r7, lr}
1000094a:	46de      	mov	lr, fp
1000094c:	4657      	mov	r7, sl
1000094e:	464e      	mov	r6, r9
10000950:	4645      	mov	r5, r8
10000952:	b5e0      	push	{r5, r6, r7, lr}
10000954:	b083      	sub	sp, #12
10000956:	0007      	movs	r7, r0
10000958:	000c      	movs	r4, r1
1000095a:	4690      	mov	r8, r2
1000095c:	469a      	mov	sl, r3
1000095e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
10000960:	78d0      	ldrb	r0, [r2, #3]
10000962:	4b28      	ldr	r3, [pc, #160]	; (10000a04 <encode_uint+0xbc>)
10000964:	5c1b      	ldrb	r3, [r3, r0]
10000966:	2203      	movs	r2, #3
10000968:	401a      	ands	r2, r3
1000096a:	4693      	mov	fp, r2
	const unsigned int radix = conversion_radix(conv->specifier);
1000096c:	f004 fffe 	bl	1000596c <conversion_radix>
10000970:	0006      	movs	r6, r0
	char *bp = bps + (bpe - bps);
10000972:	e014      	b.n	1000099e <encode_uint+0x56>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
10000974:	465b      	mov	r3, fp
10000976:	2b01      	cmp	r3, #1
10000978:	d01f      	beq.n	100009ba <encode_uint+0x72>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
1000097a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
1000097c:	3257      	adds	r2, #87	; 0x57
1000097e:	b2d2      	uxtb	r2, r2
10000980:	3d01      	subs	r5, #1
10000982:	702a      	strb	r2, [r5, #0]
		value /= radix;
10000984:	0032      	movs	r2, r6
10000986:	2300      	movs	r3, #0
10000988:	0038      	movs	r0, r7
1000098a:	0021      	movs	r1, r4
1000098c:	f7ff fcc6 	bl	1000031c <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
10000990:	45a1      	cmp	r9, r4
10000992:	d819      	bhi.n	100009c8 <encode_uint+0x80>
10000994:	d015      	beq.n	100009c2 <encode_uint+0x7a>
10000996:	4555      	cmp	r5, sl
10000998:	d916      	bls.n	100009c8 <encode_uint+0x80>
		value /= radix;
1000099a:	0007      	movs	r7, r0
1000099c:	000c      	movs	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
1000099e:	9601      	str	r6, [sp, #4]
100009a0:	2300      	movs	r3, #0
100009a2:	4699      	mov	r9, r3
100009a4:	0032      	movs	r2, r6
100009a6:	0038      	movs	r0, r7
100009a8:	0021      	movs	r1, r4
100009aa:	f7ff fcb7 	bl	1000031c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
100009ae:	2a09      	cmp	r2, #9
100009b0:	d8e0      	bhi.n	10000974 <encode_uint+0x2c>
100009b2:	b2d2      	uxtb	r2, r2
100009b4:	3230      	adds	r2, #48	; 0x30
100009b6:	b2d2      	uxtb	r2, r2
100009b8:	e7e2      	b.n	10000980 <encode_uint+0x38>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
100009ba:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
100009bc:	3237      	adds	r2, #55	; 0x37
100009be:	b2d2      	uxtb	r2, r2
100009c0:	e7de      	b.n	10000980 <encode_uint+0x38>
	} while ((value != 0) && (bps < bp));
100009c2:	9b01      	ldr	r3, [sp, #4]
100009c4:	42bb      	cmp	r3, r7
100009c6:	d9e6      	bls.n	10000996 <encode_uint+0x4e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
100009c8:	4643      	mov	r3, r8
100009ca:	781b      	ldrb	r3, [r3, #0]
100009cc:	069b      	lsls	r3, r3, #26
100009ce:	d503      	bpl.n	100009d8 <encode_uint+0x90>
		if (radix == 8) {
100009d0:	2e08      	cmp	r6, #8
100009d2:	d009      	beq.n	100009e8 <encode_uint+0xa0>
			conv->altform_0 = true;
		} else if (radix == 16) {
100009d4:	2e10      	cmp	r6, #16
100009d6:	d00e      	beq.n	100009f6 <encode_uint+0xae>
			;
		}
	}

	return bp;
}
100009d8:	0028      	movs	r0, r5
100009da:	b003      	add	sp, #12
100009dc:	bcf0      	pop	{r4, r5, r6, r7}
100009de:	46bb      	mov	fp, r7
100009e0:	46b2      	mov	sl, r6
100009e2:	46a9      	mov	r9, r5
100009e4:	46a0      	mov	r8, r4
100009e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			conv->altform_0 = true;
100009e8:	4643      	mov	r3, r8
100009ea:	789b      	ldrb	r3, [r3, #2]
100009ec:	2208      	movs	r2, #8
100009ee:	4313      	orrs	r3, r2
100009f0:	4642      	mov	r2, r8
100009f2:	7093      	strb	r3, [r2, #2]
100009f4:	e7f0      	b.n	100009d8 <encode_uint+0x90>
			conv->altform_0c = true;
100009f6:	4643      	mov	r3, r8
100009f8:	789b      	ldrb	r3, [r3, #2]
100009fa:	2210      	movs	r2, #16
100009fc:	4313      	orrs	r3, r2
100009fe:	4642      	mov	r2, r8
10000a00:	7093      	strb	r3, [r2, #2]
10000a02:	e7e9      	b.n	100009d8 <encode_uint+0x90>
10000a04:	10007625 	.word	0x10007625

10000a08 <store_count>:
 */
static inline void store_count(const struct conversion *conv,
			       void *dp,
			       int count)
{
	switch ((enum length_mod_enum)conv->length_mod) {
10000a08:	7843      	ldrb	r3, [r0, #1]
10000a0a:	065b      	lsls	r3, r3, #25
10000a0c:	0f18      	lsrs	r0, r3, #28
10000a0e:	2b00      	cmp	r3, #0
10000a10:	db04      	blt.n	10000a1c <store_count+0x14>
10000a12:	0083      	lsls	r3, r0, #2
10000a14:	480b      	ldr	r0, [pc, #44]	; (10000a44 <store_count+0x3c>)
10000a16:	58c3      	ldr	r3, [r0, r3]
10000a18:	469f      	mov	pc, r3
	case LENGTH_NONE:
		*(int *)dp = count;
10000a1a:	600a      	str	r2, [r1, #0]
		 * Static analysis tool won't raise a violation if default is empty,
		 * but has that comment.
		 */
		break;
	}
}
10000a1c:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
10000a1e:	700a      	strb	r2, [r1, #0]
		break;
10000a20:	e7fc      	b.n	10000a1c <store_count+0x14>
		*(short *)dp = (short)count;
10000a22:	800a      	strh	r2, [r1, #0]
		break;
10000a24:	e7fa      	b.n	10000a1c <store_count+0x14>
		*(long *)dp = (long)count;
10000a26:	600a      	str	r2, [r1, #0]
		break;
10000a28:	e7f8      	b.n	10000a1c <store_count+0x14>
		*(long long *)dp = (long long)count;
10000a2a:	17d3      	asrs	r3, r2, #31
10000a2c:	600a      	str	r2, [r1, #0]
10000a2e:	604b      	str	r3, [r1, #4]
		break;
10000a30:	e7f4      	b.n	10000a1c <store_count+0x14>
		*(intmax_t *)dp = (intmax_t)count;
10000a32:	17d3      	asrs	r3, r2, #31
10000a34:	600a      	str	r2, [r1, #0]
10000a36:	604b      	str	r3, [r1, #4]
		break;
10000a38:	e7f0      	b.n	10000a1c <store_count+0x14>
		*(size_t *)dp = (size_t)count;
10000a3a:	600a      	str	r2, [r1, #0]
		break;
10000a3c:	e7ee      	b.n	10000a1c <store_count+0x14>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10000a3e:	600a      	str	r2, [r1, #0]
}
10000a40:	e7ec      	b.n	10000a1c <store_count+0x14>
10000a42:	46c0      	nop			; (mov r8, r8)
10000a44:	10007094 	.word	0x10007094

10000a48 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
10000a4a:	46de      	mov	lr, fp
10000a4c:	4657      	mov	r7, sl
10000a4e:	464e      	mov	r6, r9
10000a50:	4645      	mov	r5, r8
10000a52:	b5e0      	push	{r5, r6, r7, lr}
10000a54:	b091      	sub	sp, #68	; 0x44
10000a56:	0005      	movs	r5, r0
10000a58:	4689      	mov	r9, r1
10000a5a:	0016      	movs	r6, r2
10000a5c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000a5e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10000a60:	7830      	ldrb	r0, [r6, #0]
10000a62:	2800      	cmp	r0, #0
10000a64:	d100      	bne.n	10000a68 <z_cbvprintf_impl+0x20>
10000a66:	e26a      	b.n	10000f3e <z_cbvprintf_impl+0x4f6>
		if (*fp != '%') {
10000a68:	2825      	cmp	r0, #37	; 0x25
10000a6a:	d007      	beq.n	10000a7c <z_cbvprintf_impl+0x34>
			OUTC(*fp++);
10000a6c:	3601      	adds	r6, #1
10000a6e:	4649      	mov	r1, r9
10000a70:	47a8      	blx	r5
10000a72:	2800      	cmp	r0, #0
10000a74:	da00      	bge.n	10000a78 <z_cbvprintf_impl+0x30>
10000a76:	e263      	b.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000a78:	3401      	adds	r4, #1
			continue;
10000a7a:	e7f1      	b.n	10000a60 <z_cbvprintf_impl+0x18>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
10000a7c:	af04      	add	r7, sp, #16
10000a7e:	2218      	movs	r2, #24
10000a80:	2100      	movs	r1, #0
10000a82:	0038      	movs	r0, r7
10000a84:	f002 fdfa 	bl	1000367c <memset>
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
10000a88:	0031      	movs	r1, r6
10000a8a:	a806      	add	r0, sp, #24
10000a8c:	f004 ff4c 	bl	10005928 <extract_conversion>
10000a90:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
10000a92:	7a7b      	ldrb	r3, [r7, #9]
10000a94:	07db      	lsls	r3, r3, #31
10000a96:	d541      	bpl.n	10000b1c <z_cbvprintf_impl+0xd4>
			width = va_arg(ap, int);
10000a98:	9b03      	ldr	r3, [sp, #12]
10000a9a:	1d1a      	adds	r2, r3, #4
10000a9c:	9203      	str	r2, [sp, #12]
10000a9e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
10000aa0:	2f00      	cmp	r7, #0
10000aa2:	db34      	blt.n	10000b0e <z_cbvprintf_impl+0xc6>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
10000aa4:	ab04      	add	r3, sp, #16
10000aa6:	7a5b      	ldrb	r3, [r3, #9]
10000aa8:	075a      	lsls	r2, r3, #29
10000aaa:	d54a      	bpl.n	10000b42 <z_cbvprintf_impl+0xfa>
			int arg = va_arg(ap, int);
10000aac:	9b03      	ldr	r3, [sp, #12]
10000aae:	1d1a      	adds	r2, r3, #4
10000ab0:	9203      	str	r2, [sp, #12]
10000ab2:	681b      	ldr	r3, [r3, #0]
10000ab4:	469a      	mov	sl, r3

			if (arg < 0) {
10000ab6:	2b00      	cmp	r3, #0
10000ab8:	db3a      	blt.n	10000b30 <z_cbvprintf_impl+0xe8>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
10000aba:	ab04      	add	r3, sp, #16
10000abc:	2200      	movs	r2, #0
10000abe:	9207      	str	r2, [sp, #28]
		conv->pad0_pre_exp = 0;
10000ac0:	9208      	str	r2, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
10000ac2:	7a9a      	ldrb	r2, [r3, #10]
10000ac4:	0752      	lsls	r2, r2, #29
10000ac6:	0f52      	lsrs	r2, r2, #29
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
10000ac8:	7a5b      	ldrb	r3, [r3, #9]
10000aca:	065b      	lsls	r3, r3, #25
10000acc:	0f1b      	lsrs	r3, r3, #28
		enum length_mod_enum length_mod
10000ace:	0019      	movs	r1, r3
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
10000ad0:	2a01      	cmp	r2, #1
10000ad2:	d03f      	beq.n	10000b54 <z_cbvprintf_impl+0x10c>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
10000ad4:	2a02      	cmp	r2, #2
10000ad6:	d100      	bne.n	10000ada <z_cbvprintf_impl+0x92>
10000ad8:	e089      	b.n	10000bee <z_cbvprintf_impl+0x1a6>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
10000ada:	2a04      	cmp	r2, #4
10000adc:	d100      	bne.n	10000ae0 <z_cbvprintf_impl+0x98>
10000ade:	e0e0      	b.n	10000ca2 <z_cbvprintf_impl+0x25a>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
10000ae0:	2a03      	cmp	r2, #3
10000ae2:	d100      	bne.n	10000ae6 <z_cbvprintf_impl+0x9e>
10000ae4:	e0f7      	b.n	10000cd6 <z_cbvprintf_impl+0x28e>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
10000ae6:	ab04      	add	r3, sp, #16
10000ae8:	7a1a      	ldrb	r2, [r3, #8]
10000aea:	2303      	movs	r3, #3
10000aec:	0019      	movs	r1, r3
10000aee:	4011      	ands	r1, r2
10000af0:	468b      	mov	fp, r1
10000af2:	4213      	tst	r3, r2
10000af4:	d000      	beq.n	10000af8 <z_cbvprintf_impl+0xb0>
10000af6:	e0f4      	b.n	10000ce2 <z_cbvprintf_impl+0x29a>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
10000af8:	ab04      	add	r3, sp, #16
10000afa:	7adb      	ldrb	r3, [r3, #11]
10000afc:	3b25      	subs	r3, #37	; 0x25
10000afe:	b2d9      	uxtb	r1, r3
10000b00:	2953      	cmp	r1, #83	; 0x53
10000b02:	d900      	bls.n	10000b06 <z_cbvprintf_impl+0xbe>
10000b04:	e188      	b.n	10000e18 <z_cbvprintf_impl+0x3d0>
10000b06:	008b      	lsls	r3, r1, #2
10000b08:	49c1      	ldr	r1, [pc, #772]	; (10000e10 <z_cbvprintf_impl+0x3c8>)
10000b0a:	58cb      	ldr	r3, [r1, r3]
10000b0c:	469f      	mov	pc, r3
				conv->flag_dash = true;
10000b0e:	aa04      	add	r2, sp, #16
10000b10:	7a13      	ldrb	r3, [r2, #8]
10000b12:	2104      	movs	r1, #4
10000b14:	430b      	orrs	r3, r1
10000b16:	7213      	strb	r3, [r2, #8]
				width = -width;
10000b18:	427f      	negs	r7, r7
10000b1a:	e7c3      	b.n	10000aa4 <z_cbvprintf_impl+0x5c>
		} else if (conv->width_present) {
10000b1c:	ab04      	add	r3, sp, #16
10000b1e:	7a1b      	ldrb	r3, [r3, #8]
10000b20:	b25b      	sxtb	r3, r3
10000b22:	2b00      	cmp	r3, #0
10000b24:	db02      	blt.n	10000b2c <z_cbvprintf_impl+0xe4>
		int width = -1;
10000b26:	2701      	movs	r7, #1
10000b28:	427f      	negs	r7, r7
10000b2a:	e7bb      	b.n	10000aa4 <z_cbvprintf_impl+0x5c>
			width = conv->width_value;
10000b2c:	9f07      	ldr	r7, [sp, #28]
10000b2e:	e7b9      	b.n	10000aa4 <z_cbvprintf_impl+0x5c>
				conv->prec_present = false;
10000b30:	aa04      	add	r2, sp, #16
10000b32:	7a53      	ldrb	r3, [r2, #9]
10000b34:	2102      	movs	r1, #2
10000b36:	438b      	bics	r3, r1
10000b38:	7253      	strb	r3, [r2, #9]
		int precision = -1;
10000b3a:	2301      	movs	r3, #1
10000b3c:	425b      	negs	r3, r3
10000b3e:	469a      	mov	sl, r3
10000b40:	e7bb      	b.n	10000aba <z_cbvprintf_impl+0x72>
		} else if (conv->prec_present) {
10000b42:	079b      	lsls	r3, r3, #30
10000b44:	d502      	bpl.n	10000b4c <z_cbvprintf_impl+0x104>
			precision = conv->prec_value;
10000b46:	9b08      	ldr	r3, [sp, #32]
10000b48:	469a      	mov	sl, r3
10000b4a:	e7b6      	b.n	10000aba <z_cbvprintf_impl+0x72>
		int precision = -1;
10000b4c:	2301      	movs	r3, #1
10000b4e:	425b      	negs	r3, r3
10000b50:	469a      	mov	sl, r3
10000b52:	e7b2      	b.n	10000aba <z_cbvprintf_impl+0x72>
			switch (length_mod) {
10000b54:	2b05      	cmp	r3, #5
10000b56:	d037      	beq.n	10000bc8 <z_cbvprintf_impl+0x180>
10000b58:	d80f      	bhi.n	10000b7a <z_cbvprintf_impl+0x132>
10000b5a:	2b03      	cmp	r3, #3
10000b5c:	d02c      	beq.n	10000bb8 <z_cbvprintf_impl+0x170>
10000b5e:	2b04      	cmp	r3, #4
10000b60:	d118      	bne.n	10000b94 <z_cbvprintf_impl+0x14c>
					(sint_value_type)va_arg(ap, long long);
10000b62:	9b03      	ldr	r3, [sp, #12]
10000b64:	3307      	adds	r3, #7
10000b66:	2207      	movs	r2, #7
10000b68:	4393      	bics	r3, r2
10000b6a:	001a      	movs	r2, r3
10000b6c:	3208      	adds	r2, #8
10000b6e:	9203      	str	r2, [sp, #12]
10000b70:	681a      	ldr	r2, [r3, #0]
10000b72:	685b      	ldr	r3, [r3, #4]
				value->sint =
10000b74:	9204      	str	r2, [sp, #16]
10000b76:	9305      	str	r3, [sp, #20]
				break;
10000b78:	e013      	b.n	10000ba2 <z_cbvprintf_impl+0x15a>
			switch (length_mod) {
10000b7a:	330a      	adds	r3, #10
10000b7c:	220f      	movs	r2, #15
10000b7e:	4013      	ands	r3, r2
10000b80:	2b01      	cmp	r3, #1
10000b82:	d807      	bhi.n	10000b94 <z_cbvprintf_impl+0x14c>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10000b84:	9b03      	ldr	r3, [sp, #12]
10000b86:	1d1a      	adds	r2, r3, #4
10000b88:	9203      	str	r2, [sp, #12]
10000b8a:	681b      	ldr	r3, [r3, #0]
10000b8c:	17da      	asrs	r2, r3, #31
				value->sint =
10000b8e:	9304      	str	r3, [sp, #16]
10000b90:	9205      	str	r2, [sp, #20]
				break;
10000b92:	e006      	b.n	10000ba2 <z_cbvprintf_impl+0x15a>
				value->sint = va_arg(ap, int);
10000b94:	9b03      	ldr	r3, [sp, #12]
10000b96:	1d1a      	adds	r2, r3, #4
10000b98:	9203      	str	r2, [sp, #12]
10000b9a:	681b      	ldr	r3, [r3, #0]
10000b9c:	17da      	asrs	r2, r3, #31
10000b9e:	9304      	str	r3, [sp, #16]
10000ba0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
10000ba2:	2901      	cmp	r1, #1
10000ba4:	d01c      	beq.n	10000be0 <z_cbvprintf_impl+0x198>
			} else if (length_mod == LENGTH_H) {
10000ba6:	2902      	cmp	r1, #2
10000ba8:	d19d      	bne.n	10000ae6 <z_cbvprintf_impl+0x9e>
				value->sint = (short)value->sint;
10000baa:	ab04      	add	r3, sp, #16
10000bac:	2100      	movs	r1, #0
10000bae:	5e5a      	ldrsh	r2, [r3, r1]
10000bb0:	17d1      	asrs	r1, r2, #31
10000bb2:	9204      	str	r2, [sp, #16]
10000bb4:	9105      	str	r1, [sp, #20]
10000bb6:	e796      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
					value->sint = va_arg(ap, long);
10000bb8:	9b03      	ldr	r3, [sp, #12]
10000bba:	1d1a      	adds	r2, r3, #4
10000bbc:	9203      	str	r2, [sp, #12]
10000bbe:	681b      	ldr	r3, [r3, #0]
10000bc0:	17da      	asrs	r2, r3, #31
10000bc2:	9304      	str	r3, [sp, #16]
10000bc4:	9205      	str	r2, [sp, #20]
				break;
10000bc6:	e7ec      	b.n	10000ba2 <z_cbvprintf_impl+0x15a>
					(sint_value_type)va_arg(ap, intmax_t);
10000bc8:	9b03      	ldr	r3, [sp, #12]
10000bca:	3307      	adds	r3, #7
10000bcc:	2207      	movs	r2, #7
10000bce:	4393      	bics	r3, r2
10000bd0:	001a      	movs	r2, r3
10000bd2:	3208      	adds	r2, #8
10000bd4:	9203      	str	r2, [sp, #12]
10000bd6:	681a      	ldr	r2, [r3, #0]
10000bd8:	685b      	ldr	r3, [r3, #4]
				value->sint =
10000bda:	9204      	str	r2, [sp, #16]
10000bdc:	9305      	str	r3, [sp, #20]
				break;
10000bde:	e7e0      	b.n	10000ba2 <z_cbvprintf_impl+0x15a>
				value->sint = (signed char)value->sint;
10000be0:	ab04      	add	r3, sp, #16
10000be2:	2200      	movs	r2, #0
10000be4:	569a      	ldrsb	r2, [r3, r2]
10000be6:	17d1      	asrs	r1, r2, #31
10000be8:	9204      	str	r2, [sp, #16]
10000bea:	9105      	str	r1, [sp, #20]
10000bec:	e77b      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
			switch (length_mod) {
10000bee:	2b05      	cmp	r3, #5
10000bf0:	d044      	beq.n	10000c7c <z_cbvprintf_impl+0x234>
10000bf2:	d80f      	bhi.n	10000c14 <z_cbvprintf_impl+0x1cc>
10000bf4:	2b03      	cmp	r3, #3
10000bf6:	d02d      	beq.n	10000c54 <z_cbvprintf_impl+0x20c>
10000bf8:	2b04      	cmp	r3, #4
10000bfa:	d118      	bne.n	10000c2e <z_cbvprintf_impl+0x1e6>
					(uint_value_type)va_arg(ap,
10000bfc:	9b03      	ldr	r3, [sp, #12]
10000bfe:	3307      	adds	r3, #7
10000c00:	2207      	movs	r2, #7
10000c02:	4393      	bics	r3, r2
10000c04:	001a      	movs	r2, r3
10000c06:	3208      	adds	r2, #8
10000c08:	9203      	str	r2, [sp, #12]
10000c0a:	681a      	ldr	r2, [r3, #0]
10000c0c:	685b      	ldr	r3, [r3, #4]
				value->uint =
10000c0e:	9204      	str	r2, [sp, #16]
10000c10:	9305      	str	r3, [sp, #20]
				break;
10000c12:	e013      	b.n	10000c3c <z_cbvprintf_impl+0x1f4>
			switch (length_mod) {
10000c14:	330a      	adds	r3, #10
10000c16:	220f      	movs	r2, #15
10000c18:	4013      	ands	r3, r2
10000c1a:	2b01      	cmp	r3, #1
10000c1c:	d807      	bhi.n	10000c2e <z_cbvprintf_impl+0x1e6>
					(uint_value_type)va_arg(ap, size_t);
10000c1e:	9b03      	ldr	r3, [sp, #12]
10000c20:	1d1a      	adds	r2, r3, #4
10000c22:	9203      	str	r2, [sp, #12]
10000c24:	681b      	ldr	r3, [r3, #0]
				value->uint =
10000c26:	9304      	str	r3, [sp, #16]
10000c28:	2300      	movs	r3, #0
10000c2a:	9305      	str	r3, [sp, #20]
				break;
10000c2c:	e006      	b.n	10000c3c <z_cbvprintf_impl+0x1f4>
				value->uint = va_arg(ap, unsigned int);
10000c2e:	9b03      	ldr	r3, [sp, #12]
10000c30:	1d1a      	adds	r2, r3, #4
10000c32:	9203      	str	r2, [sp, #12]
10000c34:	681b      	ldr	r3, [r3, #0]
10000c36:	9304      	str	r3, [sp, #16]
10000c38:	2300      	movs	r3, #0
10000c3a:	9305      	str	r3, [sp, #20]
			if (length_mod == LENGTH_HH) {
10000c3c:	2901      	cmp	r1, #1
10000c3e:	d029      	beq.n	10000c94 <z_cbvprintf_impl+0x24c>
			} else if (length_mod == LENGTH_H) {
10000c40:	2902      	cmp	r1, #2
10000c42:	d000      	beq.n	10000c46 <z_cbvprintf_impl+0x1fe>
10000c44:	e74f      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
				value->uint = (unsigned short)value->uint;
10000c46:	9b04      	ldr	r3, [sp, #16]
10000c48:	041b      	lsls	r3, r3, #16
10000c4a:	0c1b      	lsrs	r3, r3, #16
10000c4c:	9304      	str	r3, [sp, #16]
10000c4e:	2300      	movs	r3, #0
10000c50:	9305      	str	r3, [sp, #20]
10000c52:	e748      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
				    && (conv->specifier == 'c')) {
10000c54:	ab04      	add	r3, sp, #16
10000c56:	7adb      	ldrb	r3, [r3, #11]
				if ((!WCHAR_IS_SIGNED)
10000c58:	2b63      	cmp	r3, #99	; 0x63
10000c5a:	d007      	beq.n	10000c6c <z_cbvprintf_impl+0x224>
					value->uint = va_arg(ap, unsigned long);
10000c5c:	9b03      	ldr	r3, [sp, #12]
10000c5e:	1d1a      	adds	r2, r3, #4
10000c60:	9203      	str	r2, [sp, #12]
10000c62:	681b      	ldr	r3, [r3, #0]
10000c64:	9304      	str	r3, [sp, #16]
10000c66:	2300      	movs	r3, #0
10000c68:	9305      	str	r3, [sp, #20]
10000c6a:	e7e7      	b.n	10000c3c <z_cbvprintf_impl+0x1f4>
					value->uint = (wchar_t)va_arg(ap,
10000c6c:	9b03      	ldr	r3, [sp, #12]
10000c6e:	1d1a      	adds	r2, r3, #4
10000c70:	9203      	str	r2, [sp, #12]
10000c72:	681b      	ldr	r3, [r3, #0]
10000c74:	9304      	str	r3, [sp, #16]
10000c76:	2300      	movs	r3, #0
10000c78:	9305      	str	r3, [sp, #20]
10000c7a:	e7df      	b.n	10000c3c <z_cbvprintf_impl+0x1f4>
					(uint_value_type)va_arg(ap,
10000c7c:	9b03      	ldr	r3, [sp, #12]
10000c7e:	3307      	adds	r3, #7
10000c80:	2207      	movs	r2, #7
10000c82:	4393      	bics	r3, r2
10000c84:	001a      	movs	r2, r3
10000c86:	3208      	adds	r2, #8
10000c88:	9203      	str	r2, [sp, #12]
10000c8a:	681a      	ldr	r2, [r3, #0]
10000c8c:	685b      	ldr	r3, [r3, #4]
				value->uint =
10000c8e:	9204      	str	r2, [sp, #16]
10000c90:	9305      	str	r3, [sp, #20]
				break;
10000c92:	e7d3      	b.n	10000c3c <z_cbvprintf_impl+0x1f4>
				value->uint = (unsigned char)value->uint;
10000c94:	9b04      	ldr	r3, [sp, #16]
10000c96:	22ff      	movs	r2, #255	; 0xff
10000c98:	4013      	ands	r3, r2
10000c9a:	9304      	str	r3, [sp, #16]
10000c9c:	2300      	movs	r3, #0
10000c9e:	9305      	str	r3, [sp, #20]
10000ca0:	e721      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
			if (length_mod == LENGTH_UPPER_L) {
10000ca2:	2b08      	cmp	r3, #8
10000ca4:	d00b      	beq.n	10000cbe <z_cbvprintf_impl+0x276>
				value->dbl = va_arg(ap, double);
10000ca6:	9b03      	ldr	r3, [sp, #12]
10000ca8:	3307      	adds	r3, #7
10000caa:	2207      	movs	r2, #7
10000cac:	4393      	bics	r3, r2
10000cae:	001a      	movs	r2, r3
10000cb0:	3208      	adds	r2, #8
10000cb2:	9203      	str	r2, [sp, #12]
10000cb4:	681a      	ldr	r2, [r3, #0]
10000cb6:	685b      	ldr	r3, [r3, #4]
10000cb8:	9204      	str	r2, [sp, #16]
10000cba:	9305      	str	r3, [sp, #20]
10000cbc:	e713      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
				value->ldbl = va_arg(ap, long double);
10000cbe:	9b03      	ldr	r3, [sp, #12]
10000cc0:	3307      	adds	r3, #7
10000cc2:	3203      	adds	r2, #3
10000cc4:	4393      	bics	r3, r2
10000cc6:	001a      	movs	r2, r3
10000cc8:	3208      	adds	r2, #8
10000cca:	9203      	str	r2, [sp, #12]
10000ccc:	681a      	ldr	r2, [r3, #0]
10000cce:	685b      	ldr	r3, [r3, #4]
10000cd0:	9204      	str	r2, [sp, #16]
10000cd2:	9305      	str	r3, [sp, #20]
10000cd4:	e707      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
			value->ptr = va_arg(ap, void *);
10000cd6:	9b03      	ldr	r3, [sp, #12]
10000cd8:	1d1a      	adds	r2, r3, #4
10000cda:	9203      	str	r2, [sp, #12]
10000cdc:	681b      	ldr	r3, [r3, #0]
10000cde:	9304      	str	r3, [sp, #16]
10000ce0:	e701      	b.n	10000ae6 <z_cbvprintf_impl+0x9e>
			OUTS(sp, fp);
10000ce2:	9f02      	ldr	r7, [sp, #8]
10000ce4:	003b      	movs	r3, r7
10000ce6:	0032      	movs	r2, r6
10000ce8:	4649      	mov	r1, r9
10000cea:	0028      	movs	r0, r5
10000cec:	f004 fe53 	bl	10005996 <outs>
10000cf0:	2800      	cmp	r0, #0
10000cf2:	da00      	bge.n	10000cf6 <z_cbvprintf_impl+0x2ae>
10000cf4:	e124      	b.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000cf6:	1824      	adds	r4, r4, r0
		fp = extract_conversion(conv, sp);
10000cf8:	003e      	movs	r6, r7
			continue;
10000cfa:	e6b1      	b.n	10000a60 <z_cbvprintf_impl+0x18>
		case '%':
			OUTC('%');
10000cfc:	4649      	mov	r1, r9
10000cfe:	2025      	movs	r0, #37	; 0x25
10000d00:	47a8      	blx	r5
10000d02:	2800      	cmp	r0, #0
10000d04:	da00      	bge.n	10000d08 <z_cbvprintf_impl+0x2c0>
10000d06:	e11b      	b.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000d08:	3401      	adds	r4, #1
		char sign = 0;
10000d0a:	465e      	mov	r6, fp
		const char *bpe = buf + sizeof(buf);
10000d0c:	233e      	movs	r3, #62	; 0x3e
10000d0e:	446b      	add	r3, sp
10000d10:	469a      	mov	sl, r3
		const char *bps = NULL;
10000d12:	2300      	movs	r3, #0
10000d14:	4698      	mov	r8, r3
			break;
10000d16:	e085      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
		case 's': {
			bps = (const char *)value->ptr;
10000d18:	9b04      	ldr	r3, [sp, #16]
10000d1a:	4698      	mov	r8, r3

			size_t len;

			if (precision >= 0) {
10000d1c:	4653      	mov	r3, sl
10000d1e:	2b00      	cmp	r3, #0
10000d20:	db07      	blt.n	10000d32 <z_cbvprintf_impl+0x2ea>
				len = strnlen(bps, precision);
10000d22:	4651      	mov	r1, sl
10000d24:	4640      	mov	r0, r8
10000d26:	f002 fd4d 	bl	100037c4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
10000d2a:	4440      	add	r0, r8
10000d2c:	4682      	mov	sl, r0
		char sign = 0;
10000d2e:	465e      	mov	r6, fp
			precision = -1;

			break;
10000d30:	e078      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
				len = strlen(bps);
10000d32:	4640      	mov	r0, r8
10000d34:	f002 fd18 	bl	10003768 <strlen>
10000d38:	e7f7      	b.n	10000d2a <z_cbvprintf_impl+0x2e2>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
10000d3a:	9b04      	ldr	r3, [sp, #16]
10000d3c:	aa0a      	add	r2, sp, #40	; 0x28
10000d3e:	7013      	strb	r3, [r2, #0]
		char sign = 0;
10000d40:	465e      	mov	r6, fp
			bpe = buf + 1;
10000d42:	2329      	movs	r3, #41	; 0x29
10000d44:	446b      	add	r3, sp
10000d46:	469a      	mov	sl, r3
			bps = buf;
10000d48:	4690      	mov	r8, r2
			break;
10000d4a:	e06b      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
10000d4c:	0713      	lsls	r3, r2, #28
10000d4e:	d406      	bmi.n	10000d5e <z_cbvprintf_impl+0x316>
				sign = '+';
			} else if (conv->flag_space) {
10000d50:	2310      	movs	r3, #16
10000d52:	001e      	movs	r6, r3
10000d54:	4016      	ands	r6, r2
10000d56:	4213      	tst	r3, r2
10000d58:	d002      	beq.n	10000d60 <z_cbvprintf_impl+0x318>
				sign = ' ';
10000d5a:	2620      	movs	r6, #32
10000d5c:	e000      	b.n	10000d60 <z_cbvprintf_impl+0x318>
				sign = '+';
10000d5e:	262b      	movs	r6, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
10000d60:	9a04      	ldr	r2, [sp, #16]
10000d62:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
10000d64:	2b00      	cmp	r3, #0
10000d66:	db02      	blt.n	10000d6e <z_cbvprintf_impl+0x326>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
10000d68:	9204      	str	r2, [sp, #16]
10000d6a:	9305      	str	r3, [sp, #20]
10000d6c:	e007      	b.n	10000d7e <z_cbvprintf_impl+0x336>
				value->uint = (uint_value_type)-sint;
10000d6e:	2100      	movs	r1, #0
10000d70:	4250      	negs	r0, r2
10000d72:	4199      	sbcs	r1, r3
10000d74:	9004      	str	r0, [sp, #16]
10000d76:	9105      	str	r1, [sp, #20]
				sign = '-';
10000d78:	262d      	movs	r6, #45	; 0x2d
10000d7a:	e000      	b.n	10000d7e <z_cbvprintf_impl+0x336>
		switch (conv->specifier) {
10000d7c:	465e      	mov	r6, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
10000d7e:	9804      	ldr	r0, [sp, #16]
10000d80:	9905      	ldr	r1, [sp, #20]
10000d82:	233e      	movs	r3, #62	; 0x3e
10000d84:	446b      	add	r3, sp
10000d86:	9300      	str	r3, [sp, #0]
10000d88:	ab0a      	add	r3, sp, #40	; 0x28
10000d8a:	aa06      	add	r2, sp, #24
10000d8c:	f7ff fddc 	bl	10000948 <encode_uint>
10000d90:	4680      	mov	r8, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
10000d92:	4653      	mov	r3, sl
10000d94:	2b00      	cmp	r3, #0
10000d96:	db71      	blt.n	10000e7c <z_cbvprintf_impl+0x434>
				size_t len = bpe - bps;
10000d98:	233e      	movs	r3, #62	; 0x3e
10000d9a:	446b      	add	r3, sp
10000d9c:	4642      	mov	r2, r8
10000d9e:	1a9b      	subs	r3, r3, r2

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
10000da0:	a904      	add	r1, sp, #16
10000da2:	7a0a      	ldrb	r2, [r1, #8]
10000da4:	2040      	movs	r0, #64	; 0x40
10000da6:	4382      	bics	r2, r0
10000da8:	720a      	strb	r2, [r1, #8]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
10000daa:	459a      	cmp	sl, r3
10000dac:	d96a      	bls.n	10000e84 <z_cbvprintf_impl+0x43c>
					conv->pad0_value = precision - (int)len;
10000dae:	4652      	mov	r2, sl
10000db0:	1ad3      	subs	r3, r2, r3
10000db2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
10000db4:	233e      	movs	r3, #62	; 0x3e
10000db6:	446b      	add	r3, sp
10000db8:	469a      	mov	sl, r3
10000dba:	e033      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
10000dbc:	9804      	ldr	r0, [sp, #16]
10000dbe:	2800      	cmp	r0, #0
10000dc0:	d107      	bne.n	10000dd2 <z_cbvprintf_impl+0x38a>
		char sign = 0;
10000dc2:	465e      	mov	r6, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
10000dc4:	4b13      	ldr	r3, [pc, #76]	; (10000e14 <z_cbvprintf_impl+0x3cc>)
10000dc6:	469a      	mov	sl, r3
			bps = "(nil)";
10000dc8:	2305      	movs	r3, #5
10000dca:	425b      	negs	r3, r3
10000dcc:	4453      	add	r3, sl
10000dce:	4698      	mov	r8, r3
10000dd0:	e028      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
				bps = encode_uint((uintptr_t)value->ptr, conv,
10000dd2:	ae04      	add	r6, sp, #16
10000dd4:	233e      	movs	r3, #62	; 0x3e
10000dd6:	446b      	add	r3, sp
10000dd8:	9300      	str	r3, [sp, #0]
10000dda:	ab0a      	add	r3, sp, #40	; 0x28
10000ddc:	aa06      	add	r2, sp, #24
10000dde:	2100      	movs	r1, #0
10000de0:	f7ff fdb2 	bl	10000948 <encode_uint>
10000de4:	4680      	mov	r8, r0
				conv->altform_0c = true;
10000de6:	7ab3      	ldrb	r3, [r6, #10]
10000de8:	2210      	movs	r2, #16
10000dea:	4313      	orrs	r3, r2
10000dec:	72b3      	strb	r3, [r6, #10]
				conv->specifier = 'x';
10000dee:	2378      	movs	r3, #120	; 0x78
10000df0:	72f3      	strb	r3, [r6, #11]
		char sign = 0;
10000df2:	465e      	mov	r6, fp
				goto prec_int_pad0;
10000df4:	e7cd      	b.n	10000d92 <z_cbvprintf_impl+0x34a>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
10000df6:	9904      	ldr	r1, [sp, #16]
10000df8:	0022      	movs	r2, r4
10000dfa:	a806      	add	r0, sp, #24
10000dfc:	f7ff fe04 	bl	10000a08 <store_count>
		char sign = 0;
10000e00:	465e      	mov	r6, fp
		const char *bpe = buf + sizeof(buf);
10000e02:	233e      	movs	r3, #62	; 0x3e
10000e04:	446b      	add	r3, sp
10000e06:	469a      	mov	sl, r3
		const char *bps = NULL;
10000e08:	2300      	movs	r3, #0
10000e0a:	4698      	mov	r8, r3
			}

			break;
10000e0c:	e00a      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
10000e0e:	46c0      	nop			; (mov r8, r8)
10000e10:	100070bc 	.word	0x100070bc
10000e14:	100070b9 	.word	0x100070b9
		switch (conv->specifier) {
10000e18:	465e      	mov	r6, fp
10000e1a:	233e      	movs	r3, #62	; 0x3e
10000e1c:	446b      	add	r3, sp
10000e1e:	469a      	mov	sl, r3
10000e20:	2300      	movs	r3, #0
10000e22:	4698      	mov	r8, r3
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
10000e24:	4643      	mov	r3, r8
10000e26:	2b00      	cmp	r3, #0
10000e28:	d100      	bne.n	10000e2c <z_cbvprintf_impl+0x3e4>
10000e2a:	e086      	b.n	10000f3a <z_cbvprintf_impl+0x4f2>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
10000e2c:	4653      	mov	r3, sl
10000e2e:	4642      	mov	r2, r8
10000e30:	1a99      	subs	r1, r3, r2
		int pad_len = 0;

		if (sign != 0) {
10000e32:	2e00      	cmp	r6, #0
10000e34:	d000      	beq.n	10000e38 <z_cbvprintf_impl+0x3f0>
			nj_len += 1U;
10000e36:	3101      	adds	r1, #1
		}

		if (conv->altform_0c) {
10000e38:	ab04      	add	r3, sp, #16
10000e3a:	7a9a      	ldrb	r2, [r3, #10]
10000e3c:	06d3      	lsls	r3, r2, #27
10000e3e:	d525      	bpl.n	10000e8c <z_cbvprintf_impl+0x444>
			nj_len += 2U;
10000e40:	3102      	adds	r1, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
10000e42:	9b07      	ldr	r3, [sp, #28]
10000e44:	185b      	adds	r3, r3, r1
		if (conv->pad_fp) {
10000e46:	0652      	lsls	r2, r2, #25
10000e48:	d501      	bpl.n	10000e4e <z_cbvprintf_impl+0x406>
			nj_len += conv->pad0_pre_exp;
10000e4a:	9a08      	ldr	r2, [sp, #32]
10000e4c:	189b      	adds	r3, r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
10000e4e:	2f00      	cmp	r7, #0
10000e50:	dd31      	ble.n	10000eb6 <z_cbvprintf_impl+0x46e>
			width -= (int)nj_len;
10000e52:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
10000e54:	ab04      	add	r3, sp, #16
10000e56:	7a1b      	ldrb	r3, [r3, #8]
10000e58:	075b      	lsls	r3, r3, #29
10000e5a:	d42c      	bmi.n	10000eb6 <z_cbvprintf_impl+0x46e>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
10000e5c:	ab04      	add	r3, sp, #16
10000e5e:	7a1b      	ldrb	r3, [r3, #8]
10000e60:	065b      	lsls	r3, r3, #25
10000e62:	d517      	bpl.n	10000e94 <z_cbvprintf_impl+0x44c>
					if (sign != 0) {
10000e64:	2e00      	cmp	r6, #0
10000e66:	d018      	beq.n	10000e9a <z_cbvprintf_impl+0x452>
						OUTC(sign);
10000e68:	4649      	mov	r1, r9
10000e6a:	0030      	movs	r0, r6
10000e6c:	47a8      	blx	r5
10000e6e:	2800      	cmp	r0, #0
10000e70:	db66      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000e72:	3401      	adds	r4, #1
						sign = 0;
10000e74:	465e      	mov	r6, fp
					}
					pad = '0';
10000e76:	2330      	movs	r3, #48	; 0x30
10000e78:	469b      	mov	fp, r3
10000e7a:	e010      	b.n	10000e9e <z_cbvprintf_impl+0x456>
		const char *bpe = buf + sizeof(buf);
10000e7c:	233e      	movs	r3, #62	; 0x3e
10000e7e:	446b      	add	r3, sp
10000e80:	469a      	mov	sl, r3
10000e82:	e7cf      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
10000e84:	233e      	movs	r3, #62	; 0x3e
10000e86:	446b      	add	r3, sp
10000e88:	469a      	mov	sl, r3
10000e8a:	e7cb      	b.n	10000e24 <z_cbvprintf_impl+0x3dc>
		} else if (conv->altform_0) {
10000e8c:	0713      	lsls	r3, r2, #28
10000e8e:	d5d8      	bpl.n	10000e42 <z_cbvprintf_impl+0x3fa>
			nj_len += 1U;
10000e90:	3101      	adds	r1, #1
10000e92:	e7d6      	b.n	10000e42 <z_cbvprintf_impl+0x3fa>
				char pad = ' ';
10000e94:	2320      	movs	r3, #32
10000e96:	469b      	mov	fp, r3
10000e98:	e001      	b.n	10000e9e <z_cbvprintf_impl+0x456>
					pad = '0';
10000e9a:	2330      	movs	r3, #48	; 0x30
10000e9c:	469b      	mov	fp, r3
10000e9e:	003b      	movs	r3, r7
				}

				while (width-- > 0) {
10000ea0:	1e5f      	subs	r7, r3, #1
10000ea2:	2b00      	cmp	r3, #0
10000ea4:	dd07      	ble.n	10000eb6 <z_cbvprintf_impl+0x46e>
					OUTC(pad);
10000ea6:	4649      	mov	r1, r9
10000ea8:	4658      	mov	r0, fp
10000eaa:	47a8      	blx	r5
10000eac:	2800      	cmp	r0, #0
10000eae:	db47      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000eb0:	3401      	adds	r4, #1
				while (width-- > 0) {
10000eb2:	003b      	movs	r3, r7
10000eb4:	e7f4      	b.n	10000ea0 <z_cbvprintf_impl+0x458>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
10000eb6:	2e00      	cmp	r6, #0
10000eb8:	d005      	beq.n	10000ec6 <z_cbvprintf_impl+0x47e>
			OUTC(sign);
10000eba:	4649      	mov	r1, r9
10000ebc:	0030      	movs	r0, r6
10000ebe:	47a8      	blx	r5
10000ec0:	2800      	cmp	r0, #0
10000ec2:	db3d      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000ec4:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
10000ec6:	ab04      	add	r3, sp, #16
10000ec8:	7a9b      	ldrb	r3, [r3, #10]
10000eca:	06da      	lsls	r2, r3, #27
10000ecc:	0fd2      	lsrs	r2, r2, #31
10000ece:	071b      	lsls	r3, r3, #28
10000ed0:	0fdb      	lsrs	r3, r3, #31
10000ed2:	4313      	orrs	r3, r2
10000ed4:	d005      	beq.n	10000ee2 <z_cbvprintf_impl+0x49a>
				OUTC('0');
10000ed6:	4649      	mov	r1, r9
10000ed8:	2030      	movs	r0, #48	; 0x30
10000eda:	47a8      	blx	r5
10000edc:	2800      	cmp	r0, #0
10000ede:	db2f      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000ee0:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
10000ee2:	ab04      	add	r3, sp, #16
10000ee4:	7a9b      	ldrb	r3, [r3, #10]
10000ee6:	06db      	lsls	r3, r3, #27
10000ee8:	d506      	bpl.n	10000ef8 <z_cbvprintf_impl+0x4b0>
				OUTC(conv->specifier);
10000eea:	ab04      	add	r3, sp, #16
10000eec:	7ad8      	ldrb	r0, [r3, #11]
10000eee:	4649      	mov	r1, r9
10000ef0:	47a8      	blx	r5
10000ef2:	2800      	cmp	r0, #0
10000ef4:	db24      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000ef6:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
10000ef8:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
10000efa:	1e5e      	subs	r6, r3, #1
10000efc:	2b00      	cmp	r3, #0
10000efe:	dd07      	ble.n	10000f10 <z_cbvprintf_impl+0x4c8>
				OUTC('0');
10000f00:	4649      	mov	r1, r9
10000f02:	2030      	movs	r0, #48	; 0x30
10000f04:	47a8      	blx	r5
10000f06:	2800      	cmp	r0, #0
10000f08:	db1a      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000f0a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
10000f0c:	0033      	movs	r3, r6
10000f0e:	e7f4      	b.n	10000efa <z_cbvprintf_impl+0x4b2>
			}

			OUTS(bps, bpe);
10000f10:	4653      	mov	r3, sl
10000f12:	4642      	mov	r2, r8
10000f14:	4649      	mov	r1, r9
10000f16:	0028      	movs	r0, r5
10000f18:	f004 fd3d 	bl	10005996 <outs>
10000f1c:	2800      	cmp	r0, #0
10000f1e:	db0f      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000f20:	1824      	adds	r4, r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
10000f22:	2f00      	cmp	r7, #0
10000f24:	dd07      	ble.n	10000f36 <z_cbvprintf_impl+0x4ee>
			OUTC(' ');
10000f26:	4649      	mov	r1, r9
10000f28:	2020      	movs	r0, #32
10000f2a:	47a8      	blx	r5
10000f2c:	2800      	cmp	r0, #0
10000f2e:	db07      	blt.n	10000f40 <z_cbvprintf_impl+0x4f8>
10000f30:	3401      	adds	r4, #1
			--width;
10000f32:	3f01      	subs	r7, #1
10000f34:	e7f5      	b.n	10000f22 <z_cbvprintf_impl+0x4da>
		fp = extract_conversion(conv, sp);
10000f36:	9e02      	ldr	r6, [sp, #8]
10000f38:	e592      	b.n	10000a60 <z_cbvprintf_impl+0x18>
10000f3a:	9e02      	ldr	r6, [sp, #8]
10000f3c:	e590      	b.n	10000a60 <z_cbvprintf_impl+0x18>
		}
	}

	return count;
10000f3e:	0020      	movs	r0, r4
#undef OUTS
#undef OUTC
}
10000f40:	b011      	add	sp, #68	; 0x44
10000f42:	bcf0      	pop	{r4, r5, r6, r7}
10000f44:	46bb      	mov	fp, r7
10000f46:	46b2      	mov	sl, r6
10000f48:	46a9      	mov	r9, r5
10000f4a:	46a0      	mov	r8, r4
10000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000f4e:	46c0      	nop			; (mov r8, r8)

10000f50 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
10000f50:	4901      	ldr	r1, [pc, #4]	; (10000f58 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
10000f52:	2210      	movs	r2, #16
	str	r2, [r1]
10000f54:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
10000f56:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
10000f58:	e000ed10 	.word	0xe000ed10

10000f5c <arch_cpu_idle>:

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
10000f5c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
10000f60:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
10000f62:	b662      	cpsie	i
	isb
10000f64:	f3bf 8f6f 	isb	sy

	bx	lr
10000f68:	4770      	bx	lr
10000f6a:	46c0      	nop			; (mov r8, r8)

10000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000f6c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
10000f6e:	2800      	cmp	r0, #0
10000f70:	db11      	blt.n	10000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f72:	0883      	lsrs	r3, r0, #2
10000f74:	4d13      	ldr	r5, [pc, #76]	; (10000fc4 <__NVIC_SetPriority+0x58>)
10000f76:	33c0      	adds	r3, #192	; 0xc0
10000f78:	009b      	lsls	r3, r3, #2
10000f7a:	595c      	ldr	r4, [r3, r5]
10000f7c:	2203      	movs	r2, #3
10000f7e:	4010      	ands	r0, r2
10000f80:	00c0      	lsls	r0, r0, #3
10000f82:	32fc      	adds	r2, #252	; 0xfc
10000f84:	0016      	movs	r6, r2
10000f86:	4086      	lsls	r6, r0
10000f88:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000f8a:	0149      	lsls	r1, r1, #5
10000f8c:	400a      	ands	r2, r1
10000f8e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f90:	4322      	orrs	r2, r4
10000f92:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10000f94:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000f96:	230f      	movs	r3, #15
10000f98:	4003      	ands	r3, r0
10000f9a:	3b08      	subs	r3, #8
10000f9c:	089b      	lsrs	r3, r3, #2
10000f9e:	3306      	adds	r3, #6
10000fa0:	009b      	lsls	r3, r3, #2
10000fa2:	4a09      	ldr	r2, [pc, #36]	; (10000fc8 <__NVIC_SetPriority+0x5c>)
10000fa4:	4694      	mov	ip, r2
10000fa6:	4463      	add	r3, ip
10000fa8:	685c      	ldr	r4, [r3, #4]
10000faa:	2203      	movs	r2, #3
10000fac:	4010      	ands	r0, r2
10000fae:	00c0      	lsls	r0, r0, #3
10000fb0:	32fc      	adds	r2, #252	; 0xfc
10000fb2:	0015      	movs	r5, r2
10000fb4:	4085      	lsls	r5, r0
10000fb6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10000fb8:	0149      	lsls	r1, r1, #5
10000fba:	400a      	ands	r2, r1
10000fbc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10000fbe:	4322      	orrs	r2, r4
10000fc0:	605a      	str	r2, [r3, #4]
}
10000fc2:	e7e7      	b.n	10000f94 <__NVIC_SetPriority+0x28>
10000fc4:	e000e100 	.word	0xe000e100
10000fc8:	e000ed00 	.word	0xe000ed00

10000fcc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10000fcc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
10000fce:	0600      	lsls	r0, r0, #24
10000fd0:	d405      	bmi.n	10000fde <arch_irq_enable+0x12>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000fd2:	221f      	movs	r2, #31
10000fd4:	401a      	ands	r2, r3
10000fd6:	2301      	movs	r3, #1
10000fd8:	4093      	lsls	r3, r2
10000fda:	4a01      	ldr	r2, [pc, #4]	; (10000fe0 <arch_irq_enable+0x14>)
10000fdc:	6013      	str	r3, [r2, #0]
}
10000fde:	4770      	bx	lr
10000fe0:	e000e100 	.word	0xe000e100

10000fe4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
10000fe4:	bf30      	wfi
    b z_SysNmiOnReset
10000fe6:	e7fd      	b.n	10000fe4 <z_SysNmiOnReset>

10000fe8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
10000fe8:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
10000fea:	4b08      	ldr	r3, [pc, #32]	; (1000100c <z_arm_prep_c+0x24>)
10000fec:	22ff      	movs	r2, #255	; 0xff
10000fee:	4393      	bics	r3, r2
10000ff0:	4a07      	ldr	r2, [pc, #28]	; (10001010 <z_arm_prep_c+0x28>)
10000ff2:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10000ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10000ff8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10000ffc:	f001 f8b0 	bl	10002160 <z_bss_zero>
	z_data_copy();
10001000:	f001 fe86 	bl	10002d10 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10001004:	f004 fd0d 	bl	10005a22 <z_arm_interrupt_init>
	z_cstart();
10001008:	f001 f906 	bl	10002218 <z_cstart>
1000100c:	10000100 	.word	0x10000100
10001010:	e000ed00 	.word	0xe000ed00

10001014 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10001014:	4a08      	ldr	r2, [pc, #32]	; (10001038 <arch_swap+0x24>)
10001016:	6893      	ldr	r3, [r2, #8]
10001018:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
1000101a:	4908      	ldr	r1, [pc, #32]	; (1000103c <arch_swap+0x28>)
1000101c:	6809      	ldr	r1, [r1, #0]
1000101e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10001020:	4907      	ldr	r1, [pc, #28]	; (10001040 <arch_swap+0x2c>)
10001022:	6848      	ldr	r0, [r1, #4]
10001024:	2380      	movs	r3, #128	; 0x80
10001026:	055b      	lsls	r3, r3, #21
10001028:	4303      	orrs	r3, r0
1000102a:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
1000102c:	b662      	cpsie	i
1000102e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10001032:	6893      	ldr	r3, [r2, #8]
10001034:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
10001036:	4770      	bx	lr
10001038:	20000bf4 	.word	0x20000bf4
1000103c:	10007578 	.word	0x10007578
10001040:	e000ed00 	.word	0xe000ed00

10001044 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10001044:	4913      	ldr	r1, [pc, #76]	; (10001094 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10001046:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10001048:	4813      	ldr	r0, [pc, #76]	; (10001098 <_thread_irq_disabled+0x22>)
    add r0, r2
1000104a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
1000104c:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10001050:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10001052:	4643      	mov	r3, r8
    mov r4, r9
10001054:	464c      	mov	r4, r9
    mov r5, r10
10001056:	4655      	mov	r5, sl
    mov r6, r11
10001058:	465e      	mov	r6, fp
    mov r7, ip
1000105a:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
1000105c:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
1000105e:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10001060:	4f0e      	ldr	r7, [pc, #56]	; (1000109c <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10001062:	4e0f      	ldr	r6, [pc, #60]	; (100010a0 <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10001064:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
10001066:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10001068:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
1000106a:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
1000106c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
1000106e:	6753      	str	r3, [r2, #116]	; 0x74
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10001070:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10001072:	d100      	bne.n	10001076 <_thread_irq_disabled>
    cpsie i
10001074:	b662      	cpsie	i

10001076 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10001076:	4c08      	ldr	r4, [pc, #32]	; (10001098 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10001078:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
1000107a:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
1000107c:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
1000107e:	4698      	mov	r8, r3
    mov r9, r4
10001080:	46a1      	mov	r9, r4
    mov r10, r5
10001082:	46aa      	mov	sl, r5
    mov r11, r6
10001084:	46b3      	mov	fp, r6
    mov ip, r7
10001086:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10001088:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
1000108a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
1000108c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10001090:	4770      	bx	lr
10001092:	0000      	.short	0x0000
    ldr r1, =_kernel
10001094:	20000bf4 	.word	0x20000bf4
    ldr r0, =_thread_offset_to_callee_saved
10001098:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
1000109c:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
100010a0:	08000000 	.word	0x08000000

100010a4 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
100010a4:	2004      	movs	r0, #4
  mov r1, lr
100010a6:	4671      	mov	r1, lr
  tst r1, r0
100010a8:	4201      	tst	r1, r0
  beq _stack_frame_msp
100010aa:	d002      	beq.n	100010b2 <_stack_frame_msp>
  mrs r0, PSP
100010ac:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
100010b0:	d101      	bne.n	100010b6 <_stack_frame_endif>

100010b2 <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
100010b2:	f3ef 8008 	mrs	r0, MSP

100010b6 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
100010b6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
100010b8:	3902      	subs	r1, #2
    ldrb r1, [r1]
100010ba:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
100010bc:	2902      	cmp	r1, #2
    beq _oops
100010be:	d0ff      	beq.n	100010c0 <_oops>

100010c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
100010c0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
100010c2:	f004 fc89 	bl	100059d8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
100010c6:	bd01      	pop	{r0, pc}

100010c8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
100010c8:	b510      	push	{r4, lr}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
100010ca:	3a20      	subs	r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
100010cc:	4909      	ldr	r1, [pc, #36]	; (100010f4 <arch_new_thread+0x2c>)
100010ce:	6191      	str	r1, [r2, #24]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
100010d0:	2401      	movs	r4, #1
100010d2:	43a1      	bics	r1, r4
100010d4:	6191      	str	r1, [r2, #24]
#endif
	iframe->a1 = (uint32_t)entry;
100010d6:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
100010d8:	9b02      	ldr	r3, [sp, #8]
100010da:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
100010dc:	9b03      	ldr	r3, [sp, #12]
100010de:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
100010e0:	9b04      	ldr	r3, [sp, #16]
100010e2:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
100010e4:	2380      	movs	r3, #128	; 0x80
100010e6:	045b      	lsls	r3, r3, #17
100010e8:	61d3      	str	r3, [r2, #28]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
100010ea:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
100010ec:	2300      	movs	r3, #0
100010ee:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
100010f0:	bd10      	pop	{r4, pc}
100010f2:	46c0      	nop			; (mov r8, r8)
100010f4:	10005843 	.word	0x10005843

100010f8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
100010f8:	4b06      	ldr	r3, [pc, #24]	; (10001114 <arch_switch_to_main_thread+0x1c>)
100010fa:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
100010fc:	1c10      	adds	r0, r2, #0
100010fe:	f381 8809 	msr	PSP, r1
10001102:	2100      	movs	r1, #0
10001104:	b662      	cpsie	i
10001106:	f3bf 8f6f 	isb	sy
1000110a:	2200      	movs	r2, #0
1000110c:	2300      	movs	r3, #0
1000110e:	f004 fb98 	bl	10005842 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10001112:	46c0      	nop			; (mov r8, r8)
10001114:	20000bf4 	.word	0x20000bf4

10001118 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10001118:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
1000111a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
1000111e:	4905      	ldr	r1, [pc, #20]	; (10001134 <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10001120:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10001122:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10001124:	4904      	ldr	r1, [pc, #16]	; (10001138 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10001126:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10001128:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
1000112a:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
1000112c:	bc09      	pop	{r0, r3}
	mov lr, r3
1000112e:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10001130:	4902      	ldr	r1, [pc, #8]	; (1000113c <_isr_wrapper+0x24>)
	bx r1
10001132:	4708      	bx	r1
	ldr r1, =16
10001134:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10001138:	10006d10 	.word	0x10006d10
	ldr r1, =z_arm_int_exit
1000113c:	10001141 	.word	0x10001141

10001140 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10001140:	4b04      	ldr	r3, [pc, #16]	; (10001154 <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10001142:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10001144:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
10001146:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10001148:	d002      	beq.n	10001150 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
1000114a:	4903      	ldr	r1, [pc, #12]	; (10001158 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
1000114c:	4a03      	ldr	r2, [pc, #12]	; (1000115c <_EXIT_EXC+0xc>)
	str r2, [r1]
1000114e:	600a      	str	r2, [r1, #0]

10001150 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10001150:	4770      	bx	lr
10001152:	0000      	.short	0x0000
	ldr r3, =_kernel
10001154:	20000bf4 	.word	0x20000bf4
	ldr r1, =_SCS_ICSR
10001158:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
1000115c:	10000000 	.word	0x10000000

10001160 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
10001160:	b570      	push	{r4, r5, r6, lr}
10001162:	000c      	movs	r4, r1
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
10001164:	6983      	ldr	r3, [r0, #24]
	uint16_t fault_insn = *(ret_addr - 1);
10001166:	3b02      	subs	r3, #2
10001168:	881a      	ldrh	r2, [r3, #0]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
1000116a:	4b06      	ldr	r3, [pc, #24]	; (10001184 <hard_fault+0x24>)
1000116c:	429a      	cmp	r2, r3
1000116e:	d006      	beq.n	1000117e <hard_fault+0x1e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10001170:	2500      	movs	r5, #0

		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
10001172:	2101      	movs	r1, #1
10001174:	f004 fc47 	bl	10005a06 <memory_fault_recoverable>
10001178:	7020      	strb	r0, [r4, #0]
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
1000117a:	0028      	movs	r0, r5
1000117c:	bd70      	pop	{r4, r5, r6, pc}
		reason = esf->basic.r0;
1000117e:	6805      	ldr	r5, [r0, #0]
10001180:	e7f7      	b.n	10001172 <hard_fault+0x12>
10001182:	46c0      	nop			; (mov r8, r8)
10001184:	0000df02 	.word	0x0000df02

10001188 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10001188:	b5f0      	push	{r4, r5, r6, r7, lr}
1000118a:	b08b      	sub	sp, #44	; 0x2c
1000118c:	000c      	movs	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
1000118e:	4b20      	ldr	r3, [pc, #128]	; (10001210 <z_arm_fault+0x88>)
10001190:	6859      	ldr	r1, [r3, #4]
10001192:	05c9      	lsls	r1, r1, #23
10001194:	0dc9      	lsrs	r1, r1, #23
10001196:	b662      	cpsie	i
10001198:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
1000119c:	0e13      	lsrs	r3, r2, #24
1000119e:	061b      	lsls	r3, r3, #24
100011a0:	25ff      	movs	r5, #255	; 0xff
100011a2:	062d      	lsls	r5, r5, #24
100011a4:	42ab      	cmp	r3, r5
100011a6:	d115      	bne.n	100011d4 <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
100011a8:	230c      	movs	r3, #12
100011aa:	4013      	ands	r3, r2
100011ac:	2b08      	cmp	r3, #8
100011ae:	d014      	beq.n	100011da <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
100011b0:	0712      	lsls	r2, r2, #28
100011b2:	d50c      	bpl.n	100011ce <z_arm_fault+0x46>
	*nested_exc = false;
100011b4:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
100011b6:	2527      	movs	r5, #39	; 0x27
100011b8:	446d      	add	r5, sp
100011ba:	002a      	movs	r2, r5
100011bc:	0020      	movs	r0, r4
100011be:	f004 fc24 	bl	10005a0a <fault_handle>
100011c2:	0006      	movs	r6, r0
	if (recoverable) {
100011c4:	782b      	ldrb	r3, [r5, #0]
100011c6:	2b00      	cmp	r3, #0
100011c8:	d00a      	beq.n	100011e0 <z_arm_fault+0x58>
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
}
100011ca:	b00b      	add	sp, #44	; 0x2c
100011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
100011ce:	0004      	movs	r4, r0
			*nested_exc = true;
100011d0:	2701      	movs	r7, #1
100011d2:	e7f0      	b.n	100011b6 <z_arm_fault+0x2e>
	*nested_exc = false;
100011d4:	2700      	movs	r7, #0
		return NULL;
100011d6:	2400      	movs	r4, #0
100011d8:	e7ed      	b.n	100011b6 <z_arm_fault+0x2e>
	*nested_exc = false;
100011da:	2700      	movs	r7, #0
		return NULL;
100011dc:	2400      	movs	r4, #0
100011de:	e7ea      	b.n	100011b6 <z_arm_fault+0x2e>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
100011e0:	2220      	movs	r2, #32
100011e2:	0021      	movs	r1, r4
100011e4:	a801      	add	r0, sp, #4
100011e6:	f002 fa01 	bl	100035ec <memcpy>
	if (nested_exc) {
100011ea:	2f00      	cmp	r7, #0
100011ec:	d006      	beq.n	100011fc <z_arm_fault+0x74>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
100011ee:	9b08      	ldr	r3, [sp, #32]
100011f0:	05da      	lsls	r2, r3, #23
100011f2:	d107      	bne.n	10001204 <z_arm_fault+0x7c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
100011f4:	4a07      	ldr	r2, [pc, #28]	; (10001214 <z_arm_fault+0x8c>)
100011f6:	4313      	orrs	r3, r2
100011f8:	9308      	str	r3, [sp, #32]
100011fa:	e003      	b.n	10001204 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
100011fc:	9b08      	ldr	r3, [sp, #32]
100011fe:	0a5b      	lsrs	r3, r3, #9
10001200:	025b      	lsls	r3, r3, #9
10001202:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
10001204:	a901      	add	r1, sp, #4
10001206:	0030      	movs	r0, r6
10001208:	f004 fbe2 	bl	100059d0 <z_arm_fatal_error>
1000120c:	e7dd      	b.n	100011ca <z_arm_fault+0x42>
1000120e:	46c0      	nop			; (mov r8, r8)
10001210:	e000ed00 	.word	0xe000ed00
10001214:	000001ff 	.word	0x000001ff

10001218 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10001218:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
1000121c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10001220:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10001222:	4672      	mov	r2, lr
	bl z_arm_fault
10001224:	f7ff ffb0 	bl	10001188 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10001228:	bd01      	pop	{r0, pc}
1000122a:	46c0      	nop			; (mov r8, r8)

1000122c <__NVIC_SetPriority>:
{
1000122c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
1000122e:	2800      	cmp	r0, #0
10001230:	db11      	blt.n	10001256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001232:	0883      	lsrs	r3, r0, #2
10001234:	4d13      	ldr	r5, [pc, #76]	; (10001284 <__NVIC_SetPriority+0x58>)
10001236:	33c0      	adds	r3, #192	; 0xc0
10001238:	009b      	lsls	r3, r3, #2
1000123a:	595c      	ldr	r4, [r3, r5]
1000123c:	2203      	movs	r2, #3
1000123e:	4010      	ands	r0, r2
10001240:	00c0      	lsls	r0, r0, #3
10001242:	32fc      	adds	r2, #252	; 0xfc
10001244:	0016      	movs	r6, r2
10001246:	4086      	lsls	r6, r0
10001248:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000124a:	0149      	lsls	r1, r1, #5
1000124c:	400a      	ands	r2, r1
1000124e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001250:	4322      	orrs	r2, r4
10001252:	515a      	str	r2, [r3, r5]
}
10001254:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001256:	230f      	movs	r3, #15
10001258:	4003      	ands	r3, r0
1000125a:	3b08      	subs	r3, #8
1000125c:	089b      	lsrs	r3, r3, #2
1000125e:	3306      	adds	r3, #6
10001260:	009b      	lsls	r3, r3, #2
10001262:	4a09      	ldr	r2, [pc, #36]	; (10001288 <__NVIC_SetPriority+0x5c>)
10001264:	4694      	mov	ip, r2
10001266:	4463      	add	r3, ip
10001268:	685c      	ldr	r4, [r3, #4]
1000126a:	2203      	movs	r2, #3
1000126c:	4010      	ands	r0, r2
1000126e:	00c0      	lsls	r0, r0, #3
10001270:	32fc      	adds	r2, #252	; 0xfc
10001272:	0015      	movs	r5, r2
10001274:	4085      	lsls	r5, r0
10001276:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001278:	0149      	lsls	r1, r1, #5
1000127a:	400a      	ands	r2, r1
1000127c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000127e:	4322      	orrs	r2, r4
10001280:	605a      	str	r2, [r3, #4]
}
10001282:	e7e7      	b.n	10001254 <__NVIC_SetPriority+0x28>
10001284:	e000e100 	.word	0xe000e100
10001288:	e000ed00 	.word	0xe000ed00

1000128c <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
1000128c:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
1000128e:	4807      	ldr	r0, [pc, #28]	; (100012ac <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001290:	4907      	ldr	r1, [pc, #28]	; (100012b0 <__start+0x24>)
    adds r0, r0, r1
10001292:	1840      	adds	r0, r0, r1
    msr PSP, r0
10001294:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10001298:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
1000129c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
1000129e:	4308      	orrs	r0, r1
    msr CONTROL, r0
100012a0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
100012a4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
100012a8:	f7ff fe9e 	bl	10000fe8 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
100012ac:	20001250 	.word	0x20001250
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
100012b0:	00000800 	.word	0x00000800

100012b4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
100012b4:	b510      	push	{r4, lr}
	if (_current == thread) {
100012b6:	4b0b      	ldr	r3, [pc, #44]	; (100012e4 <z_impl_k_thread_abort+0x30>)
100012b8:	689b      	ldr	r3, [r3, #8]
100012ba:	4283      	cmp	r3, r0
100012bc:	d002      	beq.n	100012c4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
100012be:	f001 fcf5 	bl	10002cac <z_thread_abort>
}
100012c2:	bd10      	pop	{r4, pc}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
100012c4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
100012c8:	2b00      	cmp	r3, #0
100012ca:	d0f8      	beq.n	100012be <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
100012cc:	4b06      	ldr	r3, [pc, #24]	; (100012e8 <z_impl_k_thread_abort+0x34>)
100012ce:	6859      	ldr	r1, [r3, #4]
100012d0:	2280      	movs	r2, #128	; 0x80
100012d2:	0552      	lsls	r2, r2, #21
100012d4:	430a      	orrs	r2, r1
100012d6:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
100012d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100012da:	4904      	ldr	r1, [pc, #16]	; (100012ec <z_impl_k_thread_abort+0x38>)
100012dc:	400a      	ands	r2, r1
100012de:	625a      	str	r2, [r3, #36]	; 0x24
100012e0:	e7ed      	b.n	100012be <z_impl_k_thread_abort+0xa>
100012e2:	46c0      	nop			; (mov r8, r8)
100012e4:	20000bf4 	.word	0x20000bf4
100012e8:	e000ed00 	.word	0xe000ed00
100012ec:	ffff7fff 	.word	0xffff7fff

100012f0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
100012f0:	b510      	push	{r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
100012f2:	4b03      	ldr	r3, [pc, #12]	; (10001300 <z_arm_configure_static_mpu_regions+0x10>)
100012f4:	4a03      	ldr	r2, [pc, #12]	; (10001304 <z_arm_configure_static_mpu_regions+0x14>)
100012f6:	4804      	ldr	r0, [pc, #16]	; (10001308 <z_arm_configure_static_mpu_regions+0x18>)
100012f8:	2101      	movs	r1, #1
100012fa:	f004 fc06 	bl	10005b0a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
100012fe:	bd10      	pop	{r4, pc}
10001300:	20042000 	.word	0x20042000
10001304:	20000000 	.word	0x20000000
10001308:	1000720c 	.word	0x1000720c

1000130c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
1000130c:	b510      	push	{r4, lr}
1000130e:	0003      	movs	r3, r0
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
10001310:	4a06      	ldr	r2, [pc, #24]	; (1000132c <region_init+0x20>)
10001312:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
10001314:	6808      	ldr	r0, [r1, #0]
10001316:	24ff      	movs	r4, #255	; 0xff
10001318:	43a0      	bics	r0, r4
				| MPU_RBAR_VALID_Msk | index;
1000131a:	4318      	orrs	r0, r3
1000131c:	2310      	movs	r3, #16
1000131e:	4318      	orrs	r0, r3
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
10001320:	60d0      	str	r0, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
10001322:	688b      	ldr	r3, [r1, #8]
10001324:	2101      	movs	r1, #1
10001326:	430b      	orrs	r3, r1
10001328:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
1000132a:	bd10      	pop	{r4, pc}
1000132c:	e000ed90 	.word	0xe000ed90

10001330 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
10001330:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
10001332:	4c03      	ldr	r4, [pc, #12]	; (10001340 <mpu_configure_static_mpu_regions+0x10>)
10001334:	7822      	ldrb	r2, [r4, #0]
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
10001336:	2301      	movs	r3, #1
10001338:	f004 fbbb 	bl	10005ab2 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
1000133c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
1000133e:	bd10      	pop	{r4, pc}
10001340:	20000c61 	.word	0x20000c61

10001344 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
10001344:	4b03      	ldr	r3, [pc, #12]	; (10001354 <arm_core_mpu_enable+0x10>)
10001346:	2205      	movs	r2, #5
10001348:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
1000134a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1000134e:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
10001352:	4770      	bx	lr
10001354:	e000ed90 	.word	0xe000ed90

10001358 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
10001358:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
1000135c:	4b01      	ldr	r3, [pc, #4]	; (10001364 <arm_core_mpu_disable+0xc>)
1000135e:	2200      	movs	r2, #0
10001360:	605a      	str	r2, [r3, #4]
}
10001362:	4770      	bx	lr
10001364:	e000ed90 	.word	0xe000ed90

10001368 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
10001368:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
1000136a:	4b0e      	ldr	r3, [pc, #56]	; (100013a4 <z_arm_mpu_init+0x3c>)
1000136c:	681d      	ldr	r5, [r3, #0]
1000136e:	2d08      	cmp	r5, #8
10001370:	d815      	bhi.n	1000139e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
10001372:	f7ff fff1 	bl	10001358 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
10001376:	2400      	movs	r4, #0
10001378:	e009      	b.n	1000138e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
1000137a:	4b0a      	ldr	r3, [pc, #40]	; (100013a4 <z_arm_mpu_init+0x3c>)
1000137c:	6859      	ldr	r1, [r3, #4]
1000137e:	0063      	lsls	r3, r4, #1
10001380:	191b      	adds	r3, r3, r4
10001382:	009a      	lsls	r2, r3, #2
10001384:	1889      	adds	r1, r1, r2
10001386:	0020      	movs	r0, r4
10001388:	f7ff ffc0 	bl	1000130c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
1000138c:	3401      	adds	r4, #1
1000138e:	42a5      	cmp	r5, r4
10001390:	d8f3      	bhi.n	1000137a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
10001392:	4b05      	ldr	r3, [pc, #20]	; (100013a8 <z_arm_mpu_init+0x40>)
10001394:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
10001396:	f7ff ffd5 	bl	10001344 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
1000139a:	2000      	movs	r0, #0
}
1000139c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
1000139e:	2001      	movs	r0, #1
100013a0:	4240      	negs	r0, r0
100013a2:	e7fb      	b.n	1000139c <z_arm_mpu_init+0x34>
100013a4:	10007224 	.word	0x10007224
100013a8:	20000c61 	.word	0x20000c61

100013ac <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
100013ac:	4b01      	ldr	r3, [pc, #4]	; (100013b4 <__stdout_hook_install+0x8>)
100013ae:	6018      	str	r0, [r3, #0]
}
100013b0:	4770      	bx	lr
100013b2:	46c0      	nop			; (mov r8, r8)
100013b4:	200006c0 	.word	0x200006c0

100013b8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
100013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100013ba:	0007      	movs	r7, r0
100013bc:	000e      	movs	r6, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
100013be:	2400      	movs	r4, #0
100013c0:	e000      	b.n	100013c4 <z_impl_zephyr_read_stdin+0xc>
100013c2:	3401      	adds	r4, #1
100013c4:	42b4      	cmp	r4, r6
100013c6:	da09      	bge.n	100013dc <z_impl_zephyr_read_stdin+0x24>
		*(buf + i) = _stdin_hook();
100013c8:	193d      	adds	r5, r7, r4
100013ca:	4b05      	ldr	r3, [pc, #20]	; (100013e0 <z_impl_zephyr_read_stdin+0x28>)
100013cc:	681b      	ldr	r3, [r3, #0]
100013ce:	4798      	blx	r3
100013d0:	7028      	strb	r0, [r5, #0]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
100013d2:	280a      	cmp	r0, #10
100013d4:	d001      	beq.n	100013da <z_impl_zephyr_read_stdin+0x22>
100013d6:	280d      	cmp	r0, #13
100013d8:	d1f3      	bne.n	100013c2 <z_impl_zephyr_read_stdin+0xa>
			i++;
100013da:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
100013dc:	0020      	movs	r0, r4
100013de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100013e0:	200006bc 	.word	0x200006bc

100013e4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
100013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100013e6:	0005      	movs	r5, r0
100013e8:	000f      	movs	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
100013ea:	2400      	movs	r4, #0
100013ec:	e004      	b.n	100013f8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
100013ee:	7830      	ldrb	r0, [r6, #0]
100013f0:	4b08      	ldr	r3, [pc, #32]	; (10001414 <z_impl_zephyr_write_stdout+0x30>)
100013f2:	681b      	ldr	r3, [r3, #0]
100013f4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
100013f6:	3401      	adds	r4, #1
100013f8:	42bc      	cmp	r4, r7
100013fa:	da08      	bge.n	1000140e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
100013fc:	192e      	adds	r6, r5, r4
100013fe:	5d2b      	ldrb	r3, [r5, r4]
10001400:	2b0a      	cmp	r3, #10
10001402:	d1f4      	bne.n	100013ee <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
10001404:	4b03      	ldr	r3, [pc, #12]	; (10001414 <z_impl_zephyr_write_stdout+0x30>)
10001406:	681b      	ldr	r3, [r3, #0]
10001408:	200d      	movs	r0, #13
1000140a:	4798      	blx	r3
1000140c:	e7ef      	b.n	100013ee <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
1000140e:	0038      	movs	r0, r7
10001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001412:	46c0      	nop			; (mov r8, r8)
10001414:	200006c0 	.word	0x200006c0

10001418 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
10001418:	b510      	push	{r4, lr}
	_write(1, "exit\n", 5);
1000141a:	4903      	ldr	r1, [pc, #12]	; (10001428 <_exit+0x10>)
1000141c:	2205      	movs	r2, #5
1000141e:	2001      	movs	r0, #1
10001420:	f004 fb84 	bl	10005b2c <_write>
	while (1) {
10001424:	e7fe      	b.n	10001424 <_exit+0xc>
10001426:	46c0      	nop			; (mov r8, r8)
10001428:	1000721c 	.word	0x1000721c

1000142c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
1000142c:	0003      	movs	r3, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
1000142e:	4a07      	ldr	r2, [pc, #28]	; (1000144c <_sbrk+0x20>)
10001430:	6812      	ldr	r2, [r2, #0]
10001432:	4907      	ldr	r1, [pc, #28]	; (10001450 <_sbrk+0x24>)
10001434:	1850      	adds	r0, r2, r1

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
10001436:	189b      	adds	r3, r3, r2
10001438:	4a06      	ldr	r2, [pc, #24]	; (10001454 <_sbrk+0x28>)
1000143a:	1a52      	subs	r2, r2, r1
1000143c:	4293      	cmp	r3, r2
1000143e:	d202      	bcs.n	10001446 <_sbrk+0x1a>
		heap_sz += count;
10001440:	4a02      	ldr	r2, [pc, #8]	; (1000144c <_sbrk+0x20>)
10001442:	6013      	str	r3, [r2, #0]
	} else {
		ret = (void *)-1;
	}

	return ret;
}
10001444:	4770      	bx	lr
		ret = (void *)-1;
10001446:	2001      	movs	r0, #1
10001448:	4240      	negs	r0, r0
	return ret;
1000144a:	e7fb      	b.n	10001444 <_sbrk+0x18>
1000144c:	20000b44 	.word	0x20000b44
10001450:	20001f50 	.word	0x20001f50
10001454:	20042000 	.word	0x20042000

10001458 <rp2040_init>:
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10001458:	b510      	push	{r4, lr}
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000145a:	4b0f      	ldr	r3, [pc, #60]	; (10001498 <rp2040_init+0x40>)
1000145c:	4a0f      	ldr	r2, [pc, #60]	; (1000149c <rp2040_init+0x44>)
1000145e:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001460:	4b0f      	ldr	r3, [pc, #60]	; (100014a0 <rp2040_init+0x48>)
10001462:	4a10      	ldr	r2, [pc, #64]	; (100014a4 <rp2040_init+0x4c>)
10001464:	601a      	str	r2, [r3, #0]
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10001466:	4b10      	ldr	r3, [pc, #64]	; (100014a8 <rp2040_init+0x50>)
10001468:	689a      	ldr	r2, [r3, #8]
1000146a:	4b0e      	ldr	r3, [pc, #56]	; (100014a4 <rp2040_init+0x4c>)
1000146c:	4393      	bics	r3, r2
1000146e:	d1fa      	bne.n	10001466 <rp2040_init+0xe>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10001470:	f000 fb9c 	bl	10001bac <clocks_init>
10001474:	4b0a      	ldr	r3, [pc, #40]	; (100014a0 <rp2040_init+0x48>)
10001476:	4a0d      	ldr	r2, [pc, #52]	; (100014ac <rp2040_init+0x54>)
10001478:	601a      	str	r2, [r3, #0]
1000147a:	4b0b      	ldr	r3, [pc, #44]	; (100014a8 <rp2040_init+0x50>)
1000147c:	689b      	ldr	r3, [r3, #8]
1000147e:	43db      	mvns	r3, r3
10001480:	01db      	lsls	r3, r3, #7
10001482:	d1fa      	bne.n	1000147a <rp2040_init+0x22>
	__asm__ volatile("mrs %0, PRIMASK;"
10001484:	f3ef 8310 	mrs	r3, PRIMASK
10001488:	b672      	cpsid	i
	if (key != 0U) {
1000148a:	2b00      	cmp	r3, #0
1000148c:	d102      	bne.n	10001494 <rp2040_init+0x3c>
	__asm__ volatile(
1000148e:	b662      	cpsie	i
10001490:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10001494:	2000      	movs	r0, #0
10001496:	bd10      	pop	{r4, pc}
10001498:	4000e000 	.word	0x4000e000
1000149c:	ffffcdbf 	.word	0xffffcdbf
100014a0:	4000f000 	.word	0x4000f000
100014a4:	003c3ffe 	.word	0x003c3ffe
100014a8:	4000c000 	.word	0x4000c000
100014ac:	01ffffff 	.word	0x01ffffff

100014b0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
100014b0:	b510      	push	{r4, lr}
100014b2:	0004      	movs	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
100014b4:	280a      	cmp	r0, #10
100014b6:	d006      	beq.n	100014c6 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
100014b8:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
100014ba:	4806      	ldr	r0, [pc, #24]	; (100014d4 <console_out+0x24>)
100014bc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
100014be:	685b      	ldr	r3, [r3, #4]
100014c0:	4798      	blx	r3

	return c;
}
100014c2:	0020      	movs	r0, r4
100014c4:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
100014c6:	4803      	ldr	r0, [pc, #12]	; (100014d4 <console_out+0x24>)
100014c8:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
100014ca:	685b      	ldr	r3, [r3, #4]
100014cc:	210d      	movs	r1, #13
100014ce:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
100014d0:	e7f2      	b.n	100014b8 <console_out+0x8>
100014d2:	46c0      	nop			; (mov r8, r8)
100014d4:	10006c98 	.word	0x10006c98

100014d8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
100014d8:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
100014da:	4c04      	ldr	r4, [pc, #16]	; (100014ec <uart_console_hook_install+0x14>)
100014dc:	0020      	movs	r0, r4
100014de:	f7ff ff65 	bl	100013ac <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
100014e2:	0020      	movs	r0, r4
100014e4:	f7ff f8e0 	bl	100006a8 <__printk_hook_install>
#endif
}
100014e8:	bd10      	pop	{r4, pc}
100014ea:	46c0      	nop			; (mov r8, r8)
100014ec:	100014b1 	.word	0x100014b1

100014f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
100014f0:	b510      	push	{r4, lr}
100014f2:	4806      	ldr	r0, [pc, #24]	; (1000150c <uart_console_init+0x1c>)
100014f4:	f005 f9c6 	bl	10006884 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
100014f8:	2800      	cmp	r0, #0
100014fa:	d003      	beq.n	10001504 <uart_console_init+0x14>
		return -ENODEV;
	}

	uart_console_hook_install();
100014fc:	f7ff ffec 	bl	100014d8 <uart_console_hook_install>

	return 0;
10001500:	2000      	movs	r0, #0
}
10001502:	bd10      	pop	{r4, pc}
		return -ENODEV;
10001504:	2013      	movs	r0, #19
10001506:	4240      	negs	r0, r0
10001508:	e7fb      	b.n	10001502 <uart_console_init+0x12>
1000150a:	46c0      	nop			; (mov r8, r8)
1000150c:	10006c98 	.word	0x10006c98

10001510 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
10001510:	b570      	push	{r4, r5, r6, lr}
10001512:	0005      	movs	r5, r0
	struct gpio_rpi_data *data = dev->data;
10001514:	6906      	ldr	r6, [r0, #16]
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
10001516:	2400      	movs	r4, #0
10001518:	e000      	b.n	1000151c <gpio_rpi_isr+0xc>
1000151a:	3401      	adds	r4, #1
1000151c:	2c1d      	cmp	r4, #29
1000151e:	d815      	bhi.n	1000154c <gpio_rpi_isr+0x3c>
		status_reg = &irq_ctrl_base->ints[pin / 8];
10001520:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
10001522:	3308      	adds	r3, #8
10001524:	009b      	lsls	r3, r3, #2
10001526:	4a0a      	ldr	r2, [pc, #40]	; (10001550 <gpio_rpi_isr+0x40>)
10001528:	589a      	ldr	r2, [r3, r2]
1000152a:	2307      	movs	r3, #7
1000152c:	4023      	ands	r3, r4
1000152e:	009b      	lsls	r3, r3, #2
10001530:	40da      	lsrs	r2, r3
		if (events) {
10001532:	0712      	lsls	r2, r2, #28
10001534:	d0f1      	beq.n	1000151a <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
10001536:	210f      	movs	r1, #15
10001538:	0020      	movs	r0, r4
1000153a:	f000 fcd9 	bl	10001ef0 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
1000153e:	2201      	movs	r2, #1
10001540:	40a2      	lsls	r2, r4
10001542:	1d30      	adds	r0, r6, #4
10001544:	0029      	movs	r1, r5
10001546:	f004 fb6b 	bl	10005c20 <gpio_fire_callbacks>
1000154a:	e7e6      	b.n	1000151a <gpio_rpi_isr+0xa>
		}
	}
}
1000154c:	bd70      	pop	{r4, r5, r6, pc}
1000154e:	46c0      	nop			; (mov r8, r8)
10001550:	40014100 	.word	0x40014100

10001554 <i2c_map_dt_bitrate>:
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
10001554:	4b0e      	ldr	r3, [pc, #56]	; (10001590 <i2c_map_dt_bitrate+0x3c>)
10001556:	4298      	cmp	r0, r3
10001558:	d010      	beq.n	1000157c <i2c_map_dt_bitrate+0x28>
1000155a:	d907      	bls.n	1000156c <i2c_map_dt_bitrate+0x18>
1000155c:	4b0d      	ldr	r3, [pc, #52]	; (10001594 <i2c_map_dt_bitrate+0x40>)
1000155e:	4298      	cmp	r0, r3
10001560:	d012      	beq.n	10001588 <i2c_map_dt_bitrate+0x34>
10001562:	4b0d      	ldr	r3, [pc, #52]	; (10001598 <i2c_map_dt_bitrate+0x44>)
10001564:	4298      	cmp	r0, r3
10001566:	d111      	bne.n	1000158c <i2c_map_dt_bitrate+0x38>
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
	case I2C_BITRATE_HIGH:
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
	case I2C_BITRATE_ULTRA:
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
10001568:	200a      	movs	r0, #10
1000156a:	e006      	b.n	1000157a <i2c_map_dt_bitrate+0x26>
	switch (bitrate) {
1000156c:	4b0b      	ldr	r3, [pc, #44]	; (1000159c <i2c_map_dt_bitrate+0x48>)
1000156e:	4298      	cmp	r0, r3
10001570:	d006      	beq.n	10001580 <i2c_map_dt_bitrate+0x2c>
10001572:	4b0b      	ldr	r3, [pc, #44]	; (100015a0 <i2c_map_dt_bitrate+0x4c>)
10001574:	4298      	cmp	r0, r3
10001576:	d105      	bne.n	10001584 <i2c_map_dt_bitrate+0x30>
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
10001578:	2004      	movs	r0, #4
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
}
1000157a:	4770      	bx	lr
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
1000157c:	2006      	movs	r0, #6
1000157e:	e7fc      	b.n	1000157a <i2c_map_dt_bitrate+0x26>
	switch (bitrate) {
10001580:	2002      	movs	r0, #2
10001582:	e7fa      	b.n	1000157a <i2c_map_dt_bitrate+0x26>
	return 0;
10001584:	2000      	movs	r0, #0
10001586:	e7f8      	b.n	1000157a <i2c_map_dt_bitrate+0x26>
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
10001588:	2008      	movs	r0, #8
1000158a:	e7f6      	b.n	1000157a <i2c_map_dt_bitrate+0x26>
	return 0;
1000158c:	2000      	movs	r0, #0
1000158e:	e7f4      	b.n	1000157a <i2c_map_dt_bitrate+0x26>
10001590:	000f4240 	.word	0x000f4240
10001594:	0033e140 	.word	0x0033e140
10001598:	004c4b40 	.word	0x004c4b40
1000159c:	000186a0 	.word	0x000186a0
100015a0:	00061a80 	.word	0x00061a80

100015a4 <i2c_dw_setup>:
	i2c_dw_transfer_complete(port);
}


static int i2c_dw_setup(const struct device *dev, uint16_t slave_address)
{
100015a4:	b570      	push	{r4, r5, r6, lr}
	struct i2c_dw_dev_config * const dw = dev->data;
100015a6:	6905      	ldr	r5, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100015a8:	6843      	ldr	r3, [r0, #4]
100015aa:	681a      	ldr	r2, [r3, #0]
	uint32_t value;
	union ic_con_register ic_con;
	union ic_tar_register ic_tar;
	uint32_t reg_base = get_regs(dev);

	ic_con.raw = 0U;
100015ac:	2300      	movs	r3, #0
	*(volatile uint32_t *)addr = temp | (1 << bit);
}

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
100015ae:	6ed0      	ldr	r0, [r2, #108]	; 0x6c

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
100015b0:	2401      	movs	r4, #1
100015b2:	43a0      	bics	r0, r4
100015b4:	66d0      	str	r0, [r2, #108]	; 0x6c
	return *(volatile uint32_t *)addr;
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
100015b6:	6313      	str	r3, [r2, #48]	; 0x30
	return *(volatile uint32_t *)addr;
100015b8:	6c13      	ldr	r3, [r2, #64]	; 0x40

	/* Clear interrupts */
	value = read_clr_intr(reg_base);

	/* Set master or slave mode - (initialization = slave) */
	if (I2C_MODE_CONTROLLER & dw->app_config) {
100015ba:	6928      	ldr	r0, [r5, #16]
100015bc:	06c3      	lsls	r3, r0, #27
100015be:	d553      	bpl.n	10001668 <i2c_dw_setup+0xc4>
		 * Make sure to set both the master_mode and slave_disable_bit
		 * to both 0 or both 1
		 */
		LOG_DBG("I2C: host configured as Master Device");
		ic_con.bits.master_mode = 1U;
		ic_con.bits.slave_disable = 1U;
100015c0:	2340      	movs	r3, #64	; 0x40
100015c2:	4323      	orrs	r3, r4
	} else {
		return -EINVAL;
	}

	ic_con.bits.restart_en = 1U;
100015c4:	2620      	movs	r6, #32
100015c6:	4333      	orrs	r3, r6

	/* Set addressing mode - (initialization = 7 bit) */
	if (I2C_ADDR_10_BITS & dw->app_config) {
100015c8:	4204      	tst	r4, r0
100015ca:	d003      	beq.n	100015d4 <i2c_dw_setup+0x30>
		LOG_DBG("I2C: using 10-bit address");
		ic_con.bits.addr_master_10bit = 1U;
100015cc:	340f      	adds	r4, #15
100015ce:	4323      	orrs	r3, r4
		ic_con.bits.addr_slave_10bit = 1U;
100015d0:	3c08      	subs	r4, #8
100015d2:	4323      	orrs	r3, r4
	}

	/* Setup the clock frequency and speed mode */
	switch (I2C_SPEED_GET(dw->app_config)) {
100015d4:	0844      	lsrs	r4, r0, #1
100015d6:	2007      	movs	r0, #7
100015d8:	4020      	ands	r0, r4
100015da:	2803      	cmp	r0, #3
100015dc:	d826      	bhi.n	1000162c <i2c_dw_setup+0x88>
100015de:	2802      	cmp	r0, #2
100015e0:	d234      	bcs.n	1000164c <i2c_dw_setup+0xa8>
100015e2:	2801      	cmp	r0, #1
100015e4:	d11f      	bne.n	10001626 <i2c_dw_setup+0x82>
	case I2C_SPEED_STANDARD:
		LOG_DBG("I2C: speed set to STANDARD");
		write_ss_scl_lcnt(dw->lcnt, reg_base);
100015e6:	8c68      	ldrh	r0, [r5, #34]	; 0x22
	*(volatile uint32_t *)addr = data;
100015e8:	6190      	str	r0, [r2, #24]
		write_ss_scl_hcnt(dw->hcnt, reg_base);
100015ea:	8c28      	ldrh	r0, [r5, #32]
100015ec:	6150      	str	r0, [r2, #20]
		ic_con.bits.speed = I2C_DW_SPEED_STANDARD;
100015ee:	2006      	movs	r0, #6
100015f0:	4383      	bics	r3, r0
100015f2:	3804      	subs	r0, #4
100015f4:	4303      	orrs	r3, r0
100015f6:	6013      	str	r3, [r2, #0]
100015f8:	2300      	movs	r3, #0
100015fa:	6393      	str	r3, [r2, #56]	; 0x38
100015fc:	63d3      	str	r3, [r2, #60]	; 0x3c
	return *(volatile uint32_t *)addr;
100015fe:	6853      	ldr	r3, [r2, #4]
}

static ALWAYS_INLINE int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
10001600:	6810      	ldr	r0, [r2, #0]
	 */
	write_tx_tl(0, reg_base);

	ic_tar.raw = read_tar(reg_base);

	if (test_bit_con_master_mode(reg_base)) {
10001602:	07c0      	lsls	r0, r0, #31
10001604:	d52b      	bpl.n	1000165e <i2c_dw_setup+0xba>
		/* Set address of target slave */
		ic_tar.bits.ic_tar = slave_address;
10001606:	0589      	lsls	r1, r1, #22
10001608:	0d89      	lsrs	r1, r1, #22
1000160a:	0a9b      	lsrs	r3, r3, #10
1000160c:	029b      	lsls	r3, r3, #10
1000160e:	430b      	orrs	r3, r1
	/* If I2C is being operated in master mode and I2C_DYNAMIC_TAR_UPDATE
	 * configuration parameter is set to Yes (1), the ic_10bitaddr_master
	 * bit in ic_tar register would control whether the DW_apb_i2c starts
	 * its transfers in 7-bit or 10-bit addressing mode.
	 */
	if (I2C_MODE_CONTROLLER & dw->app_config) {
10001610:	6929      	ldr	r1, [r5, #16]
10001612:	06c8      	lsls	r0, r1, #27
10001614:	d504      	bpl.n	10001620 <i2c_dw_setup+0x7c>
		if (I2C_ADDR_10_BITS & dw->app_config) {
10001616:	07c9      	lsls	r1, r1, #31
10001618:	d523      	bpl.n	10001662 <i2c_dw_setup+0xbe>
			ic_tar.bits.ic_10bitaddr_master = 1U;
1000161a:	2180      	movs	r1, #128	; 0x80
1000161c:	0149      	lsls	r1, r1, #5
1000161e:	430b      	orrs	r3, r1
	*(volatile uint32_t *)addr = data;
10001620:	6053      	str	r3, [r2, #4]
		}
	}

	write_tar(ic_tar.raw, reg_base);

	return 0;
10001622:	2000      	movs	r0, #0
}
10001624:	bd70      	pop	{r4, r5, r6, pc}
	switch (I2C_SPEED_GET(dw->app_config)) {
10001626:	2016      	movs	r0, #22
10001628:	4240      	negs	r0, r0
1000162a:	e7fb      	b.n	10001624 <i2c_dw_setup+0x80>
1000162c:	2804      	cmp	r0, #4
1000162e:	d10a      	bne.n	10001646 <i2c_dw_setup+0xa2>
		if (!dw->support_hs_mode) {
10001630:	2027      	movs	r0, #39	; 0x27
10001632:	5c28      	ldrb	r0, [r5, r0]
10001634:	2800      	cmp	r0, #0
10001636:	d01a      	beq.n	1000166e <i2c_dw_setup+0xca>
		write_hs_scl_lcnt(dw->lcnt, reg_base);
10001638:	8c68      	ldrh	r0, [r5, #34]	; 0x22
1000163a:	6290      	str	r0, [r2, #40]	; 0x28
		write_hs_scl_hcnt(dw->hcnt, reg_base);
1000163c:	8c28      	ldrh	r0, [r5, #32]
1000163e:	6250      	str	r0, [r2, #36]	; 0x24
		ic_con.bits.speed = I2C_DW_SPEED_HIGH;
10001640:	2006      	movs	r0, #6
10001642:	4303      	orrs	r3, r0
		break;
10001644:	e7d7      	b.n	100015f6 <i2c_dw_setup+0x52>
	switch (I2C_SPEED_GET(dw->app_config)) {
10001646:	2016      	movs	r0, #22
10001648:	4240      	negs	r0, r0
1000164a:	e7eb      	b.n	10001624 <i2c_dw_setup+0x80>
		write_fs_scl_lcnt(dw->lcnt, reg_base);
1000164c:	8c68      	ldrh	r0, [r5, #34]	; 0x22
1000164e:	6210      	str	r0, [r2, #32]
		write_fs_scl_hcnt(dw->hcnt, reg_base);
10001650:	8c28      	ldrh	r0, [r5, #32]
10001652:	61d0      	str	r0, [r2, #28]
		ic_con.bits.speed = I2C_DW_SPEED_FAST;
10001654:	2006      	movs	r0, #6
10001656:	4383      	bics	r3, r0
10001658:	3802      	subs	r0, #2
1000165a:	4303      	orrs	r3, r0
		break;
1000165c:	e7cb      	b.n	100015f6 <i2c_dw_setup+0x52>
1000165e:	6091      	str	r1, [r2, #8]

DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
DEFINE_MM_REG_READ(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(tar, DW_IC_REG_TAR, 32)
DEFINE_MM_REG_WRITE(sar, DW_IC_REG_SAR, 32)
10001660:	e7d6      	b.n	10001610 <i2c_dw_setup+0x6c>
			ic_tar.bits.ic_10bitaddr_master = 0U;
10001662:	4904      	ldr	r1, [pc, #16]	; (10001674 <i2c_dw_setup+0xd0>)
10001664:	400b      	ands	r3, r1
10001666:	e7db      	b.n	10001620 <i2c_dw_setup+0x7c>
		return -EINVAL;
10001668:	2016      	movs	r0, #22
1000166a:	4240      	negs	r0, r0
1000166c:	e7da      	b.n	10001624 <i2c_dw_setup+0x80>
			return -EINVAL;
1000166e:	2016      	movs	r0, #22
10001670:	4240      	negs	r0, r0
10001672:	e7d7      	b.n	10001624 <i2c_dw_setup+0x80>
10001674:	ffffefff 	.word	0xffffefff

10001678 <i2c_dw_set_slave_mode>:

	return 0;
}

static int i2c_dw_set_slave_mode(const struct device *dev, uint8_t addr)
{
10001678:	b510      	push	{r4, lr}
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000167a:	6843      	ldr	r3, [r0, #4]
1000167c:	681b      	ldr	r3, [r3, #0]
	return *(volatile uint32_t *)addr;
1000167e:	6818      	ldr	r0, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10001680:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10001682:	2401      	movs	r4, #1
10001684:	43a2      	bics	r2, r4
10001686:	66da      	str	r2, [r3, #108]	; 0x6c

	ic_con.raw = read_con(reg_base);

	clear_bit_enable_en(reg_base);

	ic_con.bits.master_mode = 0U;
10001688:	43a0      	bics	r0, r4
	ic_con.bits.slave_disable = 0U;
1000168a:	2240      	movs	r2, #64	; 0x40
1000168c:	4390      	bics	r0, r2
	ic_con.bits.rx_fifo_full = 1U;
1000168e:	32c1      	adds	r2, #193	; 0xc1
10001690:	32ff      	adds	r2, #255	; 0xff
10001692:	4302      	orrs	r2, r0
	ic_con.bits.restart_en = 1U;
10001694:	2020      	movs	r0, #32
10001696:	4302      	orrs	r2, r0
	ic_con.bits.stop_det = 1U;
10001698:	3060      	adds	r0, #96	; 0x60
1000169a:	4302      	orrs	r2, r0
	*(volatile uint32_t *)addr = data;
1000169c:	601a      	str	r2, [r3, #0]
1000169e:	6099      	str	r1, [r3, #8]
100016a0:	4a04      	ldr	r2, [pc, #16]	; (100016b4 <i2c_dw_set_slave_mode+0x3c>)
100016a2:	631a      	str	r2, [r3, #48]	; 0x30
	uint32_t temp = *(volatile uint32_t *)addr;
100016a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
100016a6:	4322      	orrs	r2, r4
100016a8:	66da      	str	r2, [r3, #108]	; 0x6c
100016aa:	2200      	movs	r2, #0
100016ac:	63da      	str	r2, [r3, #60]	; 0x3c
100016ae:	639a      	str	r2, [r3, #56]	; 0x38
	write_rx_tl(0, reg_base);

	LOG_DBG("I2C: Host registed as Slave Device");

	return 0;
}
100016b0:	2000      	movs	r0, #0
100016b2:	bd10      	pop	{r4, pc}
100016b4:	fffff700 	.word	0xfffff700

100016b8 <i2c_dw_slave_register>:

static int i2c_dw_slave_register(const struct device *dev,
				 struct i2c_target_config *cfg)
{
100016b8:	b510      	push	{r4, lr}
	struct i2c_dw_dev_config * const dw = dev->data;
100016ba:	6903      	ldr	r3, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100016bc:	6842      	ldr	r2, [r0, #4]
100016be:	6814      	ldr	r4, [r2, #0]
	uint32_t reg_base = get_regs(dev);
	int ret;

	dw->slave_cfg = cfg;
100016c0:	6299      	str	r1, [r3, #40]	; 0x28
	ret = i2c_dw_set_slave_mode(dev, cfg->address);
100016c2:	7989      	ldrb	r1, [r1, #6]
100016c4:	f7ff ffd8 	bl	10001678 <i2c_dw_set_slave_mode>
100016c8:	4b01      	ldr	r3, [pc, #4]	; (100016d0 <i2c_dw_slave_register+0x18>)
100016ca:	6323      	str	r3, [r4, #48]	; 0x30
			DW_INTR_MASK_TX_ABRT |
			DW_INTR_MASK_STOP_DET |
			DW_INTR_MASK_START_DET, reg_base);

	return ret;
}
100016cc:	bd10      	pop	{r4, pc}
100016ce:	46c0      	nop			; (mov r8, r8)
100016d0:	00000664 	.word	0x00000664

100016d4 <i2c_dw_transfer>:
{
100016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100016d6:	46c6      	mov	lr, r8
100016d8:	b500      	push	{lr}
100016da:	000e      	movs	r6, r1
100016dc:	0015      	movs	r5, r2
100016de:	0019      	movs	r1, r3
	struct i2c_dw_dev_config * const dw = dev->data;
100016e0:	6904      	ldr	r4, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100016e2:	6843      	ldr	r3, [r0, #4]
100016e4:	681f      	ldr	r7, [r3, #0]
	if (!num_msgs) {
100016e6:	2a00      	cmp	r2, #0
100016e8:	d100      	bne.n	100016ec <i2c_dw_transfer+0x18>
100016ea:	e078      	b.n	100017de <i2c_dw_transfer+0x10a>
	uint32_t temp = *(volatile uint32_t *)addr;
100016ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	if (test_bit_status_activity(reg_base) || (dw->state & I2C_DW_BUSY)) {
100016ee:	07db      	lsls	r3, r3, #31
100016f0:	d500      	bpl.n	100016f4 <i2c_dw_transfer+0x20>
100016f2:	e077      	b.n	100017e4 <i2c_dw_transfer+0x110>
100016f4:	2324      	movs	r3, #36	; 0x24
100016f6:	5ce3      	ldrb	r3, [r4, r3]
100016f8:	071b      	lsls	r3, r3, #28
100016fa:	d500      	bpl.n	100016fe <i2c_dw_transfer+0x2a>
100016fc:	e076      	b.n	100017ec <i2c_dw_transfer+0x118>
	dw->state |= I2C_DW_BUSY;
100016fe:	2324      	movs	r3, #36	; 0x24
10001700:	4698      	mov	r8, r3
10001702:	5ce2      	ldrb	r2, [r4, r3]
10001704:	2308      	movs	r3, #8
10001706:	469c      	mov	ip, r3
10001708:	4663      	mov	r3, ip
1000170a:	431a      	orrs	r2, r3
1000170c:	b2d2      	uxtb	r2, r2
1000170e:	4643      	mov	r3, r8
10001710:	54e2      	strb	r2, [r4, r3]
	ret = i2c_dw_setup(dev, slave_address);
10001712:	f7ff ff47 	bl	100015a4 <i2c_dw_setup>
10001716:	4680      	mov	r8, r0
	if (ret) {
10001718:	2800      	cmp	r0, #0
1000171a:	d104      	bne.n	10001726 <i2c_dw_transfer+0x52>
	uint32_t temp = *(volatile uint32_t *)addr;
1000171c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
1000171e:	2201      	movs	r2, #1
10001720:	4313      	orrs	r3, r2
10001722:	66fb      	str	r3, [r7, #108]	; 0x6c
DEFINE_SET_BIT_OP(enable_en, DW_IC_REG_ENABLE, DW_IC_ENABLE_EN_BIT)
10001724:	e025      	b.n	10001772 <i2c_dw_transfer+0x9e>
		dw->state = I2C_DW_STATE_READY;
10001726:	2324      	movs	r3, #36	; 0x24
10001728:	2200      	movs	r2, #0
1000172a:	54e2      	strb	r2, [r4, r3]
		return ret;
1000172c:	e053      	b.n	100017d6 <i2c_dw_transfer+0x102>
			dw->xfr_flags |= I2C_MSG_STOP;
1000172e:	2226      	movs	r2, #38	; 0x26
10001730:	5ca3      	ldrb	r3, [r4, r2]
10001732:	2002      	movs	r0, #2
10001734:	4303      	orrs	r3, r0
10001736:	54a3      	strb	r3, [r4, r2]
10001738:	e030      	b.n	1000179c <i2c_dw_transfer+0xc8>
			dw->state |= I2C_DW_CMD_RECV;
1000173a:	2224      	movs	r2, #36	; 0x24
1000173c:	5ca3      	ldrb	r3, [r4, r2]
1000173e:	2002      	movs	r0, #2
10001740:	4303      	orrs	r3, r0
10001742:	b2db      	uxtb	r3, r3
10001744:	54a3      	strb	r3, [r4, r2]
			dw->request_bytes = dw->xfr_len;
10001746:	2325      	movs	r3, #37	; 0x25
10001748:	54e1      	strb	r1, [r4, r3]
1000174a:	e038      	b.n	100017be <i2c_dw_transfer+0xea>
1000174c:	2398      	movs	r3, #152	; 0x98
1000174e:	009b      	lsls	r3, r3, #2
10001750:	633b      	str	r3, [r7, #48]	; 0x30
	return z_impl_k_sem_take(sem, timeout);
10001752:	2201      	movs	r2, #1
10001754:	4252      	negs	r2, r2
10001756:	17d3      	asrs	r3, r2, #31
10001758:	0020      	movs	r0, r4
1000175a:	f000 fef3 	bl	10002544 <z_impl_k_sem_take>
		if (dw->state & I2C_DW_CMD_ERROR) {
1000175e:	2324      	movs	r3, #36	; 0x24
10001760:	5ce3      	ldrb	r3, [r4, r3]
10001762:	075b      	lsls	r3, r3, #29
10001764:	d431      	bmi.n	100017ca <i2c_dw_transfer+0xf6>
		if (dw->xfr_len > 0) {
10001766:	69a3      	ldr	r3, [r4, #24]
10001768:	2b00      	cmp	r3, #0
1000176a:	d12e      	bne.n	100017ca <i2c_dw_transfer+0xf6>
		cur_msg++;
1000176c:	360c      	adds	r6, #12
		msg_left--;
1000176e:	3d01      	subs	r5, #1
10001770:	b2ed      	uxtb	r5, r5
	while (msg_left > 0) {
10001772:	2d00      	cmp	r5, #0
10001774:	d02c      	beq.n	100017d0 <i2c_dw_transfer+0xfc>
		pflags = dw->xfr_flags;
10001776:	2026      	movs	r0, #38	; 0x26
10001778:	5c23      	ldrb	r3, [r4, r0]
		dw->xfr_buf = cur_msg->buf;
1000177a:	6832      	ldr	r2, [r6, #0]
1000177c:	6162      	str	r2, [r4, #20]
		dw->xfr_len = cur_msg->len;
1000177e:	6871      	ldr	r1, [r6, #4]
10001780:	61a1      	str	r1, [r4, #24]
		dw->xfr_flags = cur_msg->flags;
10001782:	7a32      	ldrb	r2, [r6, #8]
10001784:	5422      	strb	r2, [r4, r0]
		dw->rx_pending = 0U;
10001786:	2000      	movs	r0, #0
10001788:	61e0      	str	r0, [r4, #28]
		    != (dw->xfr_flags & I2C_MSG_RW_MASK)) {
1000178a:	4053      	eors	r3, r2
		if ((pflags & I2C_MSG_RW_MASK)
1000178c:	07db      	lsls	r3, r3, #31
1000178e:	d503      	bpl.n	10001798 <i2c_dw_transfer+0xc4>
			dw->xfr_flags |= I2C_MSG_RESTART;
10001790:	2304      	movs	r3, #4
10001792:	431a      	orrs	r2, r3
10001794:	2326      	movs	r3, #38	; 0x26
10001796:	54e2      	strb	r2, [r4, r3]
		if (msg_left == 1U) {
10001798:	2d01      	cmp	r5, #1
1000179a:	d0c8      	beq.n	1000172e <i2c_dw_transfer+0x5a>
		dw->state &= ~(I2C_DW_CMD_SEND | I2C_DW_CMD_RECV);
1000179c:	2224      	movs	r2, #36	; 0x24
1000179e:	5ca3      	ldrb	r3, [r4, r2]
100017a0:	2003      	movs	r0, #3
100017a2:	4383      	bics	r3, r0
100017a4:	54a3      	strb	r3, [r4, r2]
		if ((dw->xfr_flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
100017a6:	2326      	movs	r3, #38	; 0x26
100017a8:	5ce3      	ldrb	r3, [r4, r3]
100017aa:	07db      	lsls	r3, r3, #31
100017ac:	d4c5      	bmi.n	1000173a <i2c_dw_transfer+0x66>
			dw->state |= I2C_DW_CMD_SEND;
100017ae:	5ca3      	ldrb	r3, [r4, r2]
100017b0:	2101      	movs	r1, #1
100017b2:	430b      	orrs	r3, r1
100017b4:	b2db      	uxtb	r3, r3
100017b6:	54a3      	strb	r3, [r4, r2]
			dw->request_bytes = 0U;
100017b8:	2325      	movs	r3, #37	; 0x25
100017ba:	2200      	movs	r2, #0
100017bc:	54e2      	strb	r2, [r4, r3]
	uint32_t temp = *(volatile uint32_t *)addr;
100017be:	683b      	ldr	r3, [r7, #0]
		if (test_bit_con_master_mode(reg_base)) {
100017c0:	07db      	lsls	r3, r3, #31
100017c2:	d5c3      	bpl.n	1000174c <i2c_dw_transfer+0x78>
100017c4:	4b0b      	ldr	r3, [pc, #44]	; (100017f4 <i2c_dw_transfer+0x120>)
100017c6:	633b      	str	r3, [r7, #48]	; 0x30
DEFINE_MM_REG_WRITE(intr_mask, DW_IC_REG_INTR_MASK, 32)
100017c8:	e7c3      	b.n	10001752 <i2c_dw_transfer+0x7e>
			break;
100017ca:	2305      	movs	r3, #5
100017cc:	425b      	negs	r3, r3
100017ce:	4698      	mov	r8, r3
	dw->state = I2C_DW_STATE_READY;
100017d0:	2324      	movs	r3, #36	; 0x24
100017d2:	2200      	movs	r2, #0
100017d4:	54e2      	strb	r2, [r4, r3]
}
100017d6:	4640      	mov	r0, r8
100017d8:	bc80      	pop	{r7}
100017da:	46b8      	mov	r8, r7
100017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
100017de:	2300      	movs	r3, #0
100017e0:	4698      	mov	r8, r3
100017e2:	e7f8      	b.n	100017d6 <i2c_dw_transfer+0x102>
		return -EIO;
100017e4:	2305      	movs	r3, #5
100017e6:	425b      	negs	r3, r3
100017e8:	4698      	mov	r8, r3
100017ea:	e7f4      	b.n	100017d6 <i2c_dw_transfer+0x102>
100017ec:	2305      	movs	r3, #5
100017ee:	425b      	negs	r3, r3
100017f0:	4698      	mov	r8, r3
100017f2:	e7f0      	b.n	100017d6 <i2c_dw_transfer+0x102>
100017f4:	0000025f 	.word	0x0000025f

100017f8 <i2c_dw_initialize>:
	.target_unregister = i2c_dw_slave_unregister,
#endif /* CONFIG_I2C_TARGET */
};

static int i2c_dw_initialize(const struct device *dev)
{
100017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100017fa:	0004      	movs	r4, r0
	const struct i2c_dw_rom_config * const rom = dev->config;
100017fc:	6846      	ldr	r6, [r0, #4]
	struct i2c_dw_dev_config * const dw = dev->data;
100017fe:	6907      	ldr	r7, [r0, #16]
	union ic_con_register ic_con;
	int ret = 0;

#if defined(CONFIG_PINCTRL)
	ret = pinctrl_apply_state(rom->pcfg, PINCTRL_STATE_DEFAULT);
10001800:	68f0      	ldr	r0, [r6, #12]
10001802:	2100      	movs	r1, #0
10001804:	f004 fd19 	bl	1000623a <pinctrl_apply_state>
10001808:	1e05      	subs	r5, r0, #0
	if (ret) {
1000180a:	d001      	beq.n	10001810 <i2c_dw_initialize+0x18>
	}

	dw->state = I2C_DW_STATE_READY;

	return ret;
}
1000180c:	0028      	movs	r0, r5
1000180e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
10001810:	2201      	movs	r2, #1
10001812:	4252      	negs	r2, r2
10001814:	2100      	movs	r1, #0
10001816:	0038      	movs	r0, r7
10001818:	f005 f8a6 	bl	10006968 <z_impl_k_sem_init>
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000181c:	6863      	ldr	r3, [r4, #4]
1000181e:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10001820:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10001822:	2101      	movs	r1, #1
10001824:	438a      	bics	r2, r1
10001826:	66da      	str	r2, [r3, #108]	; 0x6c
DEFINE_MM_REG_READ(comp_type, DW_IC_REG_COMP_TYPE, 32)
10001828:	001a      	movs	r2, r3
1000182a:	32fc      	adds	r2, #252	; 0xfc
	return *(volatile uint32_t *)addr;
1000182c:	6811      	ldr	r1, [r2, #0]
	if (read_comp_type(reg_base) != I2C_DW_MAGIC_KEY) {
1000182e:	4a13      	ldr	r2, [pc, #76]	; (1000187c <i2c_dw_initialize+0x84>)
10001830:	4291      	cmp	r1, r2
10001832:	d11d      	bne.n	10001870 <i2c_dw_initialize+0x78>
10001834:	681a      	ldr	r2, [r3, #0]
	if (ic_con.bits.speed == I2C_DW_SPEED_HIGH) {
10001836:	2306      	movs	r3, #6
10001838:	4013      	ands	r3, r2
1000183a:	2b06      	cmp	r3, #6
1000183c:	d014      	beq.n	10001868 <i2c_dw_initialize+0x70>
		dw->support_hs_mode = false;
1000183e:	2327      	movs	r3, #39	; 0x27
10001840:	2200      	movs	r2, #0
10001842:	54fa      	strb	r2, [r7, r3]
	rom->config_func(dev);
10001844:	6873      	ldr	r3, [r6, #4]
10001846:	0020      	movs	r0, r4
10001848:	4798      	blx	r3
	dw->app_config = I2C_MODE_CONTROLLER | i2c_map_dt_bitrate(rom->bitrate);
1000184a:	68b0      	ldr	r0, [r6, #8]
1000184c:	f7ff fe82 	bl	10001554 <i2c_map_dt_bitrate>
10001850:	2110      	movs	r1, #16
10001852:	4301      	orrs	r1, r0
10001854:	6139      	str	r1, [r7, #16]
	if (i2c_dw_runtime_configure(dev, dw->app_config) != 0) {
10001856:	0020      	movs	r0, r4
10001858:	f004 fb69 	bl	10005f2e <i2c_dw_runtime_configure>
1000185c:	2800      	cmp	r0, #0
1000185e:	d10a      	bne.n	10001876 <i2c_dw_initialize+0x7e>
	dw->state = I2C_DW_STATE_READY;
10001860:	2324      	movs	r3, #36	; 0x24
10001862:	2200      	movs	r2, #0
10001864:	54fa      	strb	r2, [r7, r3]
	return ret;
10001866:	e7d1      	b.n	1000180c <i2c_dw_initialize+0x14>
		dw->support_hs_mode = true;
10001868:	3321      	adds	r3, #33	; 0x21
1000186a:	2201      	movs	r2, #1
1000186c:	54fa      	strb	r2, [r7, r3]
1000186e:	e7e9      	b.n	10001844 <i2c_dw_initialize+0x4c>
		return -EIO;
10001870:	2505      	movs	r5, #5
10001872:	426d      	negs	r5, r5
10001874:	e7ca      	b.n	1000180c <i2c_dw_initialize+0x14>
		return -EIO;
10001876:	2505      	movs	r5, #5
10001878:	426d      	negs	r5, r5
1000187a:	e7c7      	b.n	1000180c <i2c_dw_initialize+0x14>
1000187c:	44570140 	.word	0x44570140

10001880 <uart_rpi_irq_err_disable>:
			  UART_UARTIMSC_RTIM_BITS);
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
10001880:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
10001882:	685a      	ldr	r2, [r3, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10001884:	6b93      	ldr	r3, [r2, #56]	; 0x38
10001886:	4902      	ldr	r1, [pc, #8]	; (10001890 <uart_rpi_irq_err_disable+0x10>)
10001888:	400b      	ands	r3, r1
1000188a:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
1000188c:	4770      	bx	lr
1000188e:	46c0      	nop			; (mov r8, r8)
10001890:	fffff83f 	.word	0xfffff83f

10001894 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
10001894:	4b0b      	ldr	r3, [pc, #44]	; (100018c4 <elapsed+0x30>)
10001896:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10001898:	681a      	ldr	r2, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
1000189a:	6899      	ldr	r1, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
1000189c:	03d2      	lsls	r2, r2, #15
1000189e:	d401      	bmi.n	100018a4 <elapsed+0x10>
	    || (val1 < val2)) {
100018a0:	4288      	cmp	r0, r1
100018a2:	d207      	bcs.n	100018b4 <elapsed+0x20>
		overflow_cyc += last_load;
100018a4:	4a08      	ldr	r2, [pc, #32]	; (100018c8 <elapsed+0x34>)
100018a6:	6813      	ldr	r3, [r2, #0]
100018a8:	4808      	ldr	r0, [pc, #32]	; (100018cc <elapsed+0x38>)
100018aa:	6800      	ldr	r0, [r0, #0]
100018ac:	181b      	adds	r3, r3, r0
100018ae:	6013      	str	r3, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
100018b0:	4b04      	ldr	r3, [pc, #16]	; (100018c4 <elapsed+0x30>)
100018b2:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
100018b4:	4b05      	ldr	r3, [pc, #20]	; (100018cc <elapsed+0x38>)
100018b6:	6818      	ldr	r0, [r3, #0]
100018b8:	1a40      	subs	r0, r0, r1
100018ba:	4b03      	ldr	r3, [pc, #12]	; (100018c8 <elapsed+0x34>)
100018bc:	681b      	ldr	r3, [r3, #0]
100018be:	18c0      	adds	r0, r0, r3
}
100018c0:	4770      	bx	lr
100018c2:	46c0      	nop			; (mov r8, r8)
100018c4:	e000e010 	.word	0xe000e010
100018c8:	20000bb8 	.word	0x20000bb8
100018cc:	20000bc4 	.word	0x20000bc4

100018d0 <sys_clock_driver_init>:
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100018d0:	4a09      	ldr	r2, [pc, #36]	; (100018f8 <sys_clock_driver_init+0x28>)
100018d2:	6a13      	ldr	r3, [r2, #32]
100018d4:	021b      	lsls	r3, r3, #8
100018d6:	0a1b      	lsrs	r3, r3, #8
100018d8:	6213      	str	r3, [r2, #32]
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
100018da:	4b08      	ldr	r3, [pc, #32]	; (100018fc <sys_clock_driver_init+0x2c>)
100018dc:	4908      	ldr	r1, [pc, #32]	; (10001900 <sys_clock_driver_init+0x30>)
100018de:	6019      	str	r1, [r3, #0]
	overflow_cyc = 0U;
100018e0:	4b08      	ldr	r3, [pc, #32]	; (10001904 <sys_clock_driver_init+0x34>)
100018e2:	2200      	movs	r2, #0
100018e4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load;
100018e6:	4b08      	ldr	r3, [pc, #32]	; (10001908 <sys_clock_driver_init+0x38>)
100018e8:	6059      	str	r1, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
100018ea:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
100018ec:	681a      	ldr	r2, [r3, #0]
100018ee:	2107      	movs	r1, #7
100018f0:	430a      	orrs	r2, r1
100018f2:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
100018f4:	2000      	movs	r0, #0
100018f6:	4770      	bx	lr
100018f8:	e000ed00 	.word	0xe000ed00
100018fc:	20000bc4 	.word	0x20000bc4
10001900:	000030d3 	.word	0x000030d3
10001904:	20000bb8 	.word	0x20000bb8
10001908:	e000e010 	.word	0xe000e010

1000190c <sys_clock_isr>:
{
1000190c:	b570      	push	{r4, r5, r6, lr}
	elapsed();
1000190e:	f7ff ffc1 	bl	10001894 <elapsed>
	cycle_count += overflow_cyc;
10001912:	4b0b      	ldr	r3, [pc, #44]	; (10001940 <sys_clock_isr+0x34>)
10001914:	6818      	ldr	r0, [r3, #0]
10001916:	4a0b      	ldr	r2, [pc, #44]	; (10001944 <sys_clock_isr+0x38>)
10001918:	6811      	ldr	r1, [r2, #0]
1000191a:	1840      	adds	r0, r0, r1
1000191c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
1000191e:	2200      	movs	r2, #0
10001920:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10001922:	4d09      	ldr	r5, [pc, #36]	; (10001948 <sys_clock_isr+0x3c>)
10001924:	682c      	ldr	r4, [r5, #0]
10001926:	1b00      	subs	r0, r0, r4
10001928:	4908      	ldr	r1, [pc, #32]	; (1000194c <sys_clock_isr+0x40>)
1000192a:	f7fe fc3d 	bl	100001a8 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
1000192e:	4b07      	ldr	r3, [pc, #28]	; (1000194c <sys_clock_isr+0x40>)
10001930:	4343      	muls	r3, r0
10001932:	18e4      	adds	r4, r4, r3
10001934:	602c      	str	r4, [r5, #0]
		sys_clock_announce(dticks);
10001936:	f001 fadf 	bl	10002ef8 <sys_clock_announce>
	z_arm_int_exit();
1000193a:	f7ff fc01 	bl	10001140 <z_arm_exc_exit>
}
1000193e:	bd70      	pop	{r4, r5, r6, pc}
10001940:	20000bb8 	.word	0x20000bb8
10001944:	20000bc0 	.word	0x20000bc0
10001948:	20000bbc 	.word	0x20000bbc
1000194c:	000030d4 	.word	0x000030d4

10001950 <sys_clock_set_timeout>:
{
10001950:	b5f0      	push	{r4, r5, r6, r7, lr}
10001952:	46d6      	mov	lr, sl
10001954:	464f      	mov	r7, r9
10001956:	4646      	mov	r6, r8
10001958:	b5c0      	push	{r6, r7, lr}
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
1000195a:	2900      	cmp	r1, #0
1000195c:	d041      	beq.n	100019e2 <sys_clock_set_timeout+0x92>
1000195e:	1c43      	adds	r3, r0, #1
10001960:	d035      	beq.n	100019ce <sys_clock_set_timeout+0x7e>
	uint32_t last_load_ = last_load;
10001962:	4b3a      	ldr	r3, [pc, #232]	; (10001a4c <sys_clock_set_timeout+0xfc>)
10001964:	681f      	ldr	r7, [r3, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
10001966:	2801      	cmp	r0, #1
10001968:	dd41      	ble.n	100019ee <sys_clock_set_timeout+0x9e>
1000196a:	4b39      	ldr	r3, [pc, #228]	; (10001a50 <sys_clock_set_timeout+0x100>)
1000196c:	4298      	cmp	r0, r3
1000196e:	dc41      	bgt.n	100019f4 <sys_clock_set_timeout+0xa4>
10001970:	1e43      	subs	r3, r0, #1
10001972:	4699      	mov	r9, r3
	__asm__ volatile("mrs %0, PRIMASK;"
10001974:	f3ef 8310 	mrs	r3, PRIMASK
10001978:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
1000197a:	4698      	mov	r8, r3
	uint32_t pending = elapsed();
1000197c:	f7ff ff8a 	bl	10001894 <elapsed>
	val1 = SysTick->VAL;
10001980:	4b34      	ldr	r3, [pc, #208]	; (10001a54 <sys_clock_set_timeout+0x104>)
10001982:	689c      	ldr	r4, [r3, #8]
	cycle_count += pending;
10001984:	4b34      	ldr	r3, [pc, #208]	; (10001a58 <sys_clock_set_timeout+0x108>)
10001986:	681d      	ldr	r5, [r3, #0]
10001988:	1945      	adds	r5, r0, r5
1000198a:	601d      	str	r5, [r3, #0]
	overflow_cyc = 0U;
1000198c:	4b33      	ldr	r3, [pc, #204]	; (10001a5c <sys_clock_set_timeout+0x10c>)
1000198e:	2200      	movs	r2, #0
10001990:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10001992:	4b33      	ldr	r3, [pc, #204]	; (10001a60 <sys_clock_set_timeout+0x110>)
10001994:	681e      	ldr	r6, [r3, #0]
10001996:	1bab      	subs	r3, r5, r6
	if ((int32_t)unannounced < 0) {
10001998:	d42f      	bmi.n	100019fa <sys_clock_set_timeout+0xaa>
		delay = ticks * CYC_PER_TICK;
1000199a:	4a32      	ldr	r2, [pc, #200]	; (10001a64 <sys_clock_set_timeout+0x114>)
1000199c:	4692      	mov	sl, r2
1000199e:	4648      	mov	r0, r9
100019a0:	4350      	muls	r0, r2
		delay += unannounced;
100019a2:	1818      	adds	r0, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
100019a4:	4b30      	ldr	r3, [pc, #192]	; (10001a68 <sys_clock_set_timeout+0x118>)
100019a6:	469c      	mov	ip, r3
100019a8:	4460      	add	r0, ip
100019aa:	0011      	movs	r1, r2
100019ac:	f7fe fbfc 	bl	100001a8 <__udivsi3>
		delay =
100019b0:	4653      	mov	r3, sl
100019b2:	4358      	muls	r0, r3
		delay -= unannounced;
100019b4:	1b76      	subs	r6, r6, r5
100019b6:	1830      	adds	r0, r6, r0
		delay = MAX(delay, MIN_DELAY);
100019b8:	2380      	movs	r3, #128	; 0x80
100019ba:	00db      	lsls	r3, r3, #3
100019bc:	4298      	cmp	r0, r3
100019be:	d921      	bls.n	10001a04 <sys_clock_set_timeout+0xb4>
		if (delay > MAX_CYCLES) {
100019c0:	4b2a      	ldr	r3, [pc, #168]	; (10001a6c <sys_clock_set_timeout+0x11c>)
100019c2:	4298      	cmp	r0, r3
100019c4:	d920      	bls.n	10001a08 <sys_clock_set_timeout+0xb8>
			last_load = MAX_CYCLES;
100019c6:	4b21      	ldr	r3, [pc, #132]	; (10001a4c <sys_clock_set_timeout+0xfc>)
100019c8:	4a28      	ldr	r2, [pc, #160]	; (10001a6c <sys_clock_set_timeout+0x11c>)
100019ca:	601a      	str	r2, [r3, #0]
100019cc:	e01e      	b.n	10001a0c <sys_clock_set_timeout+0xbc>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
100019ce:	4a21      	ldr	r2, [pc, #132]	; (10001a54 <sys_clock_set_timeout+0x104>)
100019d0:	6813      	ldr	r3, [r2, #0]
100019d2:	2101      	movs	r1, #1
100019d4:	438b      	bics	r3, r1
100019d6:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
100019d8:	4b1c      	ldr	r3, [pc, #112]	; (10001a4c <sys_clock_set_timeout+0xfc>)
100019da:	22ff      	movs	r2, #255	; 0xff
100019dc:	0612      	lsls	r2, r2, #24
100019de:	601a      	str	r2, [r3, #0]
		return;
100019e0:	e029      	b.n	10001a36 <sys_clock_set_timeout+0xe6>
	uint32_t last_load_ = last_load;
100019e2:	4b1a      	ldr	r3, [pc, #104]	; (10001a4c <sys_clock_set_timeout+0xfc>)
100019e4:	681f      	ldr	r7, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
100019e6:	1c43      	adds	r3, r0, #1
100019e8:	d1bd      	bne.n	10001966 <sys_clock_set_timeout+0x16>
100019ea:	4819      	ldr	r0, [pc, #100]	; (10001a50 <sys_clock_set_timeout+0x100>)
100019ec:	e7bd      	b.n	1000196a <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
100019ee:	2300      	movs	r3, #0
100019f0:	4699      	mov	r9, r3
100019f2:	e7bf      	b.n	10001974 <sys_clock_set_timeout+0x24>
100019f4:	4b16      	ldr	r3, [pc, #88]	; (10001a50 <sys_clock_set_timeout+0x100>)
100019f6:	4699      	mov	r9, r3
100019f8:	e7bc      	b.n	10001974 <sys_clock_set_timeout+0x24>
		last_load = MIN_DELAY;
100019fa:	4b14      	ldr	r3, [pc, #80]	; (10001a4c <sys_clock_set_timeout+0xfc>)
100019fc:	2280      	movs	r2, #128	; 0x80
100019fe:	00d2      	lsls	r2, r2, #3
10001a00:	601a      	str	r2, [r3, #0]
10001a02:	e003      	b.n	10001a0c <sys_clock_set_timeout+0xbc>
		delay = MAX(delay, MIN_DELAY);
10001a04:	2080      	movs	r0, #128	; 0x80
10001a06:	00c0      	lsls	r0, r0, #3
			last_load = delay;
10001a08:	4b10      	ldr	r3, [pc, #64]	; (10001a4c <sys_clock_set_timeout+0xfc>)
10001a0a:	6018      	str	r0, [r3, #0]
	val2 = SysTick->VAL;
10001a0c:	4b11      	ldr	r3, [pc, #68]	; (10001a54 <sys_clock_set_timeout+0x104>)
10001a0e:	6899      	ldr	r1, [r3, #8]
	SysTick->LOAD = last_load - 1;
10001a10:	4a0e      	ldr	r2, [pc, #56]	; (10001a4c <sys_clock_set_timeout+0xfc>)
10001a12:	6812      	ldr	r2, [r2, #0]
10001a14:	3a01      	subs	r2, #1
10001a16:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10001a18:	2200      	movs	r2, #0
10001a1a:	609a      	str	r2, [r3, #8]
	if (val1 < val2) {
10001a1c:	428c      	cmp	r4, r1
10001a1e:	d20f      	bcs.n	10001a40 <sys_clock_set_timeout+0xf0>
		cycle_count += (val1 + (last_load_ - val2));
10001a20:	1a7f      	subs	r7, r7, r1
10001a22:	193f      	adds	r7, r7, r4
10001a24:	4b0c      	ldr	r3, [pc, #48]	; (10001a58 <sys_clock_set_timeout+0x108>)
10001a26:	19ef      	adds	r7, r5, r7
10001a28:	601f      	str	r7, [r3, #0]
	if (key != 0U) {
10001a2a:	4643      	mov	r3, r8
10001a2c:	2b00      	cmp	r3, #0
10001a2e:	d102      	bne.n	10001a36 <sys_clock_set_timeout+0xe6>
	__asm__ volatile(
10001a30:	b662      	cpsie	i
10001a32:	f3bf 8f6f 	isb	sy
}
10001a36:	bce0      	pop	{r5, r6, r7}
10001a38:	46ba      	mov	sl, r7
10001a3a:	46b1      	mov	r9, r6
10001a3c:	46a8      	mov	r8, r5
10001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cycle_count += (val1 - val2);
10001a40:	1a61      	subs	r1, r4, r1
10001a42:	4a05      	ldr	r2, [pc, #20]	; (10001a58 <sys_clock_set_timeout+0x108>)
10001a44:	186d      	adds	r5, r5, r1
10001a46:	6015      	str	r5, [r2, #0]
10001a48:	e7ef      	b.n	10001a2a <sys_clock_set_timeout+0xda>
10001a4a:	46c0      	nop			; (mov r8, r8)
10001a4c:	20000bc4 	.word	0x20000bc4
10001a50:	0000053d 	.word	0x0000053d
10001a54:	e000e010 	.word	0xe000e010
10001a58:	20000bc0 	.word	0x20000bc0
10001a5c:	20000bb8 	.word	0x20000bb8
10001a60:	20000bbc 	.word	0x20000bbc
10001a64:	000030d4 	.word	0x000030d4
10001a68:	000030d3 	.word	0x000030d3
10001a6c:	00ffc684 	.word	0x00ffc684

10001a70 <sys_clock_elapsed>:
{
10001a70:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10001a72:	f3ef 8410 	mrs	r4, PRIMASK
10001a76:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
10001a78:	f7ff ff0c 	bl	10001894 <elapsed>
10001a7c:	4b07      	ldr	r3, [pc, #28]	; (10001a9c <sys_clock_elapsed+0x2c>)
10001a7e:	681b      	ldr	r3, [r3, #0]
10001a80:	18c0      	adds	r0, r0, r3
10001a82:	4b07      	ldr	r3, [pc, #28]	; (10001aa0 <sys_clock_elapsed+0x30>)
10001a84:	681b      	ldr	r3, [r3, #0]
10001a86:	1ac0      	subs	r0, r0, r3
	if (key != 0U) {
10001a88:	2c00      	cmp	r4, #0
10001a8a:	d102      	bne.n	10001a92 <sys_clock_elapsed+0x22>
	__asm__ volatile(
10001a8c:	b662      	cpsie	i
10001a8e:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
10001a92:	4904      	ldr	r1, [pc, #16]	; (10001aa4 <sys_clock_elapsed+0x34>)
10001a94:	f7fe fb88 	bl	100001a8 <__udivsi3>
}
10001a98:	bd10      	pop	{r4, pc}
10001a9a:	46c0      	nop			; (mov r8, r8)
10001a9c:	20000bc0 	.word	0x20000bc0
10001aa0:	20000bbc 	.word	0x20000bbc
10001aa4:	000030d4 	.word	0x000030d4

10001aa8 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001aaa:	46de      	mov	lr, fp
10001aac:	4657      	mov	r7, sl
10001aae:	464e      	mov	r6, r9
10001ab0:	4645      	mov	r5, r8
10001ab2:	b5e0      	push	{r5, r6, r7, lr}
10001ab4:	0006      	movs	r6, r0
10001ab6:	000f      	movs	r7, r1
10001ab8:	0015      	movs	r5, r2
    uint32_t div;

    assert(src_freq >= freq);
10001aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10001abc:	4293      	cmp	r3, r2
10001abe:	d34e      	bcc.n	10001b5e <clock_configure+0xb6>

    if (freq > src_freq)
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001ac0:	0e1a      	lsrs	r2, r3, #24
10001ac2:	4692      	mov	sl, r2
10001ac4:	021b      	lsls	r3, r3, #8
10001ac6:	4698      	mov	r8, r3
10001ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10001aca:	2300      	movs	r3, #0
10001acc:	4640      	mov	r0, r8
10001ace:	4651      	mov	r1, sl
10001ad0:	f7fe fc24 	bl	1000031c <__aeabi_uldivmod>
10001ad4:	4681      	mov	r9, r0

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001ad6:	0074      	lsls	r4, r6, #1
10001ad8:	19a4      	adds	r4, r4, r6
10001ada:	00a4      	lsls	r4, r4, #2
10001adc:	4b2e      	ldr	r3, [pc, #184]	; (10001b98 <clock_configure+0xf0>)
10001ade:	469c      	mov	ip, r3
10001ae0:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10001ae2:	6863      	ldr	r3, [r4, #4]
10001ae4:	4283      	cmp	r3, r0
10001ae6:	d200      	bcs.n	10001aea <clock_configure+0x42>
        clock->div = div;
10001ae8:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10001aea:	1f33      	subs	r3, r6, #4
10001aec:	b2db      	uxtb	r3, r3
10001aee:	469b      	mov	fp, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001af0:	2b01      	cmp	r3, #1
10001af2:	d93a      	bls.n	10001b6a <clock_configure+0xc2>
10001af4:	23c0      	movs	r3, #192	; 0xc0
10001af6:	019b      	lsls	r3, r3, #6
10001af8:	4323      	orrs	r3, r4
10001afa:	2280      	movs	r2, #128	; 0x80
10001afc:	0112      	lsls	r2, r2, #4
10001afe:	601a      	str	r2, [r3, #0]
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        // Disable clock. On clk_ref and clk_sys this does nothing,
        // all other clocks have the ENABLE bit in the same position.
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
10001b00:	4b26      	ldr	r3, [pc, #152]	; (10001b9c <clock_configure+0xf4>)
10001b02:	00b2      	lsls	r2, r6, #2
10001b04:	58d1      	ldr	r1, [r2, r3]
10001b06:	2900      	cmp	r1, #0
10001b08:	d005      	beq.n	10001b16 <clock_configure+0x6e>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001b0a:	6958      	ldr	r0, [r3, #20]
10001b0c:	f7fe fb4c 	bl	100001a8 <__udivsi3>
10001b10:	3001      	adds	r0, #1
            asm volatile (
10001b12:	3801      	subs	r0, #1
10001b14:	d1fd      	bne.n	10001b12 <clock_configure+0x6a>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10001b16:	016d      	lsls	r5, r5, #5
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001b18:	6823      	ldr	r3, [r4, #0]
10001b1a:	405d      	eors	r5, r3
10001b1c:	22e0      	movs	r2, #224	; 0xe0
10001b1e:	402a      	ands	r2, r5
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001b20:	2380      	movs	r3, #128	; 0x80
10001b22:	015b      	lsls	r3, r3, #5
10001b24:	4323      	orrs	r3, r4
10001b26:	601a      	str	r2, [r3, #0]
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10001b28:	465a      	mov	r2, fp
10001b2a:	2a01      	cmp	r2, #1
10001b2c:	d928      	bls.n	10001b80 <clock_configure+0xd8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001b2e:	2380      	movs	r3, #128	; 0x80
10001b30:	019b      	lsls	r3, r3, #6
10001b32:	4323      	orrs	r3, r4
10001b34:	2280      	movs	r2, #128	; 0x80
10001b36:	0112      	lsls	r2, r2, #4
10001b38:	601a      	str	r2, [r3, #0]
    // all other clocks have the ENABLE bit in the same position.
    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
10001b3a:	464b      	mov	r3, r9
10001b3c:	6063      	str	r3, [r4, #4]

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
10001b3e:	464a      	mov	r2, r9
10001b40:	2300      	movs	r3, #0
10001b42:	4640      	mov	r0, r8
10001b44:	4651      	mov	r1, sl
10001b46:	f7fe fbe9 	bl	1000031c <__aeabi_uldivmod>
10001b4a:	4b14      	ldr	r3, [pc, #80]	; (10001b9c <clock_configure+0xf4>)
10001b4c:	00b6      	lsls	r6, r6, #2
10001b4e:	5198      	str	r0, [r3, r6]

    return true;
}
10001b50:	2001      	movs	r0, #1
10001b52:	bcf0      	pop	{r4, r5, r6, r7}
10001b54:	46bb      	mov	fp, r7
10001b56:	46b2      	mov	sl, r6
10001b58:	46a9      	mov	r9, r5
10001b5a:	46a0      	mov	r8, r4
10001b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(src_freq >= freq);
10001b5e:	4b10      	ldr	r3, [pc, #64]	; (10001ba0 <clock_configure+0xf8>)
10001b60:	4a10      	ldr	r2, [pc, #64]	; (10001ba4 <clock_configure+0xfc>)
10001b62:	4811      	ldr	r0, [pc, #68]	; (10001ba8 <clock_configure+0x100>)
10001b64:	212d      	movs	r1, #45	; 0x2d
10001b66:	f001 fa57 	bl	10003018 <__assert_func>
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001b6a:	2f01      	cmp	r7, #1
10001b6c:	d1c2      	bne.n	10001af4 <clock_configure+0x4c>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001b6e:	23c0      	movs	r3, #192	; 0xc0
10001b70:	019b      	lsls	r3, r3, #6
10001b72:	4323      	orrs	r3, r4
10001b74:	2203      	movs	r2, #3
10001b76:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
10001b78:	68a3      	ldr	r3, [r4, #8]
10001b7a:	07db      	lsls	r3, r3, #31
10001b7c:	d5fc      	bpl.n	10001b78 <clock_configure+0xd0>
10001b7e:	e7ca      	b.n	10001b16 <clock_configure+0x6e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001b80:	6821      	ldr	r1, [r4, #0]
10001b82:	4079      	eors	r1, r7
10001b84:	2203      	movs	r2, #3
10001b86:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001b88:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10001b8a:	68a3      	ldr	r3, [r4, #8]
10001b8c:	2501      	movs	r5, #1
10001b8e:	40bd      	lsls	r5, r7
10001b90:	421d      	tst	r5, r3
10001b92:	d0fa      	beq.n	10001b8a <clock_configure+0xe2>
10001b94:	e7cb      	b.n	10001b2e <clock_configure+0x86>
10001b96:	46c0      	nop			; (mov r8, r8)
10001b98:	40008000 	.word	0x40008000
10001b9c:	20000bc8 	.word	0x20000bc8
10001ba0:	1000741c 	.word	0x1000741c
10001ba4:	1000747c 	.word	0x1000747c
10001ba8:	10007430 	.word	0x10007430

10001bac <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10001bac:	b530      	push	{r4, r5, lr}
10001bae:	b083      	sub	sp, #12
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10001bb0:	200c      	movs	r0, #12
10001bb2:	f000 f921 	bl	10001df8 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10001bb6:	f000 f927 	bl	10001e08 <running_on_fpga>
10001bba:	2800      	cmp	r0, #0
10001bbc:	d00d      	beq.n	10001bda <clocks_init+0x2e>
        for (uint i = 0; i < CLK_COUNT; i++) {
10001bbe:	2300      	movs	r3, #0
10001bc0:	e004      	b.n	10001bcc <clocks_init+0x20>
            configured_freq[i] = 48 * PICO_MHZ;
10001bc2:	4a2e      	ldr	r2, [pc, #184]	; (10001c7c <clocks_init+0xd0>)
10001bc4:	0099      	lsls	r1, r3, #2
10001bc6:	482e      	ldr	r0, [pc, #184]	; (10001c80 <clocks_init+0xd4>)
10001bc8:	5088      	str	r0, [r1, r2]
        for (uint i = 0; i < CLK_COUNT; i++) {
10001bca:	3301      	adds	r3, #1
10001bcc:	2b09      	cmp	r3, #9
10001bce:	d9f8      	bls.n	10001bc2 <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
10001bd0:	4b2a      	ldr	r3, [pc, #168]	; (10001c7c <clocks_init+0xd0>)
10001bd2:	4a2c      	ldr	r2, [pc, #176]	; (10001c84 <clocks_init+0xd8>)
10001bd4:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
10001bd6:	b003      	add	sp, #12
10001bd8:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10001bda:	4b2b      	ldr	r3, [pc, #172]	; (10001c88 <clocks_init+0xdc>)
10001bdc:	2200      	movs	r2, #0
10001bde:	679a      	str	r2, [r3, #120]	; 0x78
    xosc_init();
10001be0:	f000 f8f6 	bl	10001dd0 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001be4:	4b29      	ldr	r3, [pc, #164]	; (10001c8c <clocks_init+0xe0>)
10001be6:	2201      	movs	r2, #1
10001be8:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10001bea:	4b27      	ldr	r3, [pc, #156]	; (10001c88 <clocks_init+0xdc>)
10001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10001bee:	2b01      	cmp	r3, #1
10001bf0:	d1fb      	bne.n	10001bea <clocks_init+0x3e>
10001bf2:	4b27      	ldr	r3, [pc, #156]	; (10001c90 <clocks_init+0xe4>)
10001bf4:	2203      	movs	r2, #3
10001bf6:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001bf8:	4b23      	ldr	r3, [pc, #140]	; (10001c88 <clocks_init+0xdc>)
10001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001bfc:	2b01      	cmp	r3, #1
10001bfe:	d1fb      	bne.n	10001bf8 <clocks_init+0x4c>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
10001c00:	2402      	movs	r4, #2
10001c02:	9400      	str	r4, [sp, #0]
10001c04:	3305      	adds	r3, #5
10001c06:	4a23      	ldr	r2, [pc, #140]	; (10001c94 <clocks_init+0xe8>)
10001c08:	2101      	movs	r1, #1
10001c0a:	4823      	ldr	r0, [pc, #140]	; (10001c98 <clocks_init+0xec>)
10001c0c:	f000 f854 	bl	10001cb8 <pll_init>
    pll_init(pll_usb, 1, 480 * PICO_MHZ, 5, 2);
10001c10:	9400      	str	r4, [sp, #0]
10001c12:	2305      	movs	r3, #5
10001c14:	4a21      	ldr	r2, [pc, #132]	; (10001c9c <clocks_init+0xf0>)
10001c16:	2101      	movs	r1, #1
10001c18:	4821      	ldr	r0, [pc, #132]	; (10001ca0 <clocks_init+0xf4>)
10001c1a:	f000 f84d 	bl	10001cb8 <pll_init>
    clock_configure(clk_ref,
10001c1e:	4b21      	ldr	r3, [pc, #132]	; (10001ca4 <clocks_init+0xf8>)
10001c20:	9300      	str	r3, [sp, #0]
10001c22:	2200      	movs	r2, #0
10001c24:	2102      	movs	r1, #2
10001c26:	2004      	movs	r0, #4
10001c28:	f7ff ff3e 	bl	10001aa8 <clock_configure>
    clock_configure(clk_sys,
10001c2c:	4d1e      	ldr	r5, [pc, #120]	; (10001ca8 <clocks_init+0xfc>)
10001c2e:	9500      	str	r5, [sp, #0]
10001c30:	002b      	movs	r3, r5
10001c32:	2200      	movs	r2, #0
10001c34:	2101      	movs	r1, #1
10001c36:	2005      	movs	r0, #5
10001c38:	f7ff ff36 	bl	10001aa8 <clock_configure>
    clock_configure(clk_usb,
10001c3c:	4c10      	ldr	r4, [pc, #64]	; (10001c80 <clocks_init+0xd4>)
10001c3e:	9400      	str	r4, [sp, #0]
10001c40:	0023      	movs	r3, r4
10001c42:	2200      	movs	r2, #0
10001c44:	2100      	movs	r1, #0
10001c46:	2007      	movs	r0, #7
10001c48:	f7ff ff2e 	bl	10001aa8 <clock_configure>
    clock_configure(clk_adc,
10001c4c:	9400      	str	r4, [sp, #0]
10001c4e:	0023      	movs	r3, r4
10001c50:	2200      	movs	r2, #0
10001c52:	2100      	movs	r1, #0
10001c54:	2008      	movs	r0, #8
10001c56:	f7ff ff27 	bl	10001aa8 <clock_configure>
    clock_configure(clk_rtc,
10001c5a:	4b0a      	ldr	r3, [pc, #40]	; (10001c84 <clocks_init+0xd8>)
10001c5c:	9300      	str	r3, [sp, #0]
10001c5e:	0023      	movs	r3, r4
10001c60:	2200      	movs	r2, #0
10001c62:	2100      	movs	r1, #0
10001c64:	2009      	movs	r0, #9
10001c66:	f7ff ff1f 	bl	10001aa8 <clock_configure>
    clock_configure(clk_peri,
10001c6a:	9500      	str	r5, [sp, #0]
10001c6c:	002b      	movs	r3, r5
10001c6e:	2200      	movs	r2, #0
10001c70:	2100      	movs	r1, #0
10001c72:	2006      	movs	r0, #6
10001c74:	f7ff ff18 	bl	10001aa8 <clock_configure>
10001c78:	e7ad      	b.n	10001bd6 <clocks_init+0x2a>
10001c7a:	46c0      	nop			; (mov r8, r8)
10001c7c:	20000bc8 	.word	0x20000bc8
10001c80:	02dc6c00 	.word	0x02dc6c00
10001c84:	0000b71b 	.word	0x0000b71b
10001c88:	40008000 	.word	0x40008000
10001c8c:	4000b03c 	.word	0x4000b03c
10001c90:	4000b030 	.word	0x4000b030
10001c94:	59682f00 	.word	0x59682f00
10001c98:	40028000 	.word	0x40028000
10001c9c:	1c9c3800 	.word	0x1c9c3800
10001ca0:	4002c000 	.word	0x4002c000
10001ca4:	00b71b00 	.word	0x00b71b00
10001ca8:	07735940 	.word	0x07735940

10001cac <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10001cac:	4b01      	ldr	r3, [pc, #4]	; (10001cb4 <clock_get_hz+0x8>)
10001cae:	0080      	lsls	r0, r0, #2
10001cb0:	58c0      	ldr	r0, [r0, r3]
}
10001cb2:	4770      	bx	lr
10001cb4:	20000bc8 	.word	0x20000bc8

10001cb8 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10001cba:	46ce      	mov	lr, r9
10001cbc:	b500      	push	{lr}
10001cbe:	0004      	movs	r4, r0
10001cc0:	000e      	movs	r6, r1
10001cc2:	4691      	mov	r9, r2
10001cc4:	001f      	movs	r7, r3
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001cc6:	200c      	movs	r0, #12
10001cc8:	f7fe fa6e 	bl	100001a8 <__udivsi3>
10001ccc:	0005      	movs	r5, r0

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
10001cce:	0143      	lsls	r3, r0, #5
10001cd0:	1a1b      	subs	r3, r3, r0
10001cd2:	0199      	lsls	r1, r3, #6
10001cd4:	1ac9      	subs	r1, r1, r3
10001cd6:	00c9      	lsls	r1, r1, #3
10001cd8:	1809      	adds	r1, r1, r0
10001cda:	0189      	lsls	r1, r1, #6
10001cdc:	4648      	mov	r0, r9
10001cde:	f7fe fa63 	bl	100001a8 <__udivsi3>
/// \end::pll_init_calculations[]

    // fbdiv
    assert(fbdiv >= 16 && fbdiv <= 320);
10001ce2:	0002      	movs	r2, r0
10001ce4:	3a10      	subs	r2, #16
10001ce6:	2398      	movs	r3, #152	; 0x98
10001ce8:	005b      	lsls	r3, r3, #1
10001cea:	429a      	cmp	r2, r3
10001cec:	d833      	bhi.n	10001d56 <pll_init+0x9e>

    // Check divider ranges
    assert((post_div1 >= 1 && post_div1 <= 7) && (post_div2 >= 1 && post_div2 <= 7));
10001cee:	1e7b      	subs	r3, r7, #1
10001cf0:	2b06      	cmp	r3, #6
10001cf2:	d836      	bhi.n	10001d62 <pll_init+0xaa>
10001cf4:	9b06      	ldr	r3, [sp, #24]
10001cf6:	3b01      	subs	r3, #1
10001cf8:	2b06      	cmp	r3, #6
10001cfa:	d832      	bhi.n	10001d62 <pll_init+0xaa>

    // post_div1 should be >= post_div2
    // from appnote page 11
    // postdiv1 is designed to operate with a higher input frequency
    // than postdiv2
    assert(post_div2 <= post_div1);
10001cfc:	9b06      	ldr	r3, [sp, #24]
10001cfe:	429f      	cmp	r7, r3
10001d00:	d335      	bcc.n	10001d6e <pll_init+0xb6>

    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));
10001d02:	464b      	mov	r3, r9
10001d04:	091b      	lsrs	r3, r3, #4
10001d06:	42ab      	cmp	r3, r5
10001d08:	d337      	bcc.n	10001d7a <pll_init+0xc2>

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001d0a:	043f      	lsls	r7, r7, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001d0c:	9b06      	ldr	r3, [sp, #24]
10001d0e:	031d      	lsls	r5, r3, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001d10:	432f      	orrs	r7, r5

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001d12:	6823      	ldr	r3, [r4, #0]
10001d14:	2b00      	cmp	r3, #0
10001d16:	db36      	blt.n	10001d86 <pll_init+0xce>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001d18:	4b23      	ldr	r3, [pc, #140]	; (10001da8 <pll_init+0xf0>)
10001d1a:	429c      	cmp	r4, r3
10001d1c:	d041      	beq.n	10001da2 <pll_init+0xea>
10001d1e:	2380      	movs	r3, #128	; 0x80
10001d20:	015b      	lsls	r3, r3, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001d22:	4a22      	ldr	r2, [pc, #136]	; (10001dac <pll_init+0xf4>)
10001d24:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001d26:	4a22      	ldr	r2, [pc, #136]	; (10001db0 <pll_init+0xf8>)
10001d28:	6013      	str	r3, [r2, #0]
10001d2a:	4a22      	ldr	r2, [pc, #136]	; (10001db4 <pll_init+0xfc>)
10001d2c:	6892      	ldr	r2, [r2, #8]
10001d2e:	0019      	movs	r1, r3
10001d30:	4391      	bics	r1, r2
10001d32:	d1fa      	bne.n	10001d2a <pll_init+0x72>
    reset_block(pll_reset);
    unreset_block_wait(pll_reset);

    // Load VCO-related dividers before starting VCO
    pll->cs = refdiv;
10001d34:	6026      	str	r6, [r4, #0]
    pll->fbdiv_int = fbdiv;
10001d36:	60a0      	str	r0, [r4, #8]

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10001d38:	1d22      	adds	r2, r4, #4
10001d3a:	23c0      	movs	r3, #192	; 0xc0
10001d3c:	019b      	lsls	r3, r3, #6
10001d3e:	4313      	orrs	r3, r2
10001d40:	2221      	movs	r2, #33	; 0x21
10001d42:	601a      	str	r2, [r3, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001d44:	6822      	ldr	r2, [r4, #0]
10001d46:	2a00      	cmp	r2, #0
10001d48:	dafc      	bge.n	10001d44 <pll_init+0x8c>

    // Set up post dividers
    pll->prim = pdiv;
10001d4a:	60e7      	str	r7, [r4, #12]
10001d4c:	2208      	movs	r2, #8
10001d4e:	601a      	str	r2, [r3, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001d50:	bc80      	pop	{r7}
10001d52:	46b9      	mov	r9, r7
10001d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(fbdiv >= 16 && fbdiv <= 320);
10001d56:	4b18      	ldr	r3, [pc, #96]	; (10001db8 <pll_init+0x100>)
10001d58:	4a18      	ldr	r2, [pc, #96]	; (10001dbc <pll_init+0x104>)
10001d5a:	4819      	ldr	r0, [pc, #100]	; (10001dc0 <pll_init+0x108>)
10001d5c:	2116      	movs	r1, #22
10001d5e:	f001 f95b 	bl	10003018 <__assert_func>
    assert((post_div1 >= 1 && post_div1 <= 7) && (post_div2 >= 1 && post_div2 <= 7));
10001d62:	4b18      	ldr	r3, [pc, #96]	; (10001dc4 <pll_init+0x10c>)
10001d64:	4a15      	ldr	r2, [pc, #84]	; (10001dbc <pll_init+0x104>)
10001d66:	4816      	ldr	r0, [pc, #88]	; (10001dc0 <pll_init+0x108>)
10001d68:	2119      	movs	r1, #25
10001d6a:	f001 f955 	bl	10003018 <__assert_func>
    assert(post_div2 <= post_div1);
10001d6e:	4b16      	ldr	r3, [pc, #88]	; (10001dc8 <pll_init+0x110>)
10001d70:	4a12      	ldr	r2, [pc, #72]	; (10001dbc <pll_init+0x104>)
10001d72:	4813      	ldr	r0, [pc, #76]	; (10001dc0 <pll_init+0x108>)
10001d74:	211f      	movs	r1, #31
10001d76:	f001 f94f 	bl	10003018 <__assert_func>
    assert(ref_mhz <= (vco_freq / 16));
10001d7a:	4b14      	ldr	r3, [pc, #80]	; (10001dcc <pll_init+0x114>)
10001d7c:	4a0f      	ldr	r2, [pc, #60]	; (10001dbc <pll_init+0x104>)
10001d7e:	4810      	ldr	r0, [pc, #64]	; (10001dc0 <pll_init+0x108>)
10001d80:	2122      	movs	r1, #34	; 0x22
10001d82:	f001 f949 	bl	10003018 <__assert_func>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001d86:	6822      	ldr	r2, [r4, #0]
10001d88:	233f      	movs	r3, #63	; 0x3f
10001d8a:	4013      	ands	r3, r2
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10001d8c:	42b3      	cmp	r3, r6
10001d8e:	d1c3      	bne.n	10001d18 <pll_init+0x60>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10001d90:	68a3      	ldr	r3, [r4, #8]
10001d92:	051b      	lsls	r3, r3, #20
10001d94:	0d1b      	lsrs	r3, r3, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10001d96:	4283      	cmp	r3, r0
10001d98:	d1be      	bne.n	10001d18 <pll_init+0x60>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS & PLL_PRIM_POSTDIV2_BITS)))) {
10001d9a:	68e3      	ldr	r3, [r4, #12]
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10001d9c:	2f00      	cmp	r7, #0
10001d9e:	d1bb      	bne.n	10001d18 <pll_init+0x60>
10001da0:	e7d6      	b.n	10001d50 <pll_init+0x98>
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10001da2:	2380      	movs	r3, #128	; 0x80
10001da4:	019b      	lsls	r3, r3, #6
10001da6:	e7bc      	b.n	10001d22 <pll_init+0x6a>
10001da8:	4002c000 	.word	0x4002c000
10001dac:	4000e000 	.word	0x4000e000
10001db0:	4000f000 	.word	0x4000f000
10001db4:	4000c000 	.word	0x4000c000
10001db8:	1000748c 	.word	0x1000748c
10001dbc:	1000756c 	.word	0x1000756c
10001dc0:	100074a8 	.word	0x100074a8
10001dc4:	100074ec 	.word	0x100074ec
10001dc8:	10007538 	.word	0x10007538
10001dcc:	10007550 	.word	0x10007550

10001dd0 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10001dd0:	4b06      	ldr	r3, [pc, #24]	; (10001dec <xosc_init+0x1c>)
10001dd2:	22aa      	movs	r2, #170	; 0xaa
10001dd4:	0112      	lsls	r2, r2, #4
10001dd6:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10001dd8:	222f      	movs	r2, #47	; 0x2f
10001dda:	60da      	str	r2, [r3, #12]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001ddc:	4b04      	ldr	r3, [pc, #16]	; (10001df0 <xosc_init+0x20>)
10001dde:	4a05      	ldr	r2, [pc, #20]	; (10001df4 <xosc_init+0x24>)
10001de0:	601a      	str	r2, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10001de2:	4b02      	ldr	r3, [pc, #8]	; (10001dec <xosc_init+0x1c>)
10001de4:	685b      	ldr	r3, [r3, #4]
10001de6:	2b00      	cmp	r3, #0
10001de8:	dafb      	bge.n	10001de2 <xosc_init+0x12>
}
10001dea:	4770      	bx	lr
10001dec:	40024000 	.word	0x40024000
10001df0:	40026000 	.word	0x40026000
10001df4:	00fab000 	.word	0x00fab000

10001df8 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10001df8:	2380      	movs	r3, #128	; 0x80
10001dfa:	009b      	lsls	r3, r3, #2
10001dfc:	4303      	orrs	r3, r0
10001dfe:	4a01      	ldr	r2, [pc, #4]	; (10001e04 <watchdog_start_tick+0xc>)
10001e00:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10001e02:	4770      	bx	lr
10001e04:	40058000 	.word	0x40058000

10001e08 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10001e08:	4b03      	ldr	r3, [pc, #12]	; (10001e18 <running_on_fpga+0x10>)
10001e0a:	681b      	ldr	r3, [r3, #0]
10001e0c:	2002      	movs	r0, #2
10001e0e:	4018      	ands	r0, r3
10001e10:	1e43      	subs	r3, r0, #1
10001e12:	4198      	sbcs	r0, r3
10001e14:	b2c0      	uxtb	r0, r0
}
10001e16:	4770      	bx	lr
10001e18:	4006c000 	.word	0x4006c000

10001e1c <gpio_set_function>:
}

/// \tag::gpio_set_function[]
// Select function for this GPIO, and ensure input/output are enabled at the pad.
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
10001e1c:	b510      	push	{r4, lr}
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10001e1e:	0083      	lsls	r3, r0, #2
10001e20:	4a08      	ldr	r2, [pc, #32]	; (10001e44 <gpio_set_function+0x28>)
10001e22:	4694      	mov	ip, r2
10001e24:	4463      	add	r3, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001e26:	681a      	ldr	r2, [r3, #0]
10001e28:	2440      	movs	r4, #64	; 0x40
10001e2a:	4062      	eors	r2, r4
10001e2c:	3480      	adds	r4, #128	; 0x80
10001e2e:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001e30:	2280      	movs	r2, #128	; 0x80
10001e32:	0152      	lsls	r2, r2, #5
10001e34:	4313      	orrs	r3, r2
10001e36:	601c      	str	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001e38:	00c0      	lsls	r0, r0, #3
10001e3a:	4b03      	ldr	r3, [pc, #12]	; (10001e48 <gpio_set_function+0x2c>)
10001e3c:	469c      	mov	ip, r3
10001e3e:	4460      	add	r0, ip
10001e40:	6041      	str	r1, [r0, #4]
}
10001e42:	bd10      	pop	{r4, pc}
10001e44:	4001c004 	.word	0x4001c004
10001e48:	40014000 	.word	0x40014000

10001e4c <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10001e4c:	0080      	lsls	r0, r0, #2
10001e4e:	4b0b      	ldr	r3, [pc, #44]	; (10001e7c <gpio_set_pulls+0x30>)
10001e50:	469c      	mov	ip, r3
10001e52:	4460      	add	r0, ip
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10001e54:	2900      	cmp	r1, #0
10001e56:	d00d      	beq.n	10001e74 <gpio_set_pulls+0x28>
10001e58:	2308      	movs	r3, #8
10001e5a:	2a00      	cmp	r2, #0
10001e5c:	d00c      	beq.n	10001e78 <gpio_set_pulls+0x2c>
10001e5e:	2204      	movs	r2, #4
    hw_write_masked(
10001e60:	4313      	orrs	r3, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001e62:	6802      	ldr	r2, [r0, #0]
10001e64:	4053      	eors	r3, r2
10001e66:	220c      	movs	r2, #12
10001e68:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001e6a:	2380      	movs	r3, #128	; 0x80
10001e6c:	015b      	lsls	r3, r3, #5
10001e6e:	4303      	orrs	r3, r0
10001e70:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001e72:	4770      	bx	lr
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10001e74:	2300      	movs	r3, #0
10001e76:	e7f0      	b.n	10001e5a <gpio_set_pulls+0xe>
10001e78:	2200      	movs	r2, #0
10001e7a:	e7f1      	b.n	10001e60 <gpio_set_pulls+0x14>
10001e7c:	4001c004 	.word	0x4001c004

10001e80 <gpio_set_input_hysteresis_enabled>:
    );
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    if (enabled)
10001e80:	2900      	cmp	r1, #0
10001e82:	d009      	beq.n	10001e98 <gpio_set_input_hysteresis_enabled+0x18>
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10001e84:	0080      	lsls	r0, r0, #2
10001e86:	4b09      	ldr	r3, [pc, #36]	; (10001eac <gpio_set_input_hysteresis_enabled+0x2c>)
10001e88:	469c      	mov	ip, r3
10001e8a:	4460      	add	r0, ip
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001e8c:	2380      	movs	r3, #128	; 0x80
10001e8e:	019b      	lsls	r3, r3, #6
10001e90:	4303      	orrs	r3, r0
10001e92:	2202      	movs	r2, #2
10001e94:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
10001e96:	4770      	bx	lr
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10001e98:	0080      	lsls	r0, r0, #2
10001e9a:	4b04      	ldr	r3, [pc, #16]	; (10001eac <gpio_set_input_hysteresis_enabled+0x2c>)
10001e9c:	469c      	mov	ip, r3
10001e9e:	4460      	add	r0, ip
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001ea0:	23c0      	movs	r3, #192	; 0xc0
10001ea2:	019b      	lsls	r3, r3, #6
10001ea4:	4303      	orrs	r3, r0
10001ea6:	2202      	movs	r2, #2
10001ea8:	601a      	str	r2, [r3, #0]
}
10001eaa:	e7f4      	b.n	10001e96 <gpio_set_input_hysteresis_enabled+0x16>
10001eac:	4001c004 	.word	0x4001c004

10001eb0 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001eb0:	0080      	lsls	r0, r0, #2
10001eb2:	4b06      	ldr	r3, [pc, #24]	; (10001ecc <gpio_set_slew_rate+0x1c>)
10001eb4:	469c      	mov	ip, r3
10001eb6:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001eb8:	6803      	ldr	r3, [r0, #0]
10001eba:	404b      	eors	r3, r1
10001ebc:	2101      	movs	r1, #1
10001ebe:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001ec0:	2380      	movs	r3, #128	; 0x80
10001ec2:	015b      	lsls	r3, r3, #5
10001ec4:	4303      	orrs	r3, r0
10001ec6:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
10001ec8:	4770      	bx	lr
10001eca:	46c0      	nop			; (mov r8, r8)
10001ecc:	4001c004 	.word	0x4001c004

10001ed0 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&padsbank0_hw->io[gpio],
10001ed0:	0080      	lsls	r0, r0, #2
10001ed2:	4b06      	ldr	r3, [pc, #24]	; (10001eec <gpio_set_drive_strength+0x1c>)
10001ed4:	469c      	mov	ip, r3
10001ed6:	4460      	add	r0, ip
10001ed8:	0109      	lsls	r1, r1, #4
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001eda:	6803      	ldr	r3, [r0, #0]
10001edc:	4059      	eors	r1, r3
10001ede:	2230      	movs	r2, #48	; 0x30
10001ee0:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001ee2:	2380      	movs	r3, #128	; 0x80
10001ee4:	015b      	lsls	r3, r3, #5
10001ee6:	4303      	orrs	r3, r0
10001ee8:	601a      	str	r2, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10001eea:	4770      	bx	lr
10001eec:	4001c004 	.word	0x4001c004

10001ef0 <gpio_acknowledge_irq>:
    io_irq_ctrl_hw_t *irq_ctrl_base = &iobank0_hw->dormant_wake_irq_ctrl;
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    iobank0_hw->intr[gpio / 8] = events << 4 * (gpio % 8);
10001ef0:	2307      	movs	r3, #7
10001ef2:	4003      	ands	r3, r0
10001ef4:	009b      	lsls	r3, r3, #2
10001ef6:	08c0      	lsrs	r0, r0, #3
10001ef8:	4099      	lsls	r1, r3
10001efa:	303c      	adds	r0, #60	; 0x3c
10001efc:	0080      	lsls	r0, r0, #2
10001efe:	4b01      	ldr	r3, [pc, #4]	; (10001f04 <gpio_acknowledge_irq+0x14>)
10001f00:	50c1      	str	r1, [r0, r3]
}
10001f02:	4770      	bx	lr
10001f04:	40014000 	.word	0x40014000

10001f08 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10001f08:	b510      	push	{r4, lr}
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001f0a:	23d0      	movs	r3, #208	; 0xd0
10001f0c:	061b      	lsls	r3, r3, #24
10001f0e:	681b      	ldr	r3, [r3, #0]
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001f10:	2b00      	cmp	r3, #0
10001f12:	d003      	beq.n	10001f1c <gpio_set_irq_enabled+0x14>
10001f14:	4b02      	ldr	r3, [pc, #8]	; (10001f20 <gpio_set_irq_enabled+0x18>)
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
10001f16:	f004 fc90 	bl	1000683a <_gpio_set_irq_enabled>
}
10001f1a:	bd10      	pop	{r4, pc}
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10001f1c:	4b01      	ldr	r3, [pc, #4]	; (10001f24 <gpio_set_irq_enabled+0x1c>)
10001f1e:	e7fa      	b.n	10001f16 <gpio_set_irq_enabled+0xe>
10001f20:	40014130 	.word	0x40014130
10001f24:	40014100 	.word	0x40014100

10001f28 <gpio_set_input_enabled>:
    bi_decl_if_func_used(bi_pin_mask_with_names(DEBUG_PIN_MASK, "Debug"));
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
10001f28:	2900      	cmp	r1, #0
10001f2a:	d009      	beq.n	10001f40 <gpio_set_input_enabled+0x18>
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10001f2c:	0080      	lsls	r0, r0, #2
10001f2e:	4b09      	ldr	r3, [pc, #36]	; (10001f54 <gpio_set_input_enabled+0x2c>)
10001f30:	469c      	mov	ip, r3
10001f32:	4460      	add	r0, ip
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001f34:	2380      	movs	r3, #128	; 0x80
10001f36:	019b      	lsls	r3, r3, #6
10001f38:	4303      	orrs	r3, r0
10001f3a:	2240      	movs	r2, #64	; 0x40
10001f3c:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
10001f3e:	4770      	bx	lr
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
10001f40:	0080      	lsls	r0, r0, #2
10001f42:	4b04      	ldr	r3, [pc, #16]	; (10001f54 <gpio_set_input_enabled+0x2c>)
10001f44:	469c      	mov	ip, r3
10001f46:	4460      	add	r0, ip
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001f48:	23c0      	movs	r3, #192	; 0xc0
10001f4a:	019b      	lsls	r3, r3, #6
10001f4c:	4303      	orrs	r3, r0
10001f4e:	2240      	movs	r2, #64	; 0x40
10001f50:	601a      	str	r2, [r3, #0]
}
10001f52:	e7f4      	b.n	10001f3e <gpio_set_input_enabled+0x16>
10001f54:	4001c004 	.word	0x4001c004

10001f58 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10001f58:	b570      	push	{r4, r5, r6, lr}
10001f5a:	0004      	movs	r4, r0
10001f5c:	000d      	movs	r5, r1
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10001f5e:	2006      	movs	r0, #6
10001f60:	f7ff fea4 	bl	10001cac <clock_get_hz>
10001f64:	00c0      	lsls	r0, r0, #3
10001f66:	0029      	movs	r1, r5
10001f68:	f7fe f91e 	bl	100001a8 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
10001f6c:	09c6      	lsrs	r6, r0, #7
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
10001f6e:	d008      	beq.n	10001f82 <uart_set_baudrate+0x2a>
        baud_ibrd = 1;
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
10001f70:	4b0e      	ldr	r3, [pc, #56]	; (10001fac <uart_set_baudrate+0x54>)
10001f72:	429e      	cmp	r6, r3
10001f74:	d817      	bhi.n	10001fa6 <uart_set_baudrate+0x4e>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10001f76:	237f      	movs	r3, #127	; 0x7f
10001f78:	4003      	ands	r3, r0
10001f7a:	3301      	adds	r3, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
10001f7c:	0035      	movs	r5, r6
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10001f7e:	085e      	lsrs	r6, r3, #1
10001f80:	e000      	b.n	10001f84 <uart_set_baudrate+0x2c>
        baud_ibrd = 1;
10001f82:	2501      	movs	r5, #1
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10001f84:	6265      	str	r5, [r4, #36]	; 0x24
    uart_get_hw(uart)->fbrd = baud_fbrd;
10001f86:	62a6      	str	r6, [r4, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10001f88:	342c      	adds	r4, #44	; 0x2c
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001f8a:	2380      	movs	r3, #128	; 0x80
10001f8c:	019b      	lsls	r3, r3, #6
10001f8e:	4323      	orrs	r3, r4
10001f90:	2200      	movs	r2, #0
10001f92:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10001f94:	2006      	movs	r0, #6
10001f96:	f7ff fe89 	bl	10001cac <clock_get_hz>
10001f9a:	0080      	lsls	r0, r0, #2
10001f9c:	01a9      	lsls	r1, r5, #6
10001f9e:	1989      	adds	r1, r1, r6
10001fa0:	f7fe f902 	bl	100001a8 <__udivsi3>
}
10001fa4:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10001fa6:	2600      	movs	r6, #0
        baud_ibrd = 65535;
10001fa8:	4d01      	ldr	r5, [pc, #4]	; (10001fb0 <uart_set_baudrate+0x58>)
10001faa:	e7eb      	b.n	10001f84 <uart_set_baudrate+0x2c>
10001fac:	0000fffe 	.word	0x0000fffe
10001fb0:	0000ffff 	.word	0x0000ffff

10001fb4 <uart_set_translate_crlf>:
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10001fb4:	2900      	cmp	r1, #0
10001fb6:	d009      	beq.n	10001fcc <uart_set_translate_crlf+0x18>
10001fb8:	220a      	movs	r2, #10
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    return uart == uart1 ? 1 : 0;
10001fba:	4b06      	ldr	r3, [pc, #24]	; (10001fd4 <uart_set_translate_crlf+0x20>)
10001fbc:	469c      	mov	ip, r3
10001fbe:	4460      	add	r0, ip
10001fc0:	4243      	negs	r3, r0
10001fc2:	4158      	adcs	r0, r3
10001fc4:	4b04      	ldr	r3, [pc, #16]	; (10001fd8 <uart_set_translate_crlf+0x24>)
10001fc6:	0040      	lsls	r0, r0, #1
10001fc8:	52c2      	strh	r2, [r0, r3]
#else
    panic_unsupported();
#endif
}
10001fca:	4770      	bx	lr
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10001fcc:	2280      	movs	r2, #128	; 0x80
10001fce:	0052      	lsls	r2, r2, #1
10001fd0:	e7f3      	b.n	10001fba <uart_set_translate_crlf+0x6>
10001fd2:	46c0      	nop			; (mov r8, r8)
10001fd4:	bffc8000 	.word	0xbffc8000
10001fd8:	20000bf0 	.word	0x20000bf0

10001fdc <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10001fdc:	b570      	push	{r4, r5, r6, lr}
10001fde:	0005      	movs	r5, r0
10001fe0:	000c      	movs	r4, r1
    if (clock_get_hz(clk_peri) == 0)
10001fe2:	2006      	movs	r0, #6
10001fe4:	f7ff fe62 	bl	10001cac <clock_get_hz>
10001fe8:	2800      	cmp	r0, #0
10001fea:	d029      	beq.n	10002040 <uart_init+0x64>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10001fec:	4b16      	ldr	r3, [pc, #88]	; (10002048 <uart_init+0x6c>)
10001fee:	429d      	cmp	r5, r3
10001ff0:	d027      	beq.n	10002042 <uart_init+0x66>
10001ff2:	2280      	movs	r2, #128	; 0x80
10001ff4:	03d2      	lsls	r2, r2, #15
10001ff6:	4b15      	ldr	r3, [pc, #84]	; (1000204c <uart_init+0x70>)
10001ff8:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001ffa:	4b15      	ldr	r3, [pc, #84]	; (10002050 <uart_init+0x74>)
10001ffc:	601a      	str	r2, [r3, #0]
10001ffe:	4b15      	ldr	r3, [pc, #84]	; (10002054 <uart_init+0x78>)
10002000:	689b      	ldr	r3, [r3, #8]
10002002:	0011      	movs	r1, r2
10002004:	4399      	bics	r1, r3
10002006:	d1fa      	bne.n	10001ffe <uart_init+0x22>
    uart_set_translate_crlf(uart, PICO_UART_DEFAULT_CRLF);
10002008:	2100      	movs	r1, #0
1000200a:	0028      	movs	r0, r5
1000200c:	f7ff ffd2 	bl	10001fb4 <uart_set_translate_crlf>
    uint baud = uart_set_baudrate(uart, baudrate);
10002010:	0021      	movs	r1, r4
10002012:	0028      	movs	r0, r5
10002014:	f7ff ffa0 	bl	10001f58 <uart_set_baudrate>
 */
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002018:	0029      	movs	r1, r5
1000201a:	312c      	adds	r1, #44	; 0x2c
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000201c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
1000201e:	2260      	movs	r2, #96	; 0x60
10002020:	4053      	eors	r3, r2
10002022:	320e      	adds	r2, #14
10002024:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002026:	2380      	movs	r3, #128	; 0x80
10002028:	015b      	lsls	r3, r3, #5
1000202a:	430b      	orrs	r3, r1
1000202c:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
1000202e:	4b0a      	ldr	r3, [pc, #40]	; (10002058 <uart_init+0x7c>)
10002030:	632b      	str	r3, [r5, #48]	; 0x30
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002032:	2380      	movs	r3, #128	; 0x80
10002034:	019b      	lsls	r3, r3, #6
10002036:	430b      	orrs	r3, r1
10002038:	2210      	movs	r2, #16
1000203a:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
1000203c:	2303      	movs	r3, #3
1000203e:	64ab      	str	r3, [r5, #72]	; 0x48
}
10002040:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10002042:	2280      	movs	r2, #128	; 0x80
10002044:	0412      	lsls	r2, r2, #16
10002046:	e7d6      	b.n	10001ff6 <uart_init+0x1a>
10002048:	40038000 	.word	0x40038000
1000204c:	4000e000 	.word	0x4000e000
10002050:	4000f000 	.word	0x4000f000
10002054:	4000c000 	.word	0x4000c000
10002058:	00000301 	.word	0x00000301

1000205c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
1000205c:	4b03      	ldr	r3, [pc, #12]	; (1000206c <z_device_state_init+0x10>)

	while (dev < __device_end) {
1000205e:	e000      	b.n	10002062 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
10002060:	3318      	adds	r3, #24
	while (dev < __device_end) {
10002062:	4a03      	ldr	r2, [pc, #12]	; (10002070 <z_device_state_init+0x14>)
10002064:	4293      	cmp	r3, r2
10002066:	d3fb      	bcc.n	10002060 <z_device_state_init+0x4>
	}
}
10002068:	4770      	bx	lr
1000206a:	46c0      	nop			; (mov r8, r8)
1000206c:	10006c80 	.word	0x10006c80
10002070:	10006d10 	.word	0x10006d10

10002074 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
10002074:	b570      	push	{r4, r5, r6, lr}
10002076:	0005      	movs	r5, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10002078:	4b10      	ldr	r3, [pc, #64]	; (100020bc <z_sys_init_run_level+0x48>)
1000207a:	0082      	lsls	r2, r0, #2
1000207c:	58d4      	ldr	r4, [r2, r3]
1000207e:	e009      	b.n	10002094 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
10002080:	4240      	negs	r0, r0
10002082:	e016      	b.n	100020b2 <z_sys_init_run_level+0x3e>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
10002084:	68f3      	ldr	r3, [r6, #12]
10002086:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
10002088:	68f2      	ldr	r2, [r6, #12]
1000208a:	7853      	ldrb	r3, [r2, #1]
1000208c:	2101      	movs	r1, #1
1000208e:	430b      	orrs	r3, r1
10002090:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10002092:	3408      	adds	r4, #8
10002094:	1c6b      	adds	r3, r5, #1
10002096:	4a09      	ldr	r2, [pc, #36]	; (100020bc <z_sys_init_run_level+0x48>)
10002098:	009b      	lsls	r3, r3, #2
1000209a:	589b      	ldr	r3, [r3, r2]
1000209c:	42a3      	cmp	r3, r4
1000209e:	d90c      	bls.n	100020ba <z_sys_init_run_level+0x46>
		const struct device *dev = entry->dev;
100020a0:	6866      	ldr	r6, [r4, #4]
		int rc = entry->init(dev);
100020a2:	6823      	ldr	r3, [r4, #0]
100020a4:	0030      	movs	r0, r6
100020a6:	4798      	blx	r3
		if (dev != NULL) {
100020a8:	2e00      	cmp	r6, #0
100020aa:	d0f2      	beq.n	10002092 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
100020ac:	2800      	cmp	r0, #0
100020ae:	d0eb      	beq.n	10002088 <z_sys_init_run_level+0x14>
				if (rc < 0) {
100020b0:	dbe6      	blt.n	10002080 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
100020b2:	28ff      	cmp	r0, #255	; 0xff
100020b4:	dde6      	ble.n	10002084 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
100020b6:	20ff      	movs	r0, #255	; 0xff
100020b8:	e7e4      	b.n	10002084 <z_sys_init_run_level+0x10>
		}
	}
}
100020ba:	bd70      	pop	{r4, r5, r6, pc}
100020bc:	10007584 	.word	0x10007584

100020c0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
100020c0:	b570      	push	{r4, r5, r6, lr}
100020c2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
100020c4:	01c4      	lsls	r4, r0, #7
100020c6:	4b0f      	ldr	r3, [pc, #60]	; (10002104 <init_idle_thread+0x44>)
100020c8:	18e4      	adds	r4, r4, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
100020ca:	0201      	lsls	r1, r0, #8
100020cc:	4b0e      	ldr	r3, [pc, #56]	; (10002108 <init_idle_thread+0x48>)
100020ce:	18c9      	adds	r1, r1, r3
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
100020d0:	0043      	lsls	r3, r0, #1
100020d2:	1818      	adds	r0, r3, r0
100020d4:	00c0      	lsls	r0, r0, #3
100020d6:	4b0d      	ldr	r3, [pc, #52]	; (1000210c <init_idle_thread+0x4c>)
100020d8:	18c0      	adds	r0, r0, r3
	z_setup_new_thread(thread, stack,
100020da:	4b0d      	ldr	r3, [pc, #52]	; (10002110 <init_idle_thread+0x50>)
100020dc:	2280      	movs	r2, #128	; 0x80
100020de:	2500      	movs	r5, #0
100020e0:	9505      	str	r5, [sp, #20]
100020e2:	2601      	movs	r6, #1
100020e4:	9604      	str	r6, [sp, #16]
100020e6:	360e      	adds	r6, #14
100020e8:	9603      	str	r6, [sp, #12]
100020ea:	9502      	str	r5, [sp, #8]
100020ec:	9501      	str	r5, [sp, #4]
100020ee:	9000      	str	r0, [sp, #0]
100020f0:	0052      	lsls	r2, r2, #1
100020f2:	0020      	movs	r0, r4
100020f4:	f000 f8d4 	bl	100022a0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
100020f8:	7b63      	ldrb	r3, [r4, #13]
100020fa:	2204      	movs	r2, #4
100020fc:	4393      	bics	r3, r2
100020fe:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
10002100:	b006      	add	sp, #24
10002102:	bd70      	pop	{r4, r5, r6, pc}
10002104:	20000a30 	.word	0x20000a30
10002108:	20001a50 	.word	0x20001a50
1000210c:	20000bf4 	.word	0x20000bf4
10002110:	10006921 	.word	0x10006921

10002114 <bg_thread_main>:
{
10002114:	b510      	push	{r4, lr}
	z_sys_post_kernel = true;
10002116:	4b0a      	ldr	r3, [pc, #40]	; (10002140 <bg_thread_main+0x2c>)
10002118:	2401      	movs	r4, #1
1000211a:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
1000211c:	2003      	movs	r0, #3
1000211e:	f7ff ffa9 	bl	10002074 <z_sys_init_run_level>
	boot_banner();
10002122:	f000 ff71 	bl	10003008 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
10002126:	2004      	movs	r0, #4
10002128:	f7ff ffa4 	bl	10002074 <z_sys_init_run_level>
	z_init_static_threads();
1000212c:	f000 f8e8 	bl	10002300 <z_init_static_threads>
	(void)main();
10002130:	f004 fd78 	bl	10006c24 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10002134:	4a03      	ldr	r2, [pc, #12]	; (10002144 <bg_thread_main+0x30>)
10002136:	7b13      	ldrb	r3, [r2, #12]
10002138:	43a3      	bics	r3, r4
1000213a:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
1000213c:	bd10      	pop	{r4, pc}
1000213e:	46c0      	nop			; (mov r8, r8)
10002140:	20000c62 	.word	0x20000c62
10002144:	20000ab0 	.word	0x20000ab0

10002148 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
10002148:	b510      	push	{r4, lr}
1000214a:	0001      	movs	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
1000214c:	4a02      	ldr	r2, [pc, #8]	; (10002158 <switch_to_main_thread+0x10>)
1000214e:	4b03      	ldr	r3, [pc, #12]	; (1000215c <switch_to_main_thread+0x14>)
10002150:	0018      	movs	r0, r3
10002152:	f7fe ffd1 	bl	100010f8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10002156:	46c0      	nop			; (mov r8, r8)
10002158:	10002115 	.word	0x10002115
1000215c:	20000ab0 	.word	0x20000ab0

10002160 <z_bss_zero>:
{
10002160:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10002162:	4a03      	ldr	r2, [pc, #12]	; (10002170 <z_bss_zero+0x10>)
10002164:	4803      	ldr	r0, [pc, #12]	; (10002174 <z_bss_zero+0x14>)
10002166:	1a12      	subs	r2, r2, r0
10002168:	2100      	movs	r1, #0
1000216a:	f004 fbb9 	bl	100068e0 <z_early_memset>
}
1000216e:	bd10      	pop	{r4, pc}
10002170:	20000c64 	.word	0x20000c64
10002174:	200008b0 	.word	0x200008b0

10002178 <z_init_cpu>:
{
10002178:	b510      	push	{r4, lr}
1000217a:	0004      	movs	r4, r0
	init_idle_thread(id);
1000217c:	f7ff ffa0 	bl	100020c0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10002180:	01e0      	lsls	r0, r4, #7
10002182:	4b0a      	ldr	r3, [pc, #40]	; (100021ac <z_init_cpu+0x34>)
10002184:	18c0      	adds	r0, r0, r3
10002186:	4b0a      	ldr	r3, [pc, #40]	; (100021b0 <z_init_cpu+0x38>)
10002188:	0062      	lsls	r2, r4, #1
1000218a:	1911      	adds	r1, r2, r4
1000218c:	00c9      	lsls	r1, r1, #3
1000218e:	1859      	adds	r1, r3, r1
10002190:	60c8      	str	r0, [r1, #12]
	_kernel.cpus[id].id = id;
10002192:	750c      	strb	r4, [r1, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10002194:	02e1      	lsls	r1, r4, #11
10002196:	4807      	ldr	r0, [pc, #28]	; (100021b4 <z_init_cpu+0x3c>)
10002198:	1809      	adds	r1, r1, r0
1000219a:	2080      	movs	r0, #128	; 0x80
1000219c:	0100      	lsls	r0, r0, #4
1000219e:	4684      	mov	ip, r0
100021a0:	4461      	add	r1, ip
	_kernel.cpus[id].irq_stack =
100021a2:	1912      	adds	r2, r2, r4
100021a4:	00d2      	lsls	r2, r2, #3
100021a6:	189b      	adds	r3, r3, r2
100021a8:	6059      	str	r1, [r3, #4]
}
100021aa:	bd10      	pop	{r4, pc}
100021ac:	20000a30 	.word	0x20000a30
100021b0:	20000bf4 	.word	0x20000bf4
100021b4:	20001250 	.word	0x20001250

100021b8 <prepare_multithreading>:
{
100021b8:	b530      	push	{r4, r5, lr}
100021ba:	b087      	sub	sp, #28
	z_sched_init();
100021bc:	f000 fcba 	bl	10002b34 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
100021c0:	4b10      	ldr	r3, [pc, #64]	; (10002204 <prepare_multithreading+0x4c>)
100021c2:	4c11      	ldr	r4, [pc, #68]	; (10002208 <prepare_multithreading+0x50>)
100021c4:	619c      	str	r4, [r3, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
100021c6:	4b11      	ldr	r3, [pc, #68]	; (1000220c <prepare_multithreading+0x54>)
100021c8:	2280      	movs	r2, #128	; 0x80
100021ca:	4911      	ldr	r1, [pc, #68]	; (10002210 <prepare_multithreading+0x58>)
100021cc:	4811      	ldr	r0, [pc, #68]	; (10002214 <prepare_multithreading+0x5c>)
100021ce:	9005      	str	r0, [sp, #20]
100021d0:	2001      	movs	r0, #1
100021d2:	9004      	str	r0, [sp, #16]
100021d4:	2000      	movs	r0, #0
100021d6:	9003      	str	r0, [sp, #12]
100021d8:	9002      	str	r0, [sp, #8]
100021da:	9001      	str	r0, [sp, #4]
100021dc:	9000      	str	r0, [sp, #0]
100021de:	00d2      	lsls	r2, r2, #3
100021e0:	0020      	movs	r0, r4
100021e2:	f000 f85d 	bl	100022a0 <z_setup_new_thread>
100021e6:	0005      	movs	r5, r0
100021e8:	7b63      	ldrb	r3, [r4, #13]
100021ea:	2204      	movs	r2, #4
100021ec:	4393      	bics	r3, r2
100021ee:	7363      	strb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
100021f0:	0020      	movs	r0, r4
100021f2:	f004 fc04 	bl	100069fe <z_ready_thread>
	z_init_cpu(0);
100021f6:	2000      	movs	r0, #0
100021f8:	f7ff ffbe 	bl	10002178 <z_init_cpu>
}
100021fc:	0028      	movs	r0, r5
100021fe:	b007      	add	sp, #28
10002200:	bd30      	pop	{r4, r5, pc}
10002202:	46c0      	nop			; (mov r8, r8)
10002204:	20000bf4 	.word	0x20000bf4
10002208:	20000ab0 	.word	0x20000ab0
1000220c:	10002115 	.word	0x10002115
10002210:	20001b50 	.word	0x20001b50
10002214:	1000757c 	.word	0x1000757c

10002218 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
10002218:	b500      	push	{lr}
1000221a:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
1000221c:	2000      	movs	r0, #0
1000221e:	f7ff ff29 	bl	10002074 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10002222:	4b14      	ldr	r3, [pc, #80]	; (10002274 <z_cstart+0x5c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10002224:	f383 8808 	msr	MSP, r3
10002228:	4913      	ldr	r1, [pc, #76]	; (10002278 <z_cstart+0x60>)
1000222a:	6a0a      	ldr	r2, [r1, #32]
1000222c:	4b13      	ldr	r3, [pc, #76]	; (1000227c <z_cstart+0x64>)
1000222e:	401a      	ands	r2, r3
10002230:	23e0      	movs	r3, #224	; 0xe0
10002232:	041b      	lsls	r3, r3, #16
10002234:	4313      	orrs	r3, r2
10002236:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10002238:	f003 fbf2 	bl	10005a20 <z_arm_fault_init>
	z_arm_cpu_idle_init();
1000223c:	f7fe fe88 	bl	10000f50 <z_arm_cpu_idle_init>
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
10002240:	f7ff f892 	bl	10001368 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
10002244:	f7ff f854 	bl	100012f0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
10002248:	2301      	movs	r3, #1
1000224a:	466a      	mov	r2, sp
1000224c:	7353      	strb	r3, [r2, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
1000224e:	7313      	strb	r3, [r2, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
10002250:	2300      	movs	r3, #0
10002252:	9319      	str	r3, [sp, #100]	; 0x64
	dummy_thread->stack_info.size = 0U;
10002254:	931a      	str	r3, [sp, #104]	; 0x68
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10002256:	931c      	str	r3, [sp, #112]	; 0x70

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10002258:	4b09      	ldr	r3, [pc, #36]	; (10002280 <z_cstart+0x68>)
1000225a:	609a      	str	r2, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
1000225c:	f7ff fefe 	bl	1000205c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10002260:	2001      	movs	r0, #1
10002262:	f7ff ff07 	bl	10002074 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
10002266:	2002      	movs	r0, #2
10002268:	f7ff ff04 	bl	10002074 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
1000226c:	f7ff ffa4 	bl	100021b8 <prepare_multithreading>
10002270:	f7ff ff6a 	bl	10002148 <switch_to_main_thread>
10002274:	20001a50 	.word	0x20001a50
10002278:	e000ed00 	.word	0xe000ed00
1000227c:	ff00ffff 	.word	0xff00ffff
10002280:	20000bf4 	.word	0x20000bf4

10002284 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
10002284:	b510      	push	{r4, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10002286:	0019      	movs	r1, r3
10002288:	4311      	orrs	r1, r2
1000228a:	d102      	bne.n	10002292 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
1000228c:	f004 fb3a 	bl	10006904 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
10002290:	bd10      	pop	{r4, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10002292:	4902      	ldr	r1, [pc, #8]	; (1000229c <schedule_new_thread+0x18>)
10002294:	3018      	adds	r0, #24
10002296:	f000 fda1 	bl	10002ddc <z_add_timeout>
1000229a:	e7f9      	b.n	10002290 <schedule_new_thread+0xc>
1000229c:	10006a33 	.word	0x10006a33

100022a0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
100022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100022a2:	b085      	sub	sp, #20
100022a4:	0004      	movs	r4, r0
100022a6:	000e      	movs	r6, r1
100022a8:	0015      	movs	r5, r2
100022aa:	001f      	movs	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
100022ac:	0003      	movs	r3, r0
100022ae:	3358      	adds	r3, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
100022b0:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
100022b2:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
100022b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100022b6:	2204      	movs	r2, #4
100022b8:	990d      	ldr	r1, [sp, #52]	; 0x34
100022ba:	f004 fb27 	bl	1000690c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
100022be:	002a      	movs	r2, r5
100022c0:	0031      	movs	r1, r6
100022c2:	0020      	movs	r0, r4
100022c4:	f004 fb14 	bl	100068f0 <setup_thread_stack>
100022c8:	0005      	movs	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
100022ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100022cc:	9302      	str	r3, [sp, #8]
100022ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100022d0:	9301      	str	r3, [sp, #4]
100022d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100022d4:	9300      	str	r3, [sp, #0]
100022d6:	003b      	movs	r3, r7
100022d8:	0002      	movs	r2, r0
100022da:	0031      	movs	r1, r6
100022dc:	0020      	movs	r0, r4
100022de:	f7fe fef3 	bl	100010c8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
100022e2:	2300      	movs	r3, #0
100022e4:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
100022e6:	4b05      	ldr	r3, [pc, #20]	; (100022fc <z_setup_new_thread+0x5c>)
100022e8:	689b      	ldr	r3, [r3, #8]
100022ea:	2b00      	cmp	r3, #0
100022ec:	d004      	beq.n	100022f8 <z_setup_new_thread+0x58>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
100022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100022f0:	6723      	str	r3, [r4, #112]	; 0x70
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
100022f2:	0028      	movs	r0, r5
100022f4:	b005      	add	sp, #20
100022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
100022f8:	6723      	str	r3, [r4, #112]	; 0x70
		return stack_ptr;
100022fa:	e7fa      	b.n	100022f2 <z_setup_new_thread+0x52>
100022fc:	20000bf4 	.word	0x20000bf4

10002300 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
10002300:	b5f0      	push	{r4, r5, r6, r7, lr}
10002302:	b089      	sub	sp, #36	; 0x24
	_FOREACH_STATIC_THREAD(thread_data) {
10002304:	4e1e      	ldr	r6, [pc, #120]	; (10002380 <z_init_static_threads+0x80>)
10002306:	e014      	b.n	10002332 <z_init_static_threads+0x32>
		z_setup_new_thread(
10002308:	68f3      	ldr	r3, [r6, #12]
1000230a:	68b2      	ldr	r2, [r6, #8]
1000230c:	6871      	ldr	r1, [r6, #4]
1000230e:	6830      	ldr	r0, [r6, #0]
10002310:	6af7      	ldr	r7, [r6, #44]	; 0x2c
10002312:	9705      	str	r7, [sp, #20]
10002314:	6a37      	ldr	r7, [r6, #32]
10002316:	9704      	str	r7, [sp, #16]
10002318:	69f7      	ldr	r7, [r6, #28]
1000231a:	9703      	str	r7, [sp, #12]
1000231c:	69b7      	ldr	r7, [r6, #24]
1000231e:	9702      	str	r7, [sp, #8]
10002320:	6977      	ldr	r7, [r6, #20]
10002322:	9701      	str	r7, [sp, #4]
10002324:	6937      	ldr	r7, [r6, #16]
10002326:	9700      	str	r7, [sp, #0]
10002328:	f7ff ffba 	bl	100022a0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
1000232c:	6833      	ldr	r3, [r6, #0]
1000232e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10002330:	3630      	adds	r6, #48	; 0x30
10002332:	4b14      	ldr	r3, [pc, #80]	; (10002384 <z_init_static_threads+0x84>)
10002334:	429e      	cmp	r6, r3
10002336:	d3e7      	bcc.n	10002308 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
10002338:	f000 f9b4 	bl	100026a4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
1000233c:	4e10      	ldr	r6, [pc, #64]	; (10002380 <z_init_static_threads+0x80>)
1000233e:	e010      	b.n	10002362 <z_init_static_threads+0x62>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
10002340:	9306      	str	r3, [sp, #24]
10002342:	17db      	asrs	r3, r3, #31
10002344:	9307      	str	r3, [sp, #28]
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10002346:	9906      	ldr	r1, [sp, #24]
10002348:	0f8a      	lsrs	r2, r1, #30
1000234a:	009d      	lsls	r5, r3, #2
1000234c:	4315      	orrs	r5, r2
1000234e:	9a06      	ldr	r2, [sp, #24]
10002350:	9b07      	ldr	r3, [sp, #28]
10002352:	0094      	lsls	r4, r2, #2
10002354:	1912      	adds	r2, r2, r4
10002356:	416b      	adcs	r3, r5
10002358:	1892      	adds	r2, r2, r2
1000235a:	415b      	adcs	r3, r3
			schedule_new_thread(thread_data->init_thread,
1000235c:	f7ff ff92 	bl	10002284 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
10002360:	3630      	adds	r6, #48	; 0x30
10002362:	4b08      	ldr	r3, [pc, #32]	; (10002384 <z_init_static_threads+0x84>)
10002364:	429e      	cmp	r6, r3
10002366:	d207      	bcs.n	10002378 <z_init_static_threads+0x78>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10002368:	6a73      	ldr	r3, [r6, #36]	; 0x24
1000236a:	1c5a      	adds	r2, r3, #1
1000236c:	d0f8      	beq.n	10002360 <z_init_static_threads+0x60>
			schedule_new_thread(thread_data->init_thread,
1000236e:	6830      	ldr	r0, [r6, #0]
					    K_MSEC(thread_data->init_delay));
10002370:	2b00      	cmp	r3, #0
10002372:	dae5      	bge.n	10002340 <z_init_static_threads+0x40>
10002374:	2300      	movs	r3, #0
10002376:	e7e3      	b.n	10002340 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
10002378:	f000 fb8a 	bl	10002a90 <k_sched_unlock>
}
1000237c:	b009      	add	sp, #36	; 0x24
1000237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002380:	10006de0 	.word	0x10006de0
10002384:	10006e70 	.word	0x10006e70

10002388 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
10002388:	b5f0      	push	{r4, r5, r6, r7, lr}
1000238a:	46c6      	mov	lr, r8
1000238c:	b500      	push	{lr}
1000238e:	b082      	sub	sp, #8
10002390:	0004      	movs	r4, r0
10002392:	0016      	movs	r6, r2
10002394:	001d      	movs	r5, r3
	__asm__ volatile("mrs %0, PRIMASK;"
10002396:	f3ef 8710 	mrs	r7, PRIMASK
1000239a:	b672      	cpsid	i
1000239c:	003b      	movs	r3, r7

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
1000239e:	68c1      	ldr	r1, [r0, #12]
100023a0:	2900      	cmp	r1, #0
100023a2:	d115      	bne.n	100023d0 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
100023a4:	2900      	cmp	r1, #0
100023a6:	d153      	bne.n	10002450 <z_impl_k_mutex_lock+0xc8>
100023a8:	4a37      	ldr	r2, [pc, #220]	; (10002488 <z_impl_k_mutex_lock+0x100>)
100023aa:	6892      	ldr	r2, [r2, #8]
100023ac:	7b92      	ldrb	r2, [r2, #14]
100023ae:	b252      	sxtb	r2, r2
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
100023b0:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
100023b2:	3101      	adds	r1, #1
100023b4:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
100023b6:	4a34      	ldr	r2, [pc, #208]	; (10002488 <z_impl_k_mutex_lock+0x100>)
100023b8:	6892      	ldr	r2, [r2, #8]
100023ba:	60a2      	str	r2, [r4, #8]
	if (key != 0U) {
100023bc:	2b00      	cmp	r3, #0
100023be:	d102      	bne.n	100023c6 <z_impl_k_mutex_lock+0x3e>
	__asm__ volatile(
100023c0:	b662      	cpsie	i
100023c2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
100023c6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
100023c8:	b002      	add	sp, #8
100023ca:	bc80      	pop	{r7}
100023cc:	46b8      	mov	r8, r7
100023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
100023d0:	6882      	ldr	r2, [r0, #8]
100023d2:	482d      	ldr	r0, [pc, #180]	; (10002488 <z_impl_k_mutex_lock+0x100>)
100023d4:	6880      	ldr	r0, [r0, #8]
100023d6:	4282      	cmp	r2, r0
100023d8:	d0e4      	beq.n	100023a4 <z_impl_k_mutex_lock+0x1c>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
100023da:	0029      	movs	r1, r5
100023dc:	4331      	orrs	r1, r6
100023de:	d039      	beq.n	10002454 <z_impl_k_mutex_lock+0xcc>
	new_prio = new_prio_for_inheritance(_current->base.prio,
100023e0:	7b80      	ldrb	r0, [r0, #14]
100023e2:	b240      	sxtb	r0, r0
					    mutex->owner->base.prio);
100023e4:	230e      	movs	r3, #14
100023e6:	56d3      	ldrsb	r3, [r2, r3]
100023e8:	4698      	mov	r8, r3
	new_prio = new_prio_for_inheritance(_current->base.prio,
100023ea:	0019      	movs	r1, r3
100023ec:	f004 fa9f 	bl	1000692e <new_prio_for_inheritance>
100023f0:	0001      	movs	r1, r0
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
100023f2:	4580      	cmp	r8, r0
100023f4:	dc36      	bgt.n	10002464 <z_impl_k_mutex_lock+0xdc>
	bool resched = false;
100023f6:	2300      	movs	r3, #0
100023f8:	4698      	mov	r8, r3
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
100023fa:	4824      	ldr	r0, [pc, #144]	; (1000248c <z_impl_k_mutex_lock+0x104>)
100023fc:	9600      	str	r6, [sp, #0]
100023fe:	9501      	str	r5, [sp, #4]
10002400:	0022      	movs	r2, r4
10002402:	0039      	movs	r1, r7
10002404:	f000 fa94 	bl	10002930 <z_pend_curr>
	if (got_mutex == 0) {
10002408:	2800      	cmp	r0, #0
1000240a:	d0dd      	beq.n	100023c8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile("mrs %0, PRIMASK;"
1000240c:	f3ef 8610 	mrs	r6, PRIMASK
10002410:	b672      	cpsid	i
10002412:	0035      	movs	r5, r6
	if (likely(mutex->owner != NULL)) {
10002414:	68a3      	ldr	r3, [r4, #8]
10002416:	2b00      	cmp	r3, #0
10002418:	d02b      	beq.n	10002472 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
1000241a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000241c:	42a3      	cmp	r3, r4
1000241e:	d026      	beq.n	1000246e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
10002420:	2b00      	cmp	r3, #0
10002422:	d024      	beq.n	1000246e <z_impl_k_mutex_lock+0xe6>
10002424:	200e      	movs	r0, #14
10002426:	5618      	ldrsb	r0, [r3, r0]
10002428:	6921      	ldr	r1, [r4, #16]
1000242a:	f004 fa80 	bl	1000692e <new_prio_for_inheritance>
1000242e:	0001      	movs	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
10002430:	0020      	movs	r0, r4
10002432:	f004 fa87 	bl	10006944 <adjust_owner_prio>
10002436:	2800      	cmp	r0, #0
10002438:	d11e      	bne.n	10002478 <z_impl_k_mutex_lock+0xf0>
1000243a:	4643      	mov	r3, r8
1000243c:	2b00      	cmp	r3, #0
1000243e:	d11b      	bne.n	10002478 <z_impl_k_mutex_lock+0xf0>
	if (key != 0U) {
10002440:	2d00      	cmp	r5, #0
10002442:	d102      	bne.n	1000244a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
10002444:	b662      	cpsie	i
10002446:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
1000244a:	200b      	movs	r0, #11
1000244c:	4240      	negs	r0, r0
1000244e:	e7bb      	b.n	100023c8 <z_impl_k_mutex_lock+0x40>
					_current->base.prio :
10002450:	6922      	ldr	r2, [r4, #16]
10002452:	e7ad      	b.n	100023b0 <z_impl_k_mutex_lock+0x28>
	if (key != 0U) {
10002454:	2f00      	cmp	r7, #0
10002456:	d102      	bne.n	1000245e <z_impl_k_mutex_lock+0xd6>
	__asm__ volatile(
10002458:	b662      	cpsie	i
1000245a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
1000245e:	2010      	movs	r0, #16
10002460:	4240      	negs	r0, r0
10002462:	e7b1      	b.n	100023c8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
10002464:	0020      	movs	r0, r4
10002466:	f004 fa6d 	bl	10006944 <adjust_owner_prio>
1000246a:	4680      	mov	r8, r0
1000246c:	e7c5      	b.n	100023fa <z_impl_k_mutex_lock+0x72>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
1000246e:	6921      	ldr	r1, [r4, #16]
10002470:	e7de      	b.n	10002430 <z_impl_k_mutex_lock+0xa8>
	if (resched) {
10002472:	4643      	mov	r3, r8
10002474:	2b00      	cmp	r3, #0
10002476:	d0e3      	beq.n	10002440 <z_impl_k_mutex_lock+0xb8>
		z_reschedule(&lock, key);
10002478:	4804      	ldr	r0, [pc, #16]	; (1000248c <z_impl_k_mutex_lock+0x104>)
1000247a:	0031      	movs	r1, r6
1000247c:	f000 f8fa 	bl	10002674 <z_reschedule>
	return -EAGAIN;
10002480:	200b      	movs	r0, #11
10002482:	4240      	negs	r0, r0
10002484:	e7a0      	b.n	100023c8 <z_impl_k_mutex_lock+0x40>
10002486:	46c0      	nop			; (mov r8, r8)
10002488:	20000bf4 	.word	0x20000bf4
1000248c:	20000c18 	.word	0x20000c18

10002490 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
10002490:	b570      	push	{r4, r5, r6, lr}
10002492:	0004      	movs	r4, r0

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
10002494:	6883      	ldr	r3, [r0, #8]
10002496:	2b00      	cmp	r3, #0
10002498:	d02c      	beq.n	100024f4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
1000249a:	4a19      	ldr	r2, [pc, #100]	; (10002500 <z_impl_k_mutex_unlock+0x70>)
1000249c:	6892      	ldr	r2, [r2, #8]
1000249e:	4293      	cmp	r3, r2
100024a0:	d12b      	bne.n	100024fa <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
100024a2:	68c3      	ldr	r3, [r0, #12]
100024a4:	2b01      	cmp	r3, #1
100024a6:	d903      	bls.n	100024b0 <z_impl_k_mutex_unlock+0x20>
		mutex->lock_count--;
100024a8:	3b01      	subs	r3, #1
100024aa:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
100024ac:	2000      	movs	r0, #0
}
100024ae:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
100024b0:	f3ef 8610 	mrs	r6, PRIMASK
100024b4:	b672      	cpsid	i
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
100024b6:	6901      	ldr	r1, [r0, #16]
100024b8:	f004 fa44 	bl	10006944 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
100024bc:	0020      	movs	r0, r4
100024be:	f004 fb34 	bl	10006b2a <z_unpend_first_thread>
	mutex->owner = new_owner;
100024c2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
100024c4:	2800      	cmp	r0, #0
100024c6:	d00c      	beq.n	100024e2 <z_impl_k_mutex_unlock+0x52>
		mutex->owner_orig_prio = new_owner->base.prio;
100024c8:	230e      	movs	r3, #14
100024ca:	56c3      	ldrsb	r3, [r0, r3]
100024cc:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
100024ce:	2300      	movs	r3, #0
100024d0:	6783      	str	r3, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
100024d2:	f004 fa94 	bl	100069fe <z_ready_thread>
		z_reschedule(&lock, key);
100024d6:	480b      	ldr	r0, [pc, #44]	; (10002504 <z_impl_k_mutex_unlock+0x74>)
100024d8:	0031      	movs	r1, r6
100024da:	f000 f8cb 	bl	10002674 <z_reschedule>
	return 0;
100024de:	2000      	movs	r0, #0
100024e0:	e7e5      	b.n	100024ae <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count = 0U;
100024e2:	2300      	movs	r3, #0
100024e4:	60e3      	str	r3, [r4, #12]
	if (key != 0U) {
100024e6:	2e00      	cmp	r6, #0
100024e8:	d102      	bne.n	100024f0 <z_impl_k_mutex_unlock+0x60>
	__asm__ volatile(
100024ea:	b662      	cpsie	i
100024ec:	f3bf 8f6f 	isb	sy
	return 0;
100024f0:	2000      	movs	r0, #0
100024f2:	e7dc      	b.n	100024ae <z_impl_k_mutex_unlock+0x1e>
		return -EINVAL;
100024f4:	2016      	movs	r0, #22
100024f6:	4240      	negs	r0, r0
100024f8:	e7d9      	b.n	100024ae <z_impl_k_mutex_unlock+0x1e>
		return -EPERM;
100024fa:	2001      	movs	r0, #1
100024fc:	4240      	negs	r0, r0
100024fe:	e7d6      	b.n	100024ae <z_impl_k_mutex_unlock+0x1e>
10002500:	20000bf4 	.word	0x20000bf4
10002504:	20000c18 	.word	0x20000c18

10002508 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
10002508:	b570      	push	{r4, r5, r6, lr}
1000250a:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
1000250c:	f3ef 8510 	mrs	r5, PRIMASK
10002510:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
10002512:	f004 fb0a 	bl	10006b2a <z_unpend_first_thread>

	if (thread != NULL) {
10002516:	2800      	cmp	r0, #0
10002518:	d008      	beq.n	1000252c <z_impl_k_sem_give+0x24>
1000251a:	2300      	movs	r3, #0
1000251c:	6783      	str	r3, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
1000251e:	f004 fa6e 	bl	100069fe <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10002522:	4807      	ldr	r0, [pc, #28]	; (10002540 <z_impl_k_sem_give+0x38>)
10002524:	0029      	movs	r1, r5
10002526:	f000 f8a5 	bl	10002674 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
1000252a:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
1000252c:	68a3      	ldr	r3, [r4, #8]
1000252e:	68e2      	ldr	r2, [r4, #12]
10002530:	4293      	cmp	r3, r2
10002532:	d003      	beq.n	1000253c <z_impl_k_sem_give+0x34>
10002534:	2201      	movs	r2, #1
10002536:	189b      	adds	r3, r3, r2
10002538:	60a3      	str	r3, [r4, #8]
}
1000253a:	e7f2      	b.n	10002522 <z_impl_k_sem_give+0x1a>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
1000253c:	2200      	movs	r2, #0
1000253e:	e7fa      	b.n	10002536 <z_impl_k_sem_give+0x2e>
10002540:	20000c18 	.word	0x20000c18

10002544 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10002544:	b530      	push	{r4, r5, lr}
10002546:	b083      	sub	sp, #12
10002548:	f3ef 8110 	mrs	r1, PRIMASK
1000254c:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
1000254e:	6884      	ldr	r4, [r0, #8]
10002550:	2c00      	cmp	r4, #0
10002552:	d009      	beq.n	10002568 <z_impl_k_sem_take+0x24>
		sem->count--;
10002554:	3c01      	subs	r4, #1
10002556:	6084      	str	r4, [r0, #8]
	if (key != 0U) {
10002558:	2900      	cmp	r1, #0
1000255a:	d102      	bne.n	10002562 <z_impl_k_sem_take+0x1e>
	__asm__ volatile(
1000255c:	b662      	cpsie	i
1000255e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
10002562:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10002564:	b003      	add	sp, #12
10002566:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10002568:	001c      	movs	r4, r3
1000256a:	4314      	orrs	r4, r2
1000256c:	d007      	beq.n	1000257e <z_impl_k_sem_take+0x3a>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
1000256e:	4c08      	ldr	r4, [pc, #32]	; (10002590 <z_impl_k_sem_take+0x4c>)
10002570:	9200      	str	r2, [sp, #0]
10002572:	9301      	str	r3, [sp, #4]
10002574:	0002      	movs	r2, r0
10002576:	0020      	movs	r0, r4
10002578:	f000 f9da 	bl	10002930 <z_pend_curr>
	return ret;
1000257c:	e7f2      	b.n	10002564 <z_impl_k_sem_take+0x20>
	if (key != 0U) {
1000257e:	2900      	cmp	r1, #0
10002580:	d102      	bne.n	10002588 <z_impl_k_sem_take+0x44>
	__asm__ volatile(
10002582:	b662      	cpsie	i
10002584:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10002588:	2010      	movs	r0, #16
1000258a:	4240      	negs	r0, r0
1000258c:	e7ea      	b.n	10002564 <z_impl_k_sem_take+0x20>
1000258e:	46c0      	nop			; (mov r8, r8)
10002590:	20000c18 	.word	0x20000c18

10002594 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
10002594:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
10002596:	2b7f      	cmp	r3, #127	; 0x7f
10002598:	d80d      	bhi.n	100025b6 <sliceable+0x22>
	uint8_t state = thread->base.thread_state;
1000259a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
1000259c:	06db      	lsls	r3, r3, #27
1000259e:	d10c      	bne.n	100025ba <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
100025a0:	220e      	movs	r2, #14
100025a2:	5682      	ldrsb	r2, [r0, r2]
100025a4:	4b08      	ldr	r3, [pc, #32]	; (100025c8 <sliceable+0x34>)
100025a6:	681b      	ldr	r3, [r3, #0]
100025a8:	429a      	cmp	r2, r3
100025aa:	db08      	blt.n	100025be <sliceable+0x2a>
		&& !z_is_idle_thread_object(thread);
100025ac:	4b07      	ldr	r3, [pc, #28]	; (100025cc <sliceable+0x38>)
100025ae:	4298      	cmp	r0, r3
100025b0:	d007      	beq.n	100025c2 <sliceable+0x2e>
100025b2:	2001      	movs	r0, #1
100025b4:	e000      	b.n	100025b8 <sliceable+0x24>
100025b6:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
100025b8:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
100025ba:	2000      	movs	r0, #0
100025bc:	e7fc      	b.n	100025b8 <sliceable+0x24>
100025be:	2000      	movs	r0, #0
100025c0:	e7fa      	b.n	100025b8 <sliceable+0x24>
100025c2:	2000      	movs	r0, #0
100025c4:	e7f8      	b.n	100025b8 <sliceable+0x24>
100025c6:	46c0      	nop			; (mov r8, r8)
100025c8:	20000c1c 	.word	0x20000c1c
100025cc:	20000a30 	.word	0x20000a30

100025d0 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
100025d0:	b510      	push	{r4, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
100025d2:	0019      	movs	r1, r3
100025d4:	1c54      	adds	r4, r2, #1
100025d6:	d101      	bne.n	100025dc <add_thread_timeout+0xc>
100025d8:	3101      	adds	r1, #1
100025da:	d003      	beq.n	100025e4 <add_thread_timeout+0x14>
100025dc:	4902      	ldr	r1, [pc, #8]	; (100025e8 <add_thread_timeout+0x18>)
100025de:	3018      	adds	r0, #24
100025e0:	f000 fbfc 	bl	10002ddc <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
100025e4:	bd10      	pop	{r4, pc}
100025e6:	46c0      	nop			; (mov r8, r8)
100025e8:	10006a33 	.word	0x10006a33

100025ec <z_reset_time_slice>:
{
100025ec:	b510      	push	{r4, lr}
	int ret = slice_ticks;
100025ee:	4b08      	ldr	r3, [pc, #32]	; (10002610 <z_reset_time_slice+0x24>)
100025f0:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
100025f2:	2c00      	cmp	r4, #0
100025f4:	d100      	bne.n	100025f8 <z_reset_time_slice+0xc>
}
100025f6:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
100025f8:	f7ff fa3a 	bl	10001a70 <sys_clock_elapsed>
100025fc:	1824      	adds	r4, r4, r0
100025fe:	4b05      	ldr	r3, [pc, #20]	; (10002614 <z_reset_time_slice+0x28>)
10002600:	611c      	str	r4, [r3, #16]
	int ret = slice_ticks;
10002602:	4b03      	ldr	r3, [pc, #12]	; (10002610 <z_reset_time_slice+0x24>)
10002604:	6818      	ldr	r0, [r3, #0]
		z_set_timeout_expiry(slice_time(curr), false);
10002606:	2100      	movs	r1, #0
10002608:	f004 fae1 	bl	10006bce <z_set_timeout_expiry>
}
1000260c:	e7f3      	b.n	100025f6 <z_reset_time_slice+0xa>
1000260e:	46c0      	nop			; (mov r8, r8)
10002610:	20000c20 	.word	0x20000c20
10002614:	20000bf4 	.word	0x20000bf4

10002618 <k_sched_time_slice_set>:
{
10002618:	b570      	push	{r4, r5, r6, lr}
1000261a:	0004      	movs	r4, r0
1000261c:	000e      	movs	r6, r1
	LOCKED(&sched_spinlock) {
1000261e:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10002620:	f3ef 8510 	mrs	r5, PRIMASK
10002624:	b672      	cpsid	i
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
10002626:	e00d      	b.n	10002644 <k_sched_time_slice_set+0x2c>
			slice_ticks = MAX(2, slice_ticks);
10002628:	4a0f      	ldr	r2, [pc, #60]	; (10002668 <k_sched_time_slice_set+0x50>)
1000262a:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
1000262c:	4b0f      	ldr	r3, [pc, #60]	; (1000266c <k_sched_time_slice_set+0x54>)
1000262e:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
10002630:	4b0f      	ldr	r3, [pc, #60]	; (10002670 <k_sched_time_slice_set+0x58>)
10002632:	6898      	ldr	r0, [r3, #8]
10002634:	f7ff ffda 	bl	100025ec <z_reset_time_slice>
	if (key != 0U) {
10002638:	2d00      	cmp	r5, #0
1000263a:	d102      	bne.n	10002642 <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
1000263c:	b662      	cpsie	i
1000263e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
10002642:	2301      	movs	r3, #1
10002644:	2b00      	cmp	r3, #0
10002646:	d10d      	bne.n	10002664 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
10002648:	4b09      	ldr	r3, [pc, #36]	; (10002670 <k_sched_time_slice_set+0x58>)
1000264a:	2200      	movs	r2, #0
1000264c:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
1000264e:	00a3      	lsls	r3, r4, #2
10002650:	191b      	adds	r3, r3, r4
10002652:	005b      	lsls	r3, r3, #1
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10002654:	4a04      	ldr	r2, [pc, #16]	; (10002668 <k_sched_time_slice_set+0x50>)
10002656:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10002658:	2c00      	cmp	r4, #0
1000265a:	dde7      	ble.n	1000262c <k_sched_time_slice_set+0x14>
			slice_ticks = MAX(2, slice_ticks);
1000265c:	2b02      	cmp	r3, #2
1000265e:	dae3      	bge.n	10002628 <k_sched_time_slice_set+0x10>
10002660:	2302      	movs	r3, #2
10002662:	e7e1      	b.n	10002628 <k_sched_time_slice_set+0x10>
}
10002664:	bd70      	pop	{r4, r5, r6, pc}
10002666:	46c0      	nop			; (mov r8, r8)
10002668:	20000c20 	.word	0x20000c20
1000266c:	20000c1c 	.word	0x20000c1c
10002670:	20000bf4 	.word	0x20000bf4

10002674 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
10002674:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10002676:	2900      	cmp	r1, #0
10002678:	d10c      	bne.n	10002694 <z_reschedule+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
1000267a:	f3ef 8305 	mrs	r3, IPSR
1000267e:	2b00      	cmp	r3, #0
10002680:	d108      	bne.n	10002694 <z_reschedule+0x20>
	new_thread = _kernel.ready_q.cache;
10002682:	4b07      	ldr	r3, [pc, #28]	; (100026a0 <z_reschedule+0x2c>)
10002684:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
10002686:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
10002688:	429a      	cmp	r2, r3
1000268a:	d003      	beq.n	10002694 <z_reschedule+0x20>
	ret = arch_swap(key);
1000268c:	0008      	movs	r0, r1
1000268e:	f7fe fcc1 	bl	10001014 <arch_swap>
		z_swap(lock, key);
10002692:	e004      	b.n	1000269e <z_reschedule+0x2a>
	if (key != 0U) {
10002694:	2900      	cmp	r1, #0
10002696:	d102      	bne.n	1000269e <z_reschedule+0x2a>
	__asm__ volatile(
10002698:	b662      	cpsie	i
1000269a:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
1000269e:	bd10      	pop	{r4, pc}
100026a0:	20000bf4 	.word	0x20000bf4

100026a4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
100026a4:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
100026a6:	f3ef 8110 	mrs	r1, PRIMASK
100026aa:	b672      	cpsid	i
100026ac:	e000      	b.n	100026b0 <k_sched_lock+0xc>
100026ae:	2301      	movs	r3, #1
100026b0:	2b00      	cmp	r3, #0
100026b2:	d10a      	bne.n	100026ca <k_sched_lock+0x26>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
100026b4:	4b05      	ldr	r3, [pc, #20]	; (100026cc <k_sched_lock+0x28>)
100026b6:	689a      	ldr	r2, [r3, #8]
100026b8:	7bd3      	ldrb	r3, [r2, #15]
100026ba:	3b01      	subs	r3, #1
100026bc:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
100026be:	2900      	cmp	r1, #0
100026c0:	d1f5      	bne.n	100026ae <k_sched_lock+0xa>
	__asm__ volatile(
100026c2:	b662      	cpsie	i
100026c4:	f3bf 8f6f 	isb	sy
100026c8:	e7f1      	b.n	100026ae <k_sched_lock+0xa>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
100026ca:	4770      	bx	lr
100026cc:	20000bf4 	.word	0x20000bf4

100026d0 <update_cache>:
{
100026d0:	b570      	push	{r4, r5, r6, lr}
100026d2:	0005      	movs	r5, r0
	return _priq_run_best(curr_cpu_runq());
100026d4:	4810      	ldr	r0, [pc, #64]	; (10002718 <update_cache+0x48>)
100026d6:	f004 f98b 	bl	100069f0 <z_priq_dumb_best>
100026da:	1e04      	subs	r4, r0, #0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
100026dc:	d00f      	beq.n	100026fe <update_cache+0x2e>
	if (preempt_ok != 0) {
100026de:	2d00      	cmp	r5, #0
100026e0:	d110      	bne.n	10002704 <update_cache+0x34>
	if (z_is_thread_prevented_from_running(_current)) {
100026e2:	4b0e      	ldr	r3, [pc, #56]	; (1000271c <update_cache+0x4c>)
100026e4:	689a      	ldr	r2, [r3, #8]
	uint8_t state = thread->base.thread_state;
100026e6:	7b53      	ldrb	r3, [r2, #13]
100026e8:	06db      	lsls	r3, r3, #27
100026ea:	d10b      	bne.n	10002704 <update_cache+0x34>
	return node->next != NULL;
100026ec:	69a3      	ldr	r3, [r4, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
100026ee:	2b00      	cmp	r3, #0
100026f0:	d108      	bne.n	10002704 <update_cache+0x34>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
100026f2:	89d3      	ldrh	r3, [r2, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
100026f4:	2b7f      	cmp	r3, #127	; 0x7f
100026f6:	d905      	bls.n	10002704 <update_cache+0x34>
		_kernel.ready_q.cache = _current;
100026f8:	4b08      	ldr	r3, [pc, #32]	; (1000271c <update_cache+0x4c>)
100026fa:	619a      	str	r2, [r3, #24]
100026fc:	e00b      	b.n	10002716 <update_cache+0x46>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
100026fe:	4b07      	ldr	r3, [pc, #28]	; (1000271c <update_cache+0x4c>)
10002700:	68dc      	ldr	r4, [r3, #12]
10002702:	e7ec      	b.n	100026de <update_cache+0xe>
		if (thread != _current) {
10002704:	4b05      	ldr	r3, [pc, #20]	; (1000271c <update_cache+0x4c>)
10002706:	689b      	ldr	r3, [r3, #8]
10002708:	42a3      	cmp	r3, r4
1000270a:	d002      	beq.n	10002712 <update_cache+0x42>
			z_reset_time_slice(thread);
1000270c:	0020      	movs	r0, r4
1000270e:	f7ff ff6d 	bl	100025ec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
10002712:	4b02      	ldr	r3, [pc, #8]	; (1000271c <update_cache+0x4c>)
10002714:	619c      	str	r4, [r3, #24]
}
10002716:	bd70      	pop	{r4, r5, r6, pc}
10002718:	20000c10 	.word	0x20000c10
1000271c:	20000bf4 	.word	0x20000bf4

10002720 <move_thread_to_end_of_prio_q>:
{
10002720:	b570      	push	{r4, r5, r6, lr}
10002722:	0005      	movs	r5, r0
	return (thread->base.thread_state & state) != 0U;
10002724:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
10002726:	230d      	movs	r3, #13
10002728:	56c3      	ldrsb	r3, [r0, r3]
1000272a:	2b00      	cmp	r3, #0
1000272c:	db0b      	blt.n	10002746 <move_thread_to_end_of_prio_q+0x26>
	thread->base.thread_state |= _THREAD_QUEUED;
1000272e:	7b6a      	ldrb	r2, [r5, #13]
10002730:	2380      	movs	r3, #128	; 0x80
10002732:	425b      	negs	r3, r3
10002734:	4313      	orrs	r3, r2
10002736:	736b      	strb	r3, [r5, #13]
	return list->head == list;
10002738:	4b1a      	ldr	r3, [pc, #104]	; (100027a4 <move_thread_to_end_of_prio_q+0x84>)
1000273a:	69dc      	ldr	r4, [r3, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000273c:	331c      	adds	r3, #28
1000273e:	429c      	cmp	r4, r3
10002740:	d110      	bne.n	10002764 <move_thread_to_end_of_prio_q+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002742:	2400      	movs	r4, #0
10002744:	e00e      	b.n	10002764 <move_thread_to_end_of_prio_q+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002746:	237f      	movs	r3, #127	; 0x7f
10002748:	4013      	ands	r3, r2
1000274a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
1000274c:	4816      	ldr	r0, [pc, #88]	; (100027a8 <move_thread_to_end_of_prio_q+0x88>)
1000274e:	0029      	movs	r1, r5
10002750:	f004 f938 	bl	100069c4 <z_priq_dumb_remove>
}
10002754:	e7eb      	b.n	1000272e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10002756:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
10002758:	606b      	str	r3, [r5, #4]
	node->next = successor;
1000275a:	602c      	str	r4, [r5, #0]
	prev->next = node;
1000275c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
1000275e:	6065      	str	r5, [r4, #4]
}
10002760:	e018      	b.n	10002794 <move_thread_to_end_of_prio_q+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002762:	2400      	movs	r4, #0
10002764:	2c00      	cmp	r4, #0
10002766:	d00d      	beq.n	10002784 <move_thread_to_end_of_prio_q+0x64>
		if (z_sched_prio_cmp(thread, t) > 0) {
10002768:	0021      	movs	r1, r4
1000276a:	0028      	movs	r0, r5
1000276c:	f004 f910 	bl	10006990 <z_sched_prio_cmp>
10002770:	2800      	cmp	r0, #0
10002772:	dcf0      	bgt.n	10002756 <move_thread_to_end_of_prio_q+0x36>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002774:	2c00      	cmp	r4, #0
10002776:	d0f5      	beq.n	10002764 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
10002778:	4a0a      	ldr	r2, [pc, #40]	; (100027a4 <move_thread_to_end_of_prio_q+0x84>)
1000277a:	6a12      	ldr	r2, [r2, #32]
1000277c:	4294      	cmp	r4, r2
1000277e:	d0f0      	beq.n	10002762 <move_thread_to_end_of_prio_q+0x42>
10002780:	6824      	ldr	r4, [r4, #0]
10002782:	e7ef      	b.n	10002764 <move_thread_to_end_of_prio_q+0x44>
	sys_dnode_t *const tail = list->tail;
10002784:	4b07      	ldr	r3, [pc, #28]	; (100027a4 <move_thread_to_end_of_prio_q+0x84>)
10002786:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
10002788:	0019      	movs	r1, r3
1000278a:	311c      	adds	r1, #28
1000278c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
1000278e:	606a      	str	r2, [r5, #4]
	tail->next = node;
10002790:	6015      	str	r5, [r2, #0]
	list->tail = node;
10002792:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
10002794:	4b03      	ldr	r3, [pc, #12]	; (100027a4 <move_thread_to_end_of_prio_q+0x84>)
10002796:	6898      	ldr	r0, [r3, #8]
10002798:	1b40      	subs	r0, r0, r5
1000279a:	4243      	negs	r3, r0
1000279c:	4158      	adcs	r0, r3
1000279e:	f7ff ff97 	bl	100026d0 <update_cache>
}
100027a2:	bd70      	pop	{r4, r5, r6, pc}
100027a4:	20000bf4 	.word	0x20000bf4
100027a8:	20000c10 	.word	0x20000c10

100027ac <slice_expired_locked>:
{
100027ac:	b570      	push	{r4, r5, r6, lr}
100027ae:	0004      	movs	r4, r0
	struct k_thread *curr = _current;
100027b0:	4b06      	ldr	r3, [pc, #24]	; (100027cc <slice_expired_locked+0x20>)
100027b2:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
100027b4:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
100027b6:	06db      	lsls	r3, r3, #27
100027b8:	d004      	beq.n	100027c4 <slice_expired_locked+0x18>
	z_reset_time_slice(curr);
100027ba:	0028      	movs	r0, r5
100027bc:	f7ff ff16 	bl	100025ec <z_reset_time_slice>
}
100027c0:	0020      	movs	r0, r4
100027c2:	bd70      	pop	{r4, r5, r6, pc}
		move_thread_to_end_of_prio_q(curr);
100027c4:	0028      	movs	r0, r5
100027c6:	f7ff ffab 	bl	10002720 <move_thread_to_end_of_prio_q>
100027ca:	e7f6      	b.n	100027ba <slice_expired_locked+0xe>
100027cc:	20000bf4 	.word	0x20000bf4

100027d0 <z_time_slice>:
{
100027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100027d2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100027d4:	f3ef 8510 	mrs	r5, PRIMASK
100027d8:	b672      	cpsid	i
100027da:	002e      	movs	r6, r5
	if (pending_current == _current) {
100027dc:	4b17      	ldr	r3, [pc, #92]	; (1000283c <z_time_slice+0x6c>)
100027de:	6898      	ldr	r0, [r3, #8]
100027e0:	4b17      	ldr	r3, [pc, #92]	; (10002840 <z_time_slice+0x70>)
100027e2:	681b      	ldr	r3, [r3, #0]
100027e4:	4298      	cmp	r0, r3
100027e6:	d012      	beq.n	1000280e <z_time_slice+0x3e>
	pending_current = NULL;
100027e8:	4b15      	ldr	r3, [pc, #84]	; (10002840 <z_time_slice+0x70>)
100027ea:	2200      	movs	r2, #0
100027ec:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
100027ee:	4b15      	ldr	r3, [pc, #84]	; (10002844 <z_time_slice+0x74>)
100027f0:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
100027f2:	2b00      	cmp	r3, #0
100027f4:	d018      	beq.n	10002828 <z_time_slice+0x58>
100027f6:	f7ff fecd 	bl	10002594 <sliceable>
100027fa:	2800      	cmp	r0, #0
100027fc:	d014      	beq.n	10002828 <z_time_slice+0x58>
		if (ticks >= _current_cpu->slice_ticks) {
100027fe:	4b0f      	ldr	r3, [pc, #60]	; (1000283c <z_time_slice+0x6c>)
10002800:	691b      	ldr	r3, [r3, #16]
10002802:	42a3      	cmp	r3, r4
10002804:	dd0b      	ble.n	1000281e <z_time_slice+0x4e>
			_current_cpu->slice_ticks -= ticks;
10002806:	4a0d      	ldr	r2, [pc, #52]	; (1000283c <z_time_slice+0x6c>)
10002808:	1b1b      	subs	r3, r3, r4
1000280a:	6113      	str	r3, [r2, #16]
1000280c:	e00f      	b.n	1000282e <z_time_slice+0x5e>
		z_reset_time_slice(_current);
1000280e:	f7ff feed 	bl	100025ec <z_reset_time_slice>
	if (key != 0U) {
10002812:	2d00      	cmp	r5, #0
10002814:	d110      	bne.n	10002838 <z_time_slice+0x68>
	__asm__ volatile(
10002816:	b662      	cpsie	i
10002818:	f3bf 8f6f 	isb	sy
		return;
1000281c:	e00c      	b.n	10002838 <z_time_slice+0x68>
			key = slice_expired_locked(key);
1000281e:	0028      	movs	r0, r5
10002820:	f7ff ffc4 	bl	100027ac <slice_expired_locked>
10002824:	0006      	movs	r6, r0
10002826:	e002      	b.n	1000282e <z_time_slice+0x5e>
		_current_cpu->slice_ticks = 0;
10002828:	4b04      	ldr	r3, [pc, #16]	; (1000283c <z_time_slice+0x6c>)
1000282a:	2200      	movs	r2, #0
1000282c:	611a      	str	r2, [r3, #16]
	if (key != 0U) {
1000282e:	2e00      	cmp	r6, #0
10002830:	d102      	bne.n	10002838 <z_time_slice+0x68>
	__asm__ volatile(
10002832:	b662      	cpsie	i
10002834:	f3bf 8f6f 	isb	sy
}
10002838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000283a:	46c0      	nop			; (mov r8, r8)
1000283c:	20000bf4 	.word	0x20000bf4
10002840:	20000c18 	.word	0x20000c18
10002844:	20000c20 	.word	0x20000c20

10002848 <ready_thread>:
{
10002848:	b570      	push	{r4, r5, r6, lr}
1000284a:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
1000284c:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
1000284e:	230d      	movs	r3, #13
10002850:	56c3      	ldrsb	r3, [r0, r3]
10002852:	2b00      	cmp	r3, #0
10002854:	db04      	blt.n	10002860 <ready_thread+0x18>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10002856:	06d3      	lsls	r3, r2, #27
10002858:	d102      	bne.n	10002860 <ready_thread+0x18>
	return node->next != NULL;
1000285a:	6986      	ldr	r6, [r0, #24]
1000285c:	2e00      	cmp	r6, #0
1000285e:	d000      	beq.n	10002862 <ready_thread+0x1a>
}
10002860:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
10002862:	2380      	movs	r3, #128	; 0x80
10002864:	425b      	negs	r3, r3
10002866:	4313      	orrs	r3, r2
10002868:	7343      	strb	r3, [r0, #13]
	return list->head == list;
1000286a:	4b15      	ldr	r3, [pc, #84]	; (100028c0 <ready_thread+0x78>)
1000286c:	69dd      	ldr	r5, [r3, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000286e:	331c      	adds	r3, #28
10002870:	429d      	cmp	r5, r3
10002872:	d108      	bne.n	10002886 <ready_thread+0x3e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002874:	0035      	movs	r5, r6
10002876:	e006      	b.n	10002886 <ready_thread+0x3e>
	sys_dnode_t *const prev = successor->prev;
10002878:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
1000287a:	6063      	str	r3, [r4, #4]
	node->next = successor;
1000287c:	6025      	str	r5, [r4, #0]
	prev->next = node;
1000287e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10002880:	606c      	str	r4, [r5, #4]
}
10002882:	e018      	b.n	100028b6 <ready_thread+0x6e>
10002884:	0035      	movs	r5, r6
10002886:	2d00      	cmp	r5, #0
10002888:	d00d      	beq.n	100028a6 <ready_thread+0x5e>
		if (z_sched_prio_cmp(thread, t) > 0) {
1000288a:	0029      	movs	r1, r5
1000288c:	0020      	movs	r0, r4
1000288e:	f004 f87f 	bl	10006990 <z_sched_prio_cmp>
10002892:	2800      	cmp	r0, #0
10002894:	dcf0      	bgt.n	10002878 <ready_thread+0x30>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002896:	2d00      	cmp	r5, #0
10002898:	d0f5      	beq.n	10002886 <ready_thread+0x3e>
	return (node == list->tail) ? NULL : node->next;
1000289a:	4a09      	ldr	r2, [pc, #36]	; (100028c0 <ready_thread+0x78>)
1000289c:	6a12      	ldr	r2, [r2, #32]
1000289e:	4295      	cmp	r5, r2
100028a0:	d0f0      	beq.n	10002884 <ready_thread+0x3c>
100028a2:	682d      	ldr	r5, [r5, #0]
100028a4:	e7ef      	b.n	10002886 <ready_thread+0x3e>
	sys_dnode_t *const tail = list->tail;
100028a6:	4b06      	ldr	r3, [pc, #24]	; (100028c0 <ready_thread+0x78>)
100028a8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
100028aa:	0019      	movs	r1, r3
100028ac:	311c      	adds	r1, #28
100028ae:	6021      	str	r1, [r4, #0]
	node->prev = tail;
100028b0:	6062      	str	r2, [r4, #4]
	tail->next = node;
100028b2:	6014      	str	r4, [r2, #0]
	list->tail = node;
100028b4:	621c      	str	r4, [r3, #32]
		update_cache(0);
100028b6:	2000      	movs	r0, #0
100028b8:	f7ff ff0a 	bl	100026d0 <update_cache>
}
100028bc:	e7d0      	b.n	10002860 <ready_thread+0x18>
100028be:	46c0      	nop			; (mov r8, r8)
100028c0:	20000bf4 	.word	0x20000bf4

100028c4 <z_sched_start>:
{
100028c4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100028c6:	f3ef 8410 	mrs	r4, PRIMASK
100028ca:	b672      	cpsid	i
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
100028cc:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
100028ce:	0759      	lsls	r1, r3, #29
100028d0:	d405      	bmi.n	100028de <z_sched_start+0x1a>
	if (key != 0U) {
100028d2:	2c00      	cmp	r4, #0
100028d4:	d10c      	bne.n	100028f0 <z_sched_start+0x2c>
	__asm__ volatile(
100028d6:	b662      	cpsie	i
100028d8:	f3bf 8f6f 	isb	sy
		return;
100028dc:	e008      	b.n	100028f0 <z_sched_start+0x2c>
	thread->base.thread_state &= ~_THREAD_PRESTART;
100028de:	2204      	movs	r2, #4
100028e0:	4393      	bics	r3, r2
100028e2:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
100028e4:	f7ff ffb0 	bl	10002848 <ready_thread>
	z_reschedule(&sched_spinlock, key);
100028e8:	4802      	ldr	r0, [pc, #8]	; (100028f4 <z_sched_start+0x30>)
100028ea:	0021      	movs	r1, r4
100028ec:	f7ff fec2 	bl	10002674 <z_reschedule>
}
100028f0:	bd10      	pop	{r4, pc}
100028f2:	46c0      	nop			; (mov r8, r8)
100028f4:	20000c24 	.word	0x20000c24

100028f8 <unready_thread>:
{
100028f8:	b510      	push	{r4, lr}
100028fa:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
100028fc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
100028fe:	230d      	movs	r3, #13
10002900:	56c3      	ldrsb	r3, [r0, r3]
10002902:	2b00      	cmp	r3, #0
10002904:	db07      	blt.n	10002916 <unready_thread+0x1e>
	update_cache(thread == _current);
10002906:	4b08      	ldr	r3, [pc, #32]	; (10002928 <unready_thread+0x30>)
10002908:	6898      	ldr	r0, [r3, #8]
1000290a:	1b00      	subs	r0, r0, r4
1000290c:	4243      	negs	r3, r0
1000290e:	4158      	adcs	r0, r3
10002910:	f7ff fede 	bl	100026d0 <update_cache>
}
10002914:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002916:	237f      	movs	r3, #127	; 0x7f
10002918:	4013      	ands	r3, r2
1000291a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
1000291c:	4803      	ldr	r0, [pc, #12]	; (1000292c <unready_thread+0x34>)
1000291e:	0021      	movs	r1, r4
10002920:	f004 f850 	bl	100069c4 <z_priq_dumb_remove>
}
10002924:	e7ef      	b.n	10002906 <unready_thread+0xe>
10002926:	46c0      	nop			; (mov r8, r8)
10002928:	20000bf4 	.word	0x20000bf4
1000292c:	20000c10 	.word	0x20000c10

10002930 <z_pend_curr>:
{
10002930:	b510      	push	{r4, lr}
10002932:	000c      	movs	r4, r1
10002934:	0011      	movs	r1, r2
	pending_current = _current;
10002936:	4b08      	ldr	r3, [pc, #32]	; (10002958 <z_pend_curr+0x28>)
10002938:	6898      	ldr	r0, [r3, #8]
1000293a:	4a08      	ldr	r2, [pc, #32]	; (1000295c <z_pend_curr+0x2c>)
1000293c:	6010      	str	r0, [r2, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
1000293e:	f3ef 8210 	mrs	r2, PRIMASK
10002942:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10002944:	6898      	ldr	r0, [r3, #8]
10002946:	9a02      	ldr	r2, [sp, #8]
10002948:	9b03      	ldr	r3, [sp, #12]
1000294a:	f004 f8e2 	bl	10006b12 <pend_locked>
1000294e:	0020      	movs	r0, r4
10002950:	f7fe fb60 	bl	10001014 <arch_swap>
}
10002954:	bd10      	pop	{r4, pc}
10002956:	46c0      	nop			; (mov r8, r8)
10002958:	20000bf4 	.word	0x20000bf4
1000295c:	20000c18 	.word	0x20000c18

10002960 <z_set_prio>:
{
10002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002962:	46ce      	mov	lr, r9
10002964:	4647      	mov	r7, r8
10002966:	b580      	push	{r7, lr}
10002968:	0005      	movs	r5, r0
1000296a:	000f      	movs	r7, r1
	LOCKED(&sched_spinlock) {
1000296c:	2300      	movs	r3, #0
1000296e:	f3ef 8610 	mrs	r6, PRIMASK
10002972:	b672      	cpsid	i
	bool need_sched = 0;
10002974:	2000      	movs	r0, #0
10002976:	e02b      	b.n	100029d0 <z_set_prio+0x70>
	sys_dnode_t *const prev = successor->prev;
10002978:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
1000297a:	606b      	str	r3, [r5, #4]
	node->next = successor;
1000297c:	602c      	str	r4, [r5, #0]
	prev->next = node;
1000297e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
10002980:	6065      	str	r5, [r4, #4]
}
10002982:	e018      	b.n	100029b6 <z_set_prio+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002984:	4644      	mov	r4, r8
10002986:	2c00      	cmp	r4, #0
10002988:	d00d      	beq.n	100029a6 <z_set_prio+0x46>
		if (z_sched_prio_cmp(thread, t) > 0) {
1000298a:	0021      	movs	r1, r4
1000298c:	0028      	movs	r0, r5
1000298e:	f003 ffff 	bl	10006990 <z_sched_prio_cmp>
10002992:	2800      	cmp	r0, #0
10002994:	dcf0      	bgt.n	10002978 <z_set_prio+0x18>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002996:	2c00      	cmp	r4, #0
10002998:	d0f5      	beq.n	10002986 <z_set_prio+0x26>
	return (node == list->tail) ? NULL : node->next;
1000299a:	4a1e      	ldr	r2, [pc, #120]	; (10002a14 <z_set_prio+0xb4>)
1000299c:	6a12      	ldr	r2, [r2, #32]
1000299e:	4294      	cmp	r4, r2
100029a0:	d0f0      	beq.n	10002984 <z_set_prio+0x24>
100029a2:	6824      	ldr	r4, [r4, #0]
100029a4:	e7ef      	b.n	10002986 <z_set_prio+0x26>
	sys_dnode_t *const tail = list->tail;
100029a6:	4b1b      	ldr	r3, [pc, #108]	; (10002a14 <z_set_prio+0xb4>)
100029a8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
100029aa:	0019      	movs	r1, r3
100029ac:	311c      	adds	r1, #28
100029ae:	6029      	str	r1, [r5, #0]
	node->prev = tail;
100029b0:	606a      	str	r2, [r5, #4]
	tail->next = node;
100029b2:	6015      	str	r5, [r2, #0]
	list->tail = node;
100029b4:	621d      	str	r5, [r3, #32]
			update_cache(1);
100029b6:	2001      	movs	r0, #1
100029b8:	f7ff fe8a 	bl	100026d0 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100029bc:	2001      	movs	r0, #1
100029be:	e001      	b.n	100029c4 <z_set_prio+0x64>
			thread->base.prio = prio;
100029c0:	73af      	strb	r7, [r5, #14]
100029c2:	2000      	movs	r0, #0
	if (key != 0U) {
100029c4:	2e00      	cmp	r6, #0
100029c6:	d102      	bne.n	100029ce <z_set_prio+0x6e>
	__asm__ volatile(
100029c8:	b662      	cpsie	i
100029ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
100029ce:	2301      	movs	r3, #1
100029d0:	2b00      	cmp	r3, #0
100029d2:	d11b      	bne.n	10002a0c <z_set_prio+0xac>
	uint8_t state = thread->base.thread_state;
100029d4:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100029d6:	06da      	lsls	r2, r3, #27
100029d8:	d1f2      	bne.n	100029c0 <z_set_prio+0x60>
	return node->next != NULL;
100029da:	69aa      	ldr	r2, [r5, #24]
100029dc:	4690      	mov	r8, r2
100029de:	2a00      	cmp	r2, #0
100029e0:	d1ee      	bne.n	100029c0 <z_set_prio+0x60>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100029e2:	327f      	adds	r2, #127	; 0x7f
100029e4:	4013      	ands	r3, r2
100029e6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
100029e8:	4b0b      	ldr	r3, [pc, #44]	; (10002a18 <z_set_prio+0xb8>)
100029ea:	0029      	movs	r1, r5
100029ec:	4699      	mov	r9, r3
100029ee:	0018      	movs	r0, r3
100029f0:	f003 ffe8 	bl	100069c4 <z_priq_dumb_remove>
				thread->base.prio = prio;
100029f4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
100029f6:	7b6a      	ldrb	r2, [r5, #13]
100029f8:	2380      	movs	r3, #128	; 0x80
100029fa:	425b      	negs	r3, r3
100029fc:	4313      	orrs	r3, r2
100029fe:	736b      	strb	r3, [r5, #13]
	return list->head == list;
10002a00:	464b      	mov	r3, r9
10002a02:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002a04:	454c      	cmp	r4, r9
10002a06:	d1be      	bne.n	10002986 <z_set_prio+0x26>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002a08:	4644      	mov	r4, r8
10002a0a:	e7bc      	b.n	10002986 <z_set_prio+0x26>
}
10002a0c:	bcc0      	pop	{r6, r7}
10002a0e:	46b9      	mov	r9, r7
10002a10:	46b0      	mov	r8, r6
10002a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002a14:	20000bf4 	.word	0x20000bf4
10002a18:	20000c10 	.word	0x20000c10

10002a1c <z_impl_k_thread_suspend>:
{
10002a1c:	b570      	push	{r4, r5, r6, lr}
10002a1e:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10002a20:	3018      	adds	r0, #24
10002a22:	f004 f8ba 	bl	10006b9a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
10002a26:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10002a28:	f3ef 8510 	mrs	r5, PRIMASK
10002a2c:	b672      	cpsid	i
10002a2e:	e008      	b.n	10002a42 <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002a30:	237f      	movs	r3, #127	; 0x7f
10002a32:	4013      	ands	r3, r2
10002a34:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
10002a36:	4814      	ldr	r0, [pc, #80]	; (10002a88 <z_impl_k_thread_suspend+0x6c>)
10002a38:	0021      	movs	r1, r4
10002a3a:	f003 ffc3 	bl	100069c4 <z_priq_dumb_remove>
}
10002a3e:	e007      	b.n	10002a50 <z_impl_k_thread_suspend+0x34>
	LOCKED(&sched_spinlock) {
10002a40:	2301      	movs	r3, #1
10002a42:	2b00      	cmp	r3, #0
10002a44:	d115      	bne.n	10002a72 <z_impl_k_thread_suspend+0x56>
	return (thread->base.thread_state & state) != 0U;
10002a46:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
10002a48:	230d      	movs	r3, #13
10002a4a:	56e3      	ldrsb	r3, [r4, r3]
10002a4c:	2b00      	cmp	r3, #0
10002a4e:	dbef      	blt.n	10002a30 <z_impl_k_thread_suspend+0x14>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10002a50:	7b63      	ldrb	r3, [r4, #13]
10002a52:	2210      	movs	r2, #16
10002a54:	4313      	orrs	r3, r2
10002a56:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
10002a58:	4b0c      	ldr	r3, [pc, #48]	; (10002a8c <z_impl_k_thread_suspend+0x70>)
10002a5a:	6898      	ldr	r0, [r3, #8]
10002a5c:	1b00      	subs	r0, r0, r4
10002a5e:	4243      	negs	r3, r0
10002a60:	4158      	adcs	r0, r3
10002a62:	f7ff fe35 	bl	100026d0 <update_cache>
	if (key != 0U) {
10002a66:	2d00      	cmp	r5, #0
10002a68:	d1ea      	bne.n	10002a40 <z_impl_k_thread_suspend+0x24>
	__asm__ volatile(
10002a6a:	b662      	cpsie	i
10002a6c:	f3bf 8f6f 	isb	sy
10002a70:	e7e6      	b.n	10002a40 <z_impl_k_thread_suspend+0x24>
	if (thread == _current) {
10002a72:	4b06      	ldr	r3, [pc, #24]	; (10002a8c <z_impl_k_thread_suspend+0x70>)
10002a74:	689b      	ldr	r3, [r3, #8]
10002a76:	42a3      	cmp	r3, r4
10002a78:	d000      	beq.n	10002a7c <z_impl_k_thread_suspend+0x60>
}
10002a7a:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile("mrs %0, PRIMASK;"
10002a7c:	f3ef 8010 	mrs	r0, PRIMASK
10002a80:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10002a82:	f003 ff8f 	bl	100069a4 <z_reschedule_irqlock>
10002a86:	e7f8      	b.n	10002a7a <z_impl_k_thread_suspend+0x5e>
10002a88:	20000c10 	.word	0x20000c10
10002a8c:	20000bf4 	.word	0x20000bf4

10002a90 <k_sched_unlock>:

void k_sched_unlock(void)
{
10002a90:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
10002a92:	2300      	movs	r3, #0
10002a94:	f3ef 8410 	mrs	r4, PRIMASK
10002a98:	b672      	cpsid	i
10002a9a:	e000      	b.n	10002a9e <k_sched_unlock+0xe>
10002a9c:	2301      	movs	r3, #1
10002a9e:	2b00      	cmp	r3, #0
10002aa0:	d10d      	bne.n	10002abe <k_sched_unlock+0x2e>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
10002aa2:	4b0a      	ldr	r3, [pc, #40]	; (10002acc <k_sched_unlock+0x3c>)
10002aa4:	689a      	ldr	r2, [r3, #8]
10002aa6:	7bd3      	ldrb	r3, [r2, #15]
10002aa8:	3301      	adds	r3, #1
10002aaa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10002aac:	2000      	movs	r0, #0
10002aae:	f7ff fe0f 	bl	100026d0 <update_cache>
	if (key != 0U) {
10002ab2:	2c00      	cmp	r4, #0
10002ab4:	d1f2      	bne.n	10002a9c <k_sched_unlock+0xc>
	__asm__ volatile(
10002ab6:	b662      	cpsie	i
10002ab8:	f3bf 8f6f 	isb	sy
10002abc:	e7ee      	b.n	10002a9c <k_sched_unlock+0xc>
	__asm__ volatile("mrs %0, PRIMASK;"
10002abe:	f3ef 8010 	mrs	r0, PRIMASK
10002ac2:	b672      	cpsid	i
10002ac4:	f003 ff6e 	bl	100069a4 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
10002ac8:	bd10      	pop	{r4, pc}
10002aca:	46c0      	nop			; (mov r8, r8)
10002acc:	20000bf4 	.word	0x20000bf4

10002ad0 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
10002ad0:	b510      	push	{r4, lr}
10002ad2:	0004      	movs	r4, r0
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
10002ad4:	7b42      	ldrb	r2, [r0, #13]
10002ad6:	0713      	lsls	r3, r2, #28
10002ad8:	d41e      	bmi.n	10002b18 <end_thread+0x48>
		thread->base.thread_state |= _THREAD_DEAD;
10002ada:	2108      	movs	r1, #8
10002adc:	0013      	movs	r3, r2
10002ade:	430b      	orrs	r3, r1
10002ae0:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
10002ae2:	2320      	movs	r3, #32
10002ae4:	0010      	movs	r0, r2
10002ae6:	4398      	bics	r0, r3
10002ae8:	0003      	movs	r3, r0
10002aea:	430b      	orrs	r3, r1
10002aec:	b2db      	uxtb	r3, r3
10002aee:	7363      	strb	r3, [r4, #13]
		if (z_is_thread_queued(thread)) {
10002af0:	b25b      	sxtb	r3, r3
10002af2:	2b00      	cmp	r3, #0
10002af4:	db11      	blt.n	10002b1a <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
10002af6:	68a3      	ldr	r3, [r4, #8]
10002af8:	2b00      	cmp	r3, #0
10002afa:	d002      	beq.n	10002b02 <end_thread+0x32>
			unpend_thread_no_timeout(thread);
10002afc:	0020      	movs	r0, r4
10002afe:	f003 ff69 	bl	100069d4 <unpend_thread_no_timeout>
10002b02:	0020      	movs	r0, r4
10002b04:	3018      	adds	r0, #24
10002b06:	f004 f848 	bl	10006b9a <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
10002b0a:	0020      	movs	r0, r4
10002b0c:	3058      	adds	r0, #88	; 0x58
10002b0e:	f003 ffbe 	bl	10006a8e <unpend_all>
		update_cache(1);
10002b12:	2001      	movs	r0, #1
10002b14:	f7ff fddc 	bl	100026d0 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
10002b18:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002b1a:	235f      	movs	r3, #95	; 0x5f
10002b1c:	4013      	ands	r3, r2
10002b1e:	2208      	movs	r2, #8
10002b20:	4313      	orrs	r3, r2
10002b22:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
10002b24:	4802      	ldr	r0, [pc, #8]	; (10002b30 <end_thread+0x60>)
10002b26:	0021      	movs	r1, r4
10002b28:	f003 ff4c 	bl	100069c4 <z_priq_dumb_remove>
}
10002b2c:	e7e3      	b.n	10002af6 <end_thread+0x26>
10002b2e:	46c0      	nop			; (mov r8, r8)
10002b30:	20000c10 	.word	0x20000c10

10002b34 <z_sched_init>:
{
10002b34:	b510      	push	{r4, lr}
	init_ready_q(&_kernel.ready_q);
10002b36:	4804      	ldr	r0, [pc, #16]	; (10002b48 <z_sched_init+0x14>)
10002b38:	f004 f815 	bl	10006b66 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10002b3c:	2100      	movs	r1, #0
10002b3e:	2000      	movs	r0, #0
10002b40:	f7ff fd6a 	bl	10002618 <k_sched_time_slice_set>
}
10002b44:	bd10      	pop	{r4, pc}
10002b46:	46c0      	nop			; (mov r8, r8)
10002b48:	20000c0c 	.word	0x20000c0c

10002b4c <z_impl_k_yield>:
{
10002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002b4e:	f3ef 8610 	mrs	r6, PRIMASK
10002b52:	b672      	cpsid	i
		dequeue_thread(_current);
10002b54:	4c1d      	ldr	r4, [pc, #116]	; (10002bcc <z_impl_k_yield+0x80>)
10002b56:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002b58:	7b4a      	ldrb	r2, [r1, #13]
10002b5a:	237f      	movs	r3, #127	; 0x7f
10002b5c:	4013      	ands	r3, r2
10002b5e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
10002b60:	0027      	movs	r7, r4
10002b62:	371c      	adds	r7, #28
10002b64:	0038      	movs	r0, r7
10002b66:	f003 ff2d 	bl	100069c4 <z_priq_dumb_remove>
	queue_thread(_current);
10002b6a:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10002b6c:	7b6a      	ldrb	r2, [r5, #13]
10002b6e:	2380      	movs	r3, #128	; 0x80
10002b70:	425b      	negs	r3, r3
10002b72:	4313      	orrs	r3, r2
10002b74:	736b      	strb	r3, [r5, #13]
	return list->head == list;
10002b76:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002b78:	42bc      	cmp	r4, r7
10002b7a:	d108      	bne.n	10002b8e <z_impl_k_yield+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002b7c:	2400      	movs	r4, #0
10002b7e:	e006      	b.n	10002b8e <z_impl_k_yield+0x42>
	sys_dnode_t *const prev = successor->prev;
10002b80:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
10002b82:	606b      	str	r3, [r5, #4]
	node->next = successor;
10002b84:	602c      	str	r4, [r5, #0]
	prev->next = node;
10002b86:	601d      	str	r5, [r3, #0]
	successor->prev = node;
10002b88:	6065      	str	r5, [r4, #4]
}
10002b8a:	e018      	b.n	10002bbe <z_impl_k_yield+0x72>
10002b8c:	2400      	movs	r4, #0
10002b8e:	2c00      	cmp	r4, #0
10002b90:	d00d      	beq.n	10002bae <z_impl_k_yield+0x62>
		if (z_sched_prio_cmp(thread, t) > 0) {
10002b92:	0021      	movs	r1, r4
10002b94:	0028      	movs	r0, r5
10002b96:	f003 fefb 	bl	10006990 <z_sched_prio_cmp>
10002b9a:	2800      	cmp	r0, #0
10002b9c:	dcf0      	bgt.n	10002b80 <z_impl_k_yield+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002b9e:	2c00      	cmp	r4, #0
10002ba0:	d0f5      	beq.n	10002b8e <z_impl_k_yield+0x42>
	return (node == list->tail) ? NULL : node->next;
10002ba2:	4a0a      	ldr	r2, [pc, #40]	; (10002bcc <z_impl_k_yield+0x80>)
10002ba4:	6a12      	ldr	r2, [r2, #32]
10002ba6:	4294      	cmp	r4, r2
10002ba8:	d0f0      	beq.n	10002b8c <z_impl_k_yield+0x40>
10002baa:	6824      	ldr	r4, [r4, #0]
10002bac:	e7ef      	b.n	10002b8e <z_impl_k_yield+0x42>
	sys_dnode_t *const tail = list->tail;
10002bae:	4b07      	ldr	r3, [pc, #28]	; (10002bcc <z_impl_k_yield+0x80>)
10002bb0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
10002bb2:	0019      	movs	r1, r3
10002bb4:	311c      	adds	r1, #28
10002bb6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
10002bb8:	606a      	str	r2, [r5, #4]
	tail->next = node;
10002bba:	6015      	str	r5, [r2, #0]
	list->tail = node;
10002bbc:	621d      	str	r5, [r3, #32]
	update_cache(1);
10002bbe:	2001      	movs	r0, #1
10002bc0:	f7ff fd86 	bl	100026d0 <update_cache>
10002bc4:	0030      	movs	r0, r6
10002bc6:	f7fe fa25 	bl	10001014 <arch_swap>
}
10002bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10002bcc:	20000bf4 	.word	0x20000bf4

10002bd0 <z_tick_sleep>:
{
10002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002bd2:	46c6      	mov	lr, r8
10002bd4:	b500      	push	{lr}
10002bd6:	0004      	movs	r4, r0
10002bd8:	000d      	movs	r5, r1
	if (ticks == 0) {
10002bda:	0003      	movs	r3, r0
10002bdc:	430b      	orrs	r3, r1
10002bde:	d030      	beq.n	10002c42 <z_tick_sleep+0x72>
	if (Z_TICK_ABS(ticks) <= 0) {
10002be0:	2202      	movs	r2, #2
10002be2:	4252      	negs	r2, r2
10002be4:	17d3      	asrs	r3, r2, #31
10002be6:	1b12      	subs	r2, r2, r4
10002be8:	41ab      	sbcs	r3, r5
10002bea:	2b00      	cmp	r3, #0
10002bec:	dd2d      	ble.n	10002c4a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10002bee:	2602      	movs	r6, #2
10002bf0:	4276      	negs	r6, r6
10002bf2:	1b36      	subs	r6, r6, r4
10002bf4:	f3ef 8810 	mrs	r8, PRIMASK
10002bf8:	b672      	cpsid	i
	pending_current = _current;
10002bfa:	4f1a      	ldr	r7, [pc, #104]	; (10002c64 <z_tick_sleep+0x94>)
10002bfc:	68b8      	ldr	r0, [r7, #8]
10002bfe:	4b1a      	ldr	r3, [pc, #104]	; (10002c68 <z_tick_sleep+0x98>)
10002c00:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10002c02:	f7ff fe79 	bl	100028f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
10002c06:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10002c08:	4918      	ldr	r1, [pc, #96]	; (10002c6c <z_tick_sleep+0x9c>)
10002c0a:	3018      	adds	r0, #24
10002c0c:	0022      	movs	r2, r4
10002c0e:	002b      	movs	r3, r5
10002c10:	f000 f8e4 	bl	10002ddc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
10002c14:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
10002c16:	7b53      	ldrb	r3, [r2, #13]
10002c18:	2110      	movs	r1, #16
10002c1a:	430b      	orrs	r3, r1
10002c1c:	7353      	strb	r3, [r2, #13]
10002c1e:	4640      	mov	r0, r8
10002c20:	f7fe f9f8 	bl	10001014 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10002c24:	0034      	movs	r4, r6
10002c26:	2500      	movs	r5, #0
10002c28:	f003 fff8 	bl	10006c1c <sys_clock_tick_get_32>
10002c2c:	0002      	movs	r2, r0
10002c2e:	2300      	movs	r3, #0
10002c30:	1aa4      	subs	r4, r4, r2
10002c32:	419d      	sbcs	r5, r3
	if (ticks > 0) {
10002c34:	2d00      	cmp	r5, #0
10002c36:	dc12      	bgt.n	10002c5e <z_tick_sleep+0x8e>
10002c38:	d00f      	beq.n	10002c5a <z_tick_sleep+0x8a>
	return 0;
10002c3a:	2000      	movs	r0, #0
}
10002c3c:	bc80      	pop	{r7}
10002c3e:	46b8      	mov	r8, r7
10002c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_impl_k_yield();
10002c42:	f7ff ff83 	bl	10002b4c <z_impl_k_yield>
		return 0;
10002c46:	2000      	movs	r0, #0
10002c48:	e7f8      	b.n	10002c3c <z_tick_sleep+0x6c>
	if (Z_TICK_ABS(ticks) <= 0) {
10002c4a:	2b00      	cmp	r3, #0
10002c4c:	d101      	bne.n	10002c52 <z_tick_sleep+0x82>
10002c4e:	2a00      	cmp	r2, #0
10002c50:	d1cd      	bne.n	10002bee <z_tick_sleep+0x1e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
10002c52:	f003 ffe3 	bl	10006c1c <sys_clock_tick_get_32>
10002c56:	1906      	adds	r6, r0, r4
10002c58:	e7cc      	b.n	10002bf4 <z_tick_sleep+0x24>
	if (ticks > 0) {
10002c5a:	2c00      	cmp	r4, #0
10002c5c:	d0ed      	beq.n	10002c3a <z_tick_sleep+0x6a>
		return ticks;
10002c5e:	0020      	movs	r0, r4
10002c60:	e7ec      	b.n	10002c3c <z_tick_sleep+0x6c>
10002c62:	46c0      	nop			; (mov r8, r8)
10002c64:	20000bf4 	.word	0x20000bf4
10002c68:	20000c18 	.word	0x20000c18
10002c6c:	10006a33 	.word	0x10006a33

10002c70 <z_impl_k_sleep>:
{
10002c70:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002c72:	000b      	movs	r3, r1
10002c74:	1c42      	adds	r2, r0, #1
10002c76:	d007      	beq.n	10002c88 <z_impl_k_sleep+0x18>
	ticks = z_tick_sleep(ticks);
10002c78:	f7ff ffaa 	bl	10002bd0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
10002c7c:	17c1      	asrs	r1, r0, #31
			return t / ((uint64_t)from_hz / to_hz);
10002c7e:	220a      	movs	r2, #10
10002c80:	2300      	movs	r3, #0
10002c82:	f7fd fb4b 	bl	1000031c <__aeabi_uldivmod>
}
10002c86:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002c88:	3301      	adds	r3, #1
10002c8a:	d1f5      	bne.n	10002c78 <z_impl_k_sleep+0x8>
		k_thread_suspend(_current);
10002c8c:	4b03      	ldr	r3, [pc, #12]	; (10002c9c <z_impl_k_sleep+0x2c>)
10002c8e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
10002c90:	f7ff fec4 	bl	10002a1c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
10002c94:	2001      	movs	r0, #1
10002c96:	4240      	negs	r0, r0
10002c98:	e7f5      	b.n	10002c86 <z_impl_k_sleep+0x16>
10002c9a:	46c0      	nop			; (mov r8, r8)
10002c9c:	20000bf4 	.word	0x20000bf4

10002ca0 <z_impl_z_current_get>:
	k_tid_t ret = _current_cpu->current;
10002ca0:	4b01      	ldr	r3, [pc, #4]	; (10002ca8 <z_impl_z_current_get+0x8>)
10002ca2:	6898      	ldr	r0, [r3, #8]
}
10002ca4:	4770      	bx	lr
10002ca6:	46c0      	nop			; (mov r8, r8)
10002ca8:	20000bf4 	.word	0x20000bf4

10002cac <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
10002cac:	b570      	push	{r4, r5, r6, lr}
10002cae:	0004      	movs	r4, r0
10002cb0:	f3ef 8510 	mrs	r5, PRIMASK
10002cb4:	b672      	cpsid	i
	k.key = arch_irq_lock();
10002cb6:	002e      	movs	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
10002cb8:	7b03      	ldrb	r3, [r0, #12]
10002cba:	07db      	lsls	r3, r3, #31
10002cbc:	d408      	bmi.n	10002cd0 <z_thread_abort+0x24>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
10002cbe:	7b43      	ldrb	r3, [r0, #13]
10002cc0:	071b      	lsls	r3, r3, #28
10002cc2:	d50e      	bpl.n	10002ce2 <z_thread_abort+0x36>
	if (key != 0U) {
10002cc4:	2d00      	cmp	r5, #0
10002cc6:	d10b      	bne.n	10002ce0 <z_thread_abort+0x34>
	__asm__ volatile(
10002cc8:	b662      	cpsie	i
10002cca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
10002cce:	e007      	b.n	10002ce0 <z_thread_abort+0x34>
	if (key != 0U) {
10002cd0:	2d00      	cmp	r5, #0
10002cd2:	d102      	bne.n	10002cda <z_thread_abort+0x2e>
	__asm__ volatile(
10002cd4:	b662      	cpsie	i
10002cd6:	f3bf 8f6f 	isb	sy
		k_panic();
10002cda:	2004      	movs	r0, #4
10002cdc:	b662      	cpsie	i
10002cde:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
10002ce0:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
10002ce2:	f7ff fef5 	bl	10002ad0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
10002ce6:	4b09      	ldr	r3, [pc, #36]	; (10002d0c <z_thread_abort+0x60>)
10002ce8:	689b      	ldr	r3, [r3, #8]
10002cea:	42a3      	cmp	r3, r4
10002cec:	d005      	beq.n	10002cfa <z_thread_abort+0x4e>
	if (key != 0U) {
10002cee:	2e00      	cmp	r6, #0
10002cf0:	d1f6      	bne.n	10002ce0 <z_thread_abort+0x34>
	__asm__ volatile(
10002cf2:	b662      	cpsie	i
10002cf4:	f3bf 8f6f 	isb	sy
10002cf8:	e7f2      	b.n	10002ce0 <z_thread_abort+0x34>
10002cfa:	f3ef 8305 	mrs	r3, IPSR
10002cfe:	2b00      	cmp	r3, #0
10002d00:	d1f5      	bne.n	10002cee <z_thread_abort+0x42>
10002d02:	0028      	movs	r0, r5
10002d04:	f7fe f986 	bl	10001014 <arch_swap>
	return ret;
10002d08:	e7f1      	b.n	10002cee <z_thread_abort+0x42>
10002d0a:	46c0      	nop			; (mov r8, r8)
10002d0c:	20000bf4 	.word	0x20000bf4

10002d10 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10002d10:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10002d12:	4a06      	ldr	r2, [pc, #24]	; (10002d2c <z_data_copy+0x1c>)
10002d14:	4806      	ldr	r0, [pc, #24]	; (10002d30 <z_data_copy+0x20>)
10002d16:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10002d18:	4906      	ldr	r1, [pc, #24]	; (10002d34 <z_data_copy+0x24>)
10002d1a:	f003 fde5 	bl	100068e8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
10002d1e:	4a06      	ldr	r2, [pc, #24]	; (10002d38 <z_data_copy+0x28>)
10002d20:	4906      	ldr	r1, [pc, #24]	; (10002d3c <z_data_copy+0x2c>)
10002d22:	4807      	ldr	r0, [pc, #28]	; (10002d40 <z_data_copy+0x30>)
10002d24:	f003 fde0 	bl	100068e8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10002d28:	bd10      	pop	{r4, pc}
10002d2a:	46c0      	nop			; (mov r8, r8)
10002d2c:	200008ac 	.word	0x200008ac
10002d30:	20000000 	.word	0x20000000
10002d34:	100078f4 	.word	0x100078f4
10002d38:	00000000 	.word	0x00000000
10002d3c:	100078f4 	.word	0x100078f4
10002d40:	20000000 	.word	0x20000000

10002d44 <first>:
	return list->head == list;
10002d44:	4b03      	ldr	r3, [pc, #12]	; (10002d54 <first+0x10>)
10002d46:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002d48:	4298      	cmp	r0, r3
10002d4a:	d000      	beq.n	10002d4e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
10002d4c:	4770      	bx	lr
10002d4e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
10002d50:	e7fc      	b.n	10002d4c <first+0x8>
10002d52:	46c0      	nop			; (mov r8, r8)
10002d54:	200006d4 	.word	0x200006d4

10002d58 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10002d58:	2800      	cmp	r0, #0
10002d5a:	d004      	beq.n	10002d66 <next+0xe>
	return (node == list->tail) ? NULL : node->next;
10002d5c:	4a03      	ldr	r2, [pc, #12]	; (10002d6c <next+0x14>)
10002d5e:	6852      	ldr	r2, [r2, #4]
10002d60:	4290      	cmp	r0, r2
10002d62:	d001      	beq.n	10002d68 <next+0x10>
10002d64:	6800      	ldr	r0, [r0, #0]
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
10002d66:	4770      	bx	lr
10002d68:	2000      	movs	r0, #0
	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
10002d6a:	e7fc      	b.n	10002d66 <next+0xe>
10002d6c:	200006d4 	.word	0x200006d4

10002d70 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
10002d70:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002d72:	4b04      	ldr	r3, [pc, #16]	; (10002d84 <elapsed+0x14>)
10002d74:	681b      	ldr	r3, [r3, #0]
10002d76:	2b00      	cmp	r3, #0
10002d78:	d001      	beq.n	10002d7e <elapsed+0xe>
10002d7a:	2000      	movs	r0, #0
}
10002d7c:	bd10      	pop	{r4, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
10002d7e:	f7fe fe77 	bl	10001a70 <sys_clock_elapsed>
10002d82:	e7fb      	b.n	10002d7c <elapsed+0xc>
10002d84:	20000c24 	.word	0x20000c24

10002d88 <next_timeout>:

static int32_t next_timeout(void)
{
10002d88:	b570      	push	{r4, r5, r6, lr}
	struct _timeout *to = first();
10002d8a:	f7ff ffdb 	bl	10002d44 <first>
10002d8e:	0004      	movs	r4, r0
	int32_t ticks_elapsed = elapsed();
10002d90:	f7ff ffee 	bl	10002d70 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
10002d94:	2c00      	cmp	r4, #0
10002d96:	d011      	beq.n	10002dbc <next_timeout+0x34>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
10002d98:	6922      	ldr	r2, [r4, #16]
10002d9a:	6963      	ldr	r3, [r4, #20]
10002d9c:	0004      	movs	r4, r0
10002d9e:	17c5      	asrs	r5, r0, #31
10002da0:	1b12      	subs	r2, r2, r4
10002da2:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
10002da4:	2b00      	cmp	r3, #0
10002da6:	dc0b      	bgt.n	10002dc0 <next_timeout+0x38>
10002da8:	d103      	bne.n	10002db2 <next_timeout+0x2a>
10002daa:	2180      	movs	r1, #128	; 0x80
10002dac:	0609      	lsls	r1, r1, #24
10002dae:	428a      	cmp	r2, r1
10002db0:	d206      	bcs.n	10002dc0 <next_timeout+0x38>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
10002db2:	0010      	movs	r0, r2
10002db4:	2b00      	cmp	r3, #0
10002db6:	da04      	bge.n	10002dc2 <next_timeout+0x3a>
10002db8:	2000      	movs	r0, #0
10002dba:	e002      	b.n	10002dc2 <next_timeout+0x3a>
		ret = MAX_WAIT;
10002dbc:	4805      	ldr	r0, [pc, #20]	; (10002dd4 <next_timeout+0x4c>)
10002dbe:	e000      	b.n	10002dc2 <next_timeout+0x3a>
10002dc0:	4804      	ldr	r0, [pc, #16]	; (10002dd4 <next_timeout+0x4c>)
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
10002dc2:	4b05      	ldr	r3, [pc, #20]	; (10002dd8 <next_timeout+0x50>)
10002dc4:	691b      	ldr	r3, [r3, #16]
10002dc6:	2b00      	cmp	r3, #0
10002dc8:	d002      	beq.n	10002dd0 <next_timeout+0x48>
10002dca:	4283      	cmp	r3, r0
10002dcc:	da00      	bge.n	10002dd0 <next_timeout+0x48>
		ret = _current_cpu->slice_ticks;
10002dce:	0018      	movs	r0, r3
	}
#endif
	return ret;
}
10002dd0:	bd70      	pop	{r4, r5, r6, pc}
10002dd2:	46c0      	nop			; (mov r8, r8)
10002dd4:	7fffffff 	.word	0x7fffffff
10002dd8:	20000bf4 	.word	0x20000bf4

10002ddc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10002ddc:	b5d0      	push	{r4, r6, r7, lr}
10002dde:	46ce      	mov	lr, r9
10002de0:	b500      	push	{lr}
10002de2:	b085      	sub	sp, #20
10002de4:	0004      	movs	r4, r0
10002de6:	9200      	str	r2, [sp, #0]
10002de8:	9301      	str	r3, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002dea:	9e00      	ldr	r6, [sp, #0]
10002dec:	9f01      	ldr	r7, [sp, #4]
10002dee:	003b      	movs	r3, r7
10002df0:	0032      	movs	r2, r6
10002df2:	3201      	adds	r2, #1
10002df4:	d006      	beq.n	10002e04 <z_add_timeout+0x28>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10002df6:	60a1      	str	r1, [r4, #8]

	LOCKED(&timeout_lock) {
10002df8:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10002dfa:	f3ef 8210 	mrs	r2, PRIMASK
10002dfe:	b672      	cpsid	i
	return k;
10002e00:	4691      	mov	r9, r2
10002e02:	e04a      	b.n	10002e9a <z_add_timeout+0xbe>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10002e04:	3301      	adds	r3, #1
10002e06:	d1f6      	bne.n	10002df6 <z_add_timeout+0x1a>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
10002e08:	b005      	add	sp, #20
10002e0a:	bc80      	pop	{r7}
10002e0c:	46b9      	mov	r9, r7
10002e0e:	bdd0      	pop	{r4, r6, r7, pc}
			to->dticks = MAX(1, ticks);
10002e10:	2b00      	cmp	r3, #0
10002e12:	d101      	bne.n	10002e18 <z_add_timeout+0x3c>
10002e14:	2a00      	cmp	r2, #0
10002e16:	d157      	bne.n	10002ec8 <z_add_timeout+0xec>
10002e18:	2201      	movs	r2, #1
10002e1a:	2300      	movs	r3, #0
10002e1c:	e054      	b.n	10002ec8 <z_add_timeout+0xec>
			to->dticks = timeout.ticks + 1 + elapsed();
10002e1e:	2601      	movs	r6, #1
10002e20:	2700      	movs	r7, #0
10002e22:	9a00      	ldr	r2, [sp, #0]
10002e24:	9b01      	ldr	r3, [sp, #4]
10002e26:	18b6      	adds	r6, r6, r2
10002e28:	415f      	adcs	r7, r3
10002e2a:	f7ff ffa1 	bl	10002d70 <elapsed>
10002e2e:	9002      	str	r0, [sp, #8]
10002e30:	17c3      	asrs	r3, r0, #31
10002e32:	9303      	str	r3, [sp, #12]
10002e34:	9a02      	ldr	r2, [sp, #8]
10002e36:	9b03      	ldr	r3, [sp, #12]
10002e38:	18b6      	adds	r6, r6, r2
10002e3a:	415f      	adcs	r7, r3
10002e3c:	6126      	str	r6, [r4, #16]
10002e3e:	6167      	str	r7, [r4, #20]
10002e40:	e044      	b.n	10002ecc <z_add_timeout+0xf0>
			to->dticks -= t->dticks;
10002e42:	1b92      	subs	r2, r2, r6
10002e44:	41bb      	sbcs	r3, r7
10002e46:	6122      	str	r2, [r4, #16]
10002e48:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
10002e4a:	f7ff ff85 	bl	10002d58 <next>
10002e4e:	2800      	cmp	r0, #0
10002e50:	d012      	beq.n	10002e78 <z_add_timeout+0x9c>
			if (t->dticks > to->dticks) {
10002e52:	6906      	ldr	r6, [r0, #16]
10002e54:	6947      	ldr	r7, [r0, #20]
10002e56:	6922      	ldr	r2, [r4, #16]
10002e58:	6963      	ldr	r3, [r4, #20]
10002e5a:	429f      	cmp	r7, r3
10002e5c:	dc02      	bgt.n	10002e64 <z_add_timeout+0x88>
10002e5e:	d1f0      	bne.n	10002e42 <z_add_timeout+0x66>
10002e60:	4296      	cmp	r6, r2
10002e62:	d9ee      	bls.n	10002e42 <z_add_timeout+0x66>
				t->dticks -= to->dticks;
10002e64:	1ab6      	subs	r6, r6, r2
10002e66:	419f      	sbcs	r7, r3
10002e68:	6106      	str	r6, [r0, #16]
10002e6a:	6147      	str	r7, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
10002e6c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
10002e6e:	6063      	str	r3, [r4, #4]
	node->next = successor;
10002e70:	6020      	str	r0, [r4, #0]
	prev->next = node;
10002e72:	601c      	str	r4, [r3, #0]
	successor->prev = node;
10002e74:	6044      	str	r4, [r0, #4]
		if (t == NULL) {
10002e76:	e005      	b.n	10002e84 <z_add_timeout+0xa8>
	sys_dnode_t *const tail = list->tail;
10002e78:	4b1c      	ldr	r3, [pc, #112]	; (10002eec <z_add_timeout+0x110>)
10002e7a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
10002e7c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
10002e7e:	6062      	str	r2, [r4, #4]
	tail->next = node;
10002e80:	6014      	str	r4, [r2, #0]
	list->tail = node;
10002e82:	605c      	str	r4, [r3, #4]
		if (to == first()) {
10002e84:	f7ff ff5e 	bl	10002d44 <first>
10002e88:	4284      	cmp	r4, r0
10002e8a:	d022      	beq.n	10002ed2 <z_add_timeout+0xf6>
	if (key != 0U) {
10002e8c:	464b      	mov	r3, r9
10002e8e:	2b00      	cmp	r3, #0
10002e90:	d102      	bne.n	10002e98 <z_add_timeout+0xbc>
	__asm__ volatile(
10002e92:	b662      	cpsie	i
10002e94:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
10002e98:	2301      	movs	r3, #1
10002e9a:	2b00      	cmp	r3, #0
10002e9c:	d1b4      	bne.n	10002e08 <z_add_timeout+0x2c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
10002e9e:	2202      	movs	r2, #2
10002ea0:	4252      	negs	r2, r2
10002ea2:	17d3      	asrs	r3, r2, #31
10002ea4:	9800      	ldr	r0, [sp, #0]
10002ea6:	9901      	ldr	r1, [sp, #4]
10002ea8:	1a12      	subs	r2, r2, r0
10002eaa:	418b      	sbcs	r3, r1
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10002eac:	2b00      	cmp	r3, #0
10002eae:	dbb6      	blt.n	10002e1e <z_add_timeout+0x42>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
10002eb0:	4b0f      	ldr	r3, [pc, #60]	; (10002ef0 <z_add_timeout+0x114>)
10002eb2:	681e      	ldr	r6, [r3, #0]
10002eb4:	685f      	ldr	r7, [r3, #4]
10002eb6:	1836      	adds	r6, r6, r0
10002eb8:	414f      	adcs	r7, r1
10002eba:	2202      	movs	r2, #2
10002ebc:	4252      	negs	r2, r2
10002ebe:	17d3      	asrs	r3, r2, #31
10002ec0:	1b92      	subs	r2, r2, r6
10002ec2:	41bb      	sbcs	r3, r7
			to->dticks = MAX(1, ticks);
10002ec4:	2b00      	cmp	r3, #0
10002ec6:	dda3      	ble.n	10002e10 <z_add_timeout+0x34>
10002ec8:	6122      	str	r2, [r4, #16]
10002eca:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
10002ecc:	f7ff ff3a 	bl	10002d44 <first>
10002ed0:	e7bd      	b.n	10002e4e <z_add_timeout+0x72>
			int32_t next_time = next_timeout();
10002ed2:	f7ff ff59 	bl	10002d88 <next_timeout>
			if (next_time == 0 ||
10002ed6:	2800      	cmp	r0, #0
10002ed8:	d003      	beq.n	10002ee2 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
10002eda:	4b06      	ldr	r3, [pc, #24]	; (10002ef4 <z_add_timeout+0x118>)
10002edc:	691b      	ldr	r3, [r3, #16]
			if (next_time == 0 ||
10002ede:	4283      	cmp	r3, r0
10002ee0:	d0d4      	beq.n	10002e8c <z_add_timeout+0xb0>
				sys_clock_set_timeout(next_time, false);
10002ee2:	2100      	movs	r1, #0
10002ee4:	f7fe fd34 	bl	10001950 <sys_clock_set_timeout>
10002ee8:	e7d0      	b.n	10002e8c <z_add_timeout+0xb0>
10002eea:	46c0      	nop			; (mov r8, r8)
10002eec:	200006d4 	.word	0x200006d4
10002ef0:	20000b30 	.word	0x20000b30
10002ef4:	20000bf4 	.word	0x20000bf4

10002ef8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
10002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002efa:	46c6      	mov	lr, r8
10002efc:	b500      	push	{lr}
10002efe:	0004      	movs	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
10002f00:	f7ff fc66 	bl	100027d0 <z_time_slice>
	__asm__ volatile("mrs %0, PRIMASK;"
10002f04:	f3ef 8510 	mrs	r5, PRIMASK
10002f08:	b672      	cpsid	i
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10002f0a:	4b2e      	ldr	r3, [pc, #184]	; (10002fc4 <sys_clock_announce+0xcc>)
10002f0c:	601c      	str	r4, [r3, #0]

	struct _timeout *t = first();
10002f0e:	f7ff ff19 	bl	10002d44 <first>
10002f12:	0004      	movs	r4, r0

	for (t = first();
10002f14:	e00d      	b.n	10002f32 <sys_clock_announce+0x3a>
		curr_tick += dt;
		t->dticks = 0;
		remove_timeout(t);

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
10002f16:	68a3      	ldr	r3, [r4, #8]
10002f18:	0020      	movs	r0, r4
10002f1a:	4798      	blx	r3
10002f1c:	f3ef 8510 	mrs	r5, PRIMASK
10002f20:	b672      	cpsid	i
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
10002f22:	4a28      	ldr	r2, [pc, #160]	; (10002fc4 <sys_clock_announce+0xcc>)
10002f24:	6813      	ldr	r3, [r2, #0]
10002f26:	4641      	mov	r1, r8
10002f28:	1a5b      	subs	r3, r3, r1
10002f2a:	6013      	str	r3, [r2, #0]
	     t = first()) {
10002f2c:	f7ff ff0a 	bl	10002d44 <first>
10002f30:	0004      	movs	r4, r0
	     (t != NULL) && (t->dticks <= announce_remaining);
10002f32:	2c00      	cmp	r4, #0
10002f34:	d020      	beq.n	10002f78 <sys_clock_announce+0x80>
10002f36:	6923      	ldr	r3, [r4, #16]
10002f38:	4698      	mov	r8, r3
10002f3a:	6962      	ldr	r2, [r4, #20]
10002f3c:	4b21      	ldr	r3, [pc, #132]	; (10002fc4 <sys_clock_announce+0xcc>)
10002f3e:	6819      	ldr	r1, [r3, #0]
10002f40:	17cb      	asrs	r3, r1, #31
10002f42:	429a      	cmp	r2, r3
10002f44:	dc18      	bgt.n	10002f78 <sys_clock_announce+0x80>
10002f46:	d015      	beq.n	10002f74 <sys_clock_announce+0x7c>
		curr_tick += dt;
10002f48:	491f      	ldr	r1, [pc, #124]	; (10002fc8 <sys_clock_announce+0xd0>)
10002f4a:	4646      	mov	r6, r8
10002f4c:	17f7      	asrs	r7, r6, #31
10002f4e:	680a      	ldr	r2, [r1, #0]
10002f50:	684b      	ldr	r3, [r1, #4]
10002f52:	1992      	adds	r2, r2, r6
10002f54:	417b      	adcs	r3, r7
10002f56:	600a      	str	r2, [r1, #0]
10002f58:	604b      	str	r3, [r1, #4]
		t->dticks = 0;
10002f5a:	2200      	movs	r2, #0
10002f5c:	2300      	movs	r3, #0
10002f5e:	6122      	str	r2, [r4, #16]
10002f60:	6163      	str	r3, [r4, #20]
		remove_timeout(t);
10002f62:	0020      	movs	r0, r4
10002f64:	f003 fe03 	bl	10006b6e <remove_timeout>
	if (key != 0U) {
10002f68:	2d00      	cmp	r5, #0
10002f6a:	d1d4      	bne.n	10002f16 <sys_clock_announce+0x1e>
	__asm__ volatile(
10002f6c:	b662      	cpsie	i
10002f6e:	f3bf 8f6f 	isb	sy
10002f72:	e7d0      	b.n	10002f16 <sys_clock_announce+0x1e>
	     (t != NULL) && (t->dticks <= announce_remaining);
10002f74:	4588      	cmp	r8, r1
10002f76:	d9e7      	bls.n	10002f48 <sys_clock_announce+0x50>
	}

	if (t != NULL) {
10002f78:	2c00      	cmp	r4, #0
10002f7a:	d009      	beq.n	10002f90 <sys_clock_announce+0x98>
		t->dticks -= announce_remaining;
10002f7c:	6922      	ldr	r2, [r4, #16]
10002f7e:	6963      	ldr	r3, [r4, #20]
10002f80:	4910      	ldr	r1, [pc, #64]	; (10002fc4 <sys_clock_announce+0xcc>)
10002f82:	680e      	ldr	r6, [r1, #0]
10002f84:	0030      	movs	r0, r6
10002f86:	17f1      	asrs	r1, r6, #31
10002f88:	1a12      	subs	r2, r2, r0
10002f8a:	418b      	sbcs	r3, r1
10002f8c:	6122      	str	r2, [r4, #16]
10002f8e:	6163      	str	r3, [r4, #20]
	}

	curr_tick += announce_remaining;
10002f90:	4e0d      	ldr	r6, [pc, #52]	; (10002fc8 <sys_clock_announce+0xd0>)
10002f92:	4c0c      	ldr	r4, [pc, #48]	; (10002fc4 <sys_clock_announce+0xcc>)
10002f94:	6823      	ldr	r3, [r4, #0]
10002f96:	0018      	movs	r0, r3
10002f98:	17d9      	asrs	r1, r3, #31
10002f9a:	6832      	ldr	r2, [r6, #0]
10002f9c:	6873      	ldr	r3, [r6, #4]
10002f9e:	1812      	adds	r2, r2, r0
10002fa0:	414b      	adcs	r3, r1
10002fa2:	6032      	str	r2, [r6, #0]
10002fa4:	6073      	str	r3, [r6, #4]
	announce_remaining = 0;
10002fa6:	2300      	movs	r3, #0
10002fa8:	6023      	str	r3, [r4, #0]

	sys_clock_set_timeout(next_timeout(), false);
10002faa:	f7ff feed 	bl	10002d88 <next_timeout>
10002fae:	2100      	movs	r1, #0
10002fb0:	f7fe fcce 	bl	10001950 <sys_clock_set_timeout>
	if (key != 0U) {
10002fb4:	2d00      	cmp	r5, #0
10002fb6:	d102      	bne.n	10002fbe <sys_clock_announce+0xc6>
	__asm__ volatile(
10002fb8:	b662      	cpsie	i
10002fba:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
10002fbe:	bc80      	pop	{r7}
10002fc0:	46b8      	mov	r8, r7
10002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002fc4:	20000c24 	.word	0x20000c24
10002fc8:	20000b30 	.word	0x20000b30

10002fcc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
10002fcc:	b570      	push	{r4, r5, r6, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
10002fce:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10002fd0:	f3ef 8610 	mrs	r6, PRIMASK
10002fd4:	b672      	cpsid	i
	uint64_t t = 0U;
10002fd6:	2000      	movs	r0, #0
10002fd8:	2100      	movs	r1, #0
10002fda:	e000      	b.n	10002fde <sys_clock_tick_get+0x12>
	LOCKED(&timeout_lock) {
10002fdc:	2301      	movs	r3, #1
10002fde:	2b00      	cmp	r3, #0
10002fe0:	d10e      	bne.n	10003000 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
10002fe2:	f7ff fec5 	bl	10002d70 <elapsed>
10002fe6:	0004      	movs	r4, r0
10002fe8:	17c5      	asrs	r5, r0, #31
10002fea:	4b06      	ldr	r3, [pc, #24]	; (10003004 <sys_clock_tick_get+0x38>)
10002fec:	6818      	ldr	r0, [r3, #0]
10002fee:	6859      	ldr	r1, [r3, #4]
10002ff0:	1900      	adds	r0, r0, r4
10002ff2:	4169      	adcs	r1, r5
	if (key != 0U) {
10002ff4:	2e00      	cmp	r6, #0
10002ff6:	d1f1      	bne.n	10002fdc <sys_clock_tick_get+0x10>
	__asm__ volatile(
10002ff8:	b662      	cpsie	i
10002ffa:	f3bf 8f6f 	isb	sy
10002ffe:	e7ed      	b.n	10002fdc <sys_clock_tick_get+0x10>
	}
	return t;
}
10003000:	bd70      	pop	{r4, r5, r6, pc}
10003002:	46c0      	nop			; (mov r8, r8)
10003004:	20000b30 	.word	0x20000b30

10003008 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10003008:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
1000300a:	4802      	ldr	r0, [pc, #8]	; (10003014 <boot_banner+0xc>)
1000300c:	f002 fc0d 	bl	1000582a <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10003010:	bd10      	pop	{r4, pc}
10003012:	46c0      	nop			; (mov r8, r8)
10003014:	100075a0 	.word	0x100075a0

10003018 <__assert_func>:
10003018:	b570      	push	{r4, r5, r6, lr}
1000301a:	0014      	movs	r4, r2
1000301c:	001a      	movs	r2, r3
1000301e:	4b0a      	ldr	r3, [pc, #40]	; (10003048 <__assert_func+0x30>)
10003020:	0006      	movs	r6, r0
10003022:	681b      	ldr	r3, [r3, #0]
10003024:	b084      	sub	sp, #16
10003026:	68d8      	ldr	r0, [r3, #12]
10003028:	2c00      	cmp	r4, #0
1000302a:	d00a      	beq.n	10003042 <__assert_func+0x2a>
1000302c:	4b07      	ldr	r3, [pc, #28]	; (1000304c <__assert_func+0x34>)
1000302e:	4d08      	ldr	r5, [pc, #32]	; (10003050 <__assert_func+0x38>)
10003030:	9301      	str	r3, [sp, #4]
10003032:	9100      	str	r1, [sp, #0]
10003034:	0033      	movs	r3, r6
10003036:	0029      	movs	r1, r5
10003038:	9402      	str	r4, [sp, #8]
1000303a:	f000 f80d 	bl	10003058 <fiprintf>
1000303e:	f001 fb2f 	bl	100046a0 <abort>
10003042:	4b04      	ldr	r3, [pc, #16]	; (10003054 <__assert_func+0x3c>)
10003044:	001c      	movs	r4, r3
10003046:	e7f2      	b.n	1000302e <__assert_func+0x16>
10003048:	200006dc 	.word	0x200006dc
1000304c:	100075e4 	.word	0x100075e4
10003050:	100075f4 	.word	0x100075f4
10003054:	100075f0 	.word	0x100075f0

10003058 <fiprintf>:
10003058:	b40e      	push	{r1, r2, r3}
1000305a:	b500      	push	{lr}
1000305c:	b082      	sub	sp, #8
1000305e:	ab03      	add	r3, sp, #12
10003060:	0001      	movs	r1, r0
10003062:	4805      	ldr	r0, [pc, #20]	; (10003078 <fiprintf+0x20>)
10003064:	cb04      	ldmia	r3!, {r2}
10003066:	6800      	ldr	r0, [r0, #0]
10003068:	9301      	str	r3, [sp, #4]
1000306a:	f000 fbbd 	bl	100037e8 <_vfiprintf_r>
1000306e:	b002      	add	sp, #8
10003070:	bc08      	pop	{r3}
10003072:	b003      	add	sp, #12
10003074:	4718      	bx	r3
10003076:	46c0      	nop			; (mov r8, r8)
10003078:	200006dc 	.word	0x200006dc

1000307c <malloc>:
1000307c:	b510      	push	{r4, lr}
1000307e:	4b03      	ldr	r3, [pc, #12]	; (1000308c <malloc+0x10>)
10003080:	0001      	movs	r1, r0
10003082:	6818      	ldr	r0, [r3, #0]
10003084:	f000 f80e 	bl	100030a4 <_malloc_r>
10003088:	bd10      	pop	{r4, pc}
1000308a:	46c0      	nop			; (mov r8, r8)
1000308c:	200006dc 	.word	0x200006dc

10003090 <free>:
10003090:	b510      	push	{r4, lr}
10003092:	4b03      	ldr	r3, [pc, #12]	; (100030a0 <free+0x10>)
10003094:	0001      	movs	r1, r0
10003096:	6818      	ldr	r0, [r3, #0]
10003098:	f001 fcc0 	bl	10004a1c <_free_r>
1000309c:	bd10      	pop	{r4, pc}
1000309e:	46c0      	nop			; (mov r8, r8)
100030a0:	200006dc 	.word	0x200006dc

100030a4 <_malloc_r>:
100030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100030a6:	4645      	mov	r5, r8
100030a8:	46de      	mov	lr, fp
100030aa:	4657      	mov	r7, sl
100030ac:	464e      	mov	r6, r9
100030ae:	b5e0      	push	{r5, r6, r7, lr}
100030b0:	000d      	movs	r5, r1
100030b2:	b083      	sub	sp, #12
100030b4:	350b      	adds	r5, #11
100030b6:	9000      	str	r0, [sp, #0]
100030b8:	2d16      	cmp	r5, #22
100030ba:	d827      	bhi.n	1000310c <_malloc_r+0x68>
100030bc:	2910      	cmp	r1, #16
100030be:	d900      	bls.n	100030c2 <_malloc_r+0x1e>
100030c0:	e0c8      	b.n	10003254 <_malloc_r+0x1b0>
100030c2:	f000 fb2f 	bl	10003724 <__malloc_lock>
100030c6:	2510      	movs	r5, #16
100030c8:	2318      	movs	r3, #24
100030ca:	2102      	movs	r1, #2
100030cc:	4fc5      	ldr	r7, [pc, #788]	; (100033e4 <_malloc_r+0x340>)
100030ce:	18fb      	adds	r3, r7, r3
100030d0:	001a      	movs	r2, r3
100030d2:	685c      	ldr	r4, [r3, #4]
100030d4:	3a08      	subs	r2, #8
100030d6:	4294      	cmp	r4, r2
100030d8:	d100      	bne.n	100030dc <_malloc_r+0x38>
100030da:	e123      	b.n	10003324 <_malloc_r+0x280>
100030dc:	2203      	movs	r2, #3
100030de:	6863      	ldr	r3, [r4, #4]
100030e0:	4393      	bics	r3, r2
100030e2:	68e2      	ldr	r2, [r4, #12]
100030e4:	68a1      	ldr	r1, [r4, #8]
100030e6:	60ca      	str	r2, [r1, #12]
100030e8:	6091      	str	r1, [r2, #8]
100030ea:	2101      	movs	r1, #1
100030ec:	18e3      	adds	r3, r4, r3
100030ee:	685a      	ldr	r2, [r3, #4]
100030f0:	9800      	ldr	r0, [sp, #0]
100030f2:	430a      	orrs	r2, r1
100030f4:	605a      	str	r2, [r3, #4]
100030f6:	f000 fb1d 	bl	10003734 <__malloc_unlock>
100030fa:	0020      	movs	r0, r4
100030fc:	3008      	adds	r0, #8
100030fe:	b003      	add	sp, #12
10003100:	bcf0      	pop	{r4, r5, r6, r7}
10003102:	46bb      	mov	fp, r7
10003104:	46b2      	mov	sl, r6
10003106:	46a9      	mov	r9, r5
10003108:	46a0      	mov	r8, r4
1000310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000310c:	2307      	movs	r3, #7
1000310e:	439d      	bics	r5, r3
10003110:	d500      	bpl.n	10003114 <_malloc_r+0x70>
10003112:	e09f      	b.n	10003254 <_malloc_r+0x1b0>
10003114:	42a9      	cmp	r1, r5
10003116:	d900      	bls.n	1000311a <_malloc_r+0x76>
10003118:	e09c      	b.n	10003254 <_malloc_r+0x1b0>
1000311a:	9800      	ldr	r0, [sp, #0]
1000311c:	f000 fb02 	bl	10003724 <__malloc_lock>
10003120:	23fc      	movs	r3, #252	; 0xfc
10003122:	005b      	lsls	r3, r3, #1
10003124:	429d      	cmp	r5, r3
10003126:	d200      	bcs.n	1000312a <_malloc_r+0x86>
10003128:	e157      	b.n	100033da <_malloc_r+0x336>
1000312a:	0a69      	lsrs	r1, r5, #9
1000312c:	d100      	bne.n	10003130 <_malloc_r+0x8c>
1000312e:	e096      	b.n	1000325e <_malloc_r+0x1ba>
10003130:	2904      	cmp	r1, #4
10003132:	d900      	bls.n	10003136 <_malloc_r+0x92>
10003134:	e122      	b.n	1000337c <_malloc_r+0x2d8>
10003136:	2338      	movs	r3, #56	; 0x38
10003138:	469c      	mov	ip, r3
1000313a:	09a9      	lsrs	r1, r5, #6
1000313c:	448c      	add	ip, r1
1000313e:	3139      	adds	r1, #57	; 0x39
10003140:	00c8      	lsls	r0, r1, #3
10003142:	4fa8      	ldr	r7, [pc, #672]	; (100033e4 <_malloc_r+0x340>)
10003144:	1838      	adds	r0, r7, r0
10003146:	6844      	ldr	r4, [r0, #4]
10003148:	3808      	subs	r0, #8
1000314a:	42a0      	cmp	r0, r4
1000314c:	d00c      	beq.n	10003168 <_malloc_r+0xc4>
1000314e:	2603      	movs	r6, #3
10003150:	e004      	b.n	1000315c <_malloc_r+0xb8>
10003152:	2a00      	cmp	r2, #0
10003154:	dac5      	bge.n	100030e2 <_malloc_r+0x3e>
10003156:	68e4      	ldr	r4, [r4, #12]
10003158:	42a0      	cmp	r0, r4
1000315a:	d005      	beq.n	10003168 <_malloc_r+0xc4>
1000315c:	6863      	ldr	r3, [r4, #4]
1000315e:	43b3      	bics	r3, r6
10003160:	1b5a      	subs	r2, r3, r5
10003162:	2a0f      	cmp	r2, #15
10003164:	ddf5      	ble.n	10003152 <_malloc_r+0xae>
10003166:	4661      	mov	r1, ip
10003168:	003a      	movs	r2, r7
1000316a:	693c      	ldr	r4, [r7, #16]
1000316c:	3208      	adds	r2, #8
1000316e:	4294      	cmp	r4, r2
10003170:	d100      	bne.n	10003174 <_malloc_r+0xd0>
10003172:	e0c6      	b.n	10003302 <_malloc_r+0x25e>
10003174:	2003      	movs	r0, #3
10003176:	6863      	ldr	r3, [r4, #4]
10003178:	4383      	bics	r3, r0
1000317a:	1b58      	subs	r0, r3, r5
1000317c:	280f      	cmp	r0, #15
1000317e:	dd00      	ble.n	10003182 <_malloc_r+0xde>
10003180:	e13e      	b.n	10003400 <_malloc_r+0x35c>
10003182:	613a      	str	r2, [r7, #16]
10003184:	617a      	str	r2, [r7, #20]
10003186:	2800      	cmp	r0, #0
10003188:	daaf      	bge.n	100030ea <_malloc_r+0x46>
1000318a:	687a      	ldr	r2, [r7, #4]
1000318c:	4690      	mov	r8, r2
1000318e:	2280      	movs	r2, #128	; 0x80
10003190:	0092      	lsls	r2, r2, #2
10003192:	4293      	cmp	r3, r2
10003194:	d300      	bcc.n	10003198 <_malloc_r+0xf4>
10003196:	e0cb      	b.n	10003330 <_malloc_r+0x28c>
10003198:	08da      	lsrs	r2, r3, #3
1000319a:	0958      	lsrs	r0, r3, #5
1000319c:	2301      	movs	r3, #1
1000319e:	4083      	lsls	r3, r0
100031a0:	4640      	mov	r0, r8
100031a2:	4318      	orrs	r0, r3
100031a4:	4680      	mov	r8, r0
100031a6:	00d3      	lsls	r3, r2, #3
100031a8:	19db      	adds	r3, r3, r7
100031aa:	689a      	ldr	r2, [r3, #8]
100031ac:	6078      	str	r0, [r7, #4]
100031ae:	60e3      	str	r3, [r4, #12]
100031b0:	60a2      	str	r2, [r4, #8]
100031b2:	609c      	str	r4, [r3, #8]
100031b4:	60d4      	str	r4, [r2, #12]
100031b6:	2001      	movs	r0, #1
100031b8:	108b      	asrs	r3, r1, #2
100031ba:	4098      	lsls	r0, r3
100031bc:	4540      	cmp	r0, r8
100031be:	d854      	bhi.n	1000326a <_malloc_r+0x1c6>
100031c0:	4643      	mov	r3, r8
100031c2:	4203      	tst	r3, r0
100031c4:	d106      	bne.n	100031d4 <_malloc_r+0x130>
100031c6:	2303      	movs	r3, #3
100031c8:	4399      	bics	r1, r3
100031ca:	4643      	mov	r3, r8
100031cc:	0040      	lsls	r0, r0, #1
100031ce:	3104      	adds	r1, #4
100031d0:	4203      	tst	r3, r0
100031d2:	d0fa      	beq.n	100031ca <_malloc_r+0x126>
100031d4:	2303      	movs	r3, #3
100031d6:	4698      	mov	r8, r3
100031d8:	00cb      	lsls	r3, r1, #3
100031da:	4699      	mov	r9, r3
100031dc:	44b9      	add	r9, r7
100031de:	46cc      	mov	ip, r9
100031e0:	468a      	mov	sl, r1
100031e2:	4663      	mov	r3, ip
100031e4:	68db      	ldr	r3, [r3, #12]
100031e6:	e00b      	b.n	10003200 <_malloc_r+0x15c>
100031e8:	4644      	mov	r4, r8
100031ea:	685a      	ldr	r2, [r3, #4]
100031ec:	43a2      	bics	r2, r4
100031ee:	1b56      	subs	r6, r2, r5
100031f0:	001c      	movs	r4, r3
100031f2:	68db      	ldr	r3, [r3, #12]
100031f4:	2e0f      	cmp	r6, #15
100031f6:	dd00      	ble.n	100031fa <_malloc_r+0x156>
100031f8:	e0cc      	b.n	10003394 <_malloc_r+0x2f0>
100031fa:	2e00      	cmp	r6, #0
100031fc:	db00      	blt.n	10003200 <_malloc_r+0x15c>
100031fe:	e0de      	b.n	100033be <_malloc_r+0x31a>
10003200:	459c      	cmp	ip, r3
10003202:	d1f1      	bne.n	100031e8 <_malloc_r+0x144>
10003204:	2308      	movs	r3, #8
10003206:	469b      	mov	fp, r3
10003208:	3b07      	subs	r3, #7
1000320a:	44dc      	add	ip, fp
1000320c:	469b      	mov	fp, r3
1000320e:	44da      	add	sl, fp
10003210:	4653      	mov	r3, sl
10003212:	079b      	lsls	r3, r3, #30
10003214:	d1e5      	bne.n	100031e2 <_malloc_r+0x13e>
10003216:	2203      	movs	r2, #3
10003218:	e009      	b.n	1000322e <_malloc_r+0x18a>
1000321a:	2308      	movs	r3, #8
1000321c:	425b      	negs	r3, r3
1000321e:	469c      	mov	ip, r3
10003220:	44e1      	add	r9, ip
10003222:	464b      	mov	r3, r9
10003224:	689b      	ldr	r3, [r3, #8]
10003226:	3901      	subs	r1, #1
10003228:	454b      	cmp	r3, r9
1000322a:	d000      	beq.n	1000322e <_malloc_r+0x18a>
1000322c:	e1d6      	b.n	100035dc <_malloc_r+0x538>
1000322e:	420a      	tst	r2, r1
10003230:	d1f3      	bne.n	1000321a <_malloc_r+0x176>
10003232:	687b      	ldr	r3, [r7, #4]
10003234:	4383      	bics	r3, r0
10003236:	607b      	str	r3, [r7, #4]
10003238:	0040      	lsls	r0, r0, #1
1000323a:	4298      	cmp	r0, r3
1000323c:	d815      	bhi.n	1000326a <_malloc_r+0x1c6>
1000323e:	2800      	cmp	r0, #0
10003240:	d104      	bne.n	1000324c <_malloc_r+0x1a8>
10003242:	e012      	b.n	1000326a <_malloc_r+0x1c6>
10003244:	2204      	movs	r2, #4
10003246:	4694      	mov	ip, r2
10003248:	0040      	lsls	r0, r0, #1
1000324a:	44e2      	add	sl, ip
1000324c:	4203      	tst	r3, r0
1000324e:	d0f9      	beq.n	10003244 <_malloc_r+0x1a0>
10003250:	4651      	mov	r1, sl
10003252:	e7c1      	b.n	100031d8 <_malloc_r+0x134>
10003254:	230c      	movs	r3, #12
10003256:	9a00      	ldr	r2, [sp, #0]
10003258:	2000      	movs	r0, #0
1000325a:	6013      	str	r3, [r2, #0]
1000325c:	e74f      	b.n	100030fe <_malloc_r+0x5a>
1000325e:	2080      	movs	r0, #128	; 0x80
10003260:	233f      	movs	r3, #63	; 0x3f
10003262:	2140      	movs	r1, #64	; 0x40
10003264:	469c      	mov	ip, r3
10003266:	0080      	lsls	r0, r0, #2
10003268:	e76b      	b.n	10003142 <_malloc_r+0x9e>
1000326a:	2203      	movs	r2, #3
1000326c:	68bc      	ldr	r4, [r7, #8]
1000326e:	6863      	ldr	r3, [r4, #4]
10003270:	4393      	bics	r3, r2
10003272:	4699      	mov	r9, r3
10003274:	42ab      	cmp	r3, r5
10003276:	d302      	bcc.n	1000327e <_malloc_r+0x1da>
10003278:	1b5b      	subs	r3, r3, r5
1000327a:	2b0f      	cmp	r3, #15
1000327c:	dc44      	bgt.n	10003308 <_malloc_r+0x264>
1000327e:	0023      	movs	r3, r4
10003280:	444b      	add	r3, r9
10003282:	4a59      	ldr	r2, [pc, #356]	; (100033e8 <_malloc_r+0x344>)
10003284:	9301      	str	r3, [sp, #4]
10003286:	4b59      	ldr	r3, [pc, #356]	; (100033ec <_malloc_r+0x348>)
10003288:	4693      	mov	fp, r2
1000328a:	681b      	ldr	r3, [r3, #0]
1000328c:	6812      	ldr	r2, [r2, #0]
1000328e:	18eb      	adds	r3, r5, r3
10003290:	3201      	adds	r2, #1
10003292:	d100      	bne.n	10003296 <_malloc_r+0x1f2>
10003294:	e132      	b.n	100034fc <_malloc_r+0x458>
10003296:	4a56      	ldr	r2, [pc, #344]	; (100033f0 <_malloc_r+0x34c>)
10003298:	4694      	mov	ip, r2
1000329a:	4463      	add	r3, ip
1000329c:	0b1b      	lsrs	r3, r3, #12
1000329e:	031b      	lsls	r3, r3, #12
100032a0:	001e      	movs	r6, r3
100032a2:	0031      	movs	r1, r6
100032a4:	9800      	ldr	r0, [sp, #0]
100032a6:	f000 fa4d 	bl	10003744 <_sbrk_r>
100032aa:	0003      	movs	r3, r0
100032ac:	4680      	mov	r8, r0
100032ae:	3301      	adds	r3, #1
100032b0:	d100      	bne.n	100032b4 <_malloc_r+0x210>
100032b2:	e0bf      	b.n	10003434 <_malloc_r+0x390>
100032b4:	9b01      	ldr	r3, [sp, #4]
100032b6:	4283      	cmp	r3, r0
100032b8:	d900      	bls.n	100032bc <_malloc_r+0x218>
100032ba:	e0b9      	b.n	10003430 <_malloc_r+0x38c>
100032bc:	46b4      	mov	ip, r6
100032be:	4b4d      	ldr	r3, [pc, #308]	; (100033f4 <_malloc_r+0x350>)
100032c0:	6819      	ldr	r1, [r3, #0]
100032c2:	469a      	mov	sl, r3
100032c4:	4461      	add	r1, ip
100032c6:	6019      	str	r1, [r3, #0]
100032c8:	9b01      	ldr	r3, [sp, #4]
100032ca:	000a      	movs	r2, r1
100032cc:	4283      	cmp	r3, r0
100032ce:	d000      	beq.n	100032d2 <_malloc_r+0x22e>
100032d0:	e0cb      	b.n	1000346a <_malloc_r+0x3c6>
100032d2:	4643      	mov	r3, r8
100032d4:	051b      	lsls	r3, r3, #20
100032d6:	d000      	beq.n	100032da <_malloc_r+0x236>
100032d8:	e0c7      	b.n	1000346a <_malloc_r+0x3c6>
100032da:	68bb      	ldr	r3, [r7, #8]
100032dc:	0032      	movs	r2, r6
100032de:	4698      	mov	r8, r3
100032e0:	2301      	movs	r3, #1
100032e2:	444a      	add	r2, r9
100032e4:	431a      	orrs	r2, r3
100032e6:	4643      	mov	r3, r8
100032e8:	605a      	str	r2, [r3, #4]
100032ea:	4b43      	ldr	r3, [pc, #268]	; (100033f8 <_malloc_r+0x354>)
100032ec:	6818      	ldr	r0, [r3, #0]
100032ee:	4288      	cmp	r0, r1
100032f0:	d200      	bcs.n	100032f4 <_malloc_r+0x250>
100032f2:	6019      	str	r1, [r3, #0]
100032f4:	4b41      	ldr	r3, [pc, #260]	; (100033fc <_malloc_r+0x358>)
100032f6:	6818      	ldr	r0, [r3, #0]
100032f8:	4288      	cmp	r0, r1
100032fa:	d200      	bcs.n	100032fe <_malloc_r+0x25a>
100032fc:	6019      	str	r1, [r3, #0]
100032fe:	4644      	mov	r4, r8
10003300:	e09a      	b.n	10003438 <_malloc_r+0x394>
10003302:	687b      	ldr	r3, [r7, #4]
10003304:	4698      	mov	r8, r3
10003306:	e756      	b.n	100031b6 <_malloc_r+0x112>
10003308:	2201      	movs	r2, #1
1000330a:	0029      	movs	r1, r5
1000330c:	4313      	orrs	r3, r2
1000330e:	4311      	orrs	r1, r2
10003310:	1965      	adds	r5, r4, r5
10003312:	6061      	str	r1, [r4, #4]
10003314:	9800      	ldr	r0, [sp, #0]
10003316:	60bd      	str	r5, [r7, #8]
10003318:	606b      	str	r3, [r5, #4]
1000331a:	f000 fa0b 	bl	10003734 <__malloc_unlock>
1000331e:	0020      	movs	r0, r4
10003320:	3008      	adds	r0, #8
10003322:	e6ec      	b.n	100030fe <_malloc_r+0x5a>
10003324:	68dc      	ldr	r4, [r3, #12]
10003326:	3102      	adds	r1, #2
10003328:	42a3      	cmp	r3, r4
1000332a:	d100      	bne.n	1000332e <_malloc_r+0x28a>
1000332c:	e71c      	b.n	10003168 <_malloc_r+0xc4>
1000332e:	e6d5      	b.n	100030dc <_malloc_r+0x38>
10003330:	0a5a      	lsrs	r2, r3, #9
10003332:	2a04      	cmp	r2, #4
10003334:	d976      	bls.n	10003424 <_malloc_r+0x380>
10003336:	2a14      	cmp	r2, #20
10003338:	d900      	bls.n	1000333c <_malloc_r+0x298>
1000333a:	e0f9      	b.n	10003530 <_malloc_r+0x48c>
1000333c:	0010      	movs	r0, r2
1000333e:	325c      	adds	r2, #92	; 0x5c
10003340:	305b      	adds	r0, #91	; 0x5b
10003342:	00d2      	lsls	r2, r2, #3
10003344:	2608      	movs	r6, #8
10003346:	4276      	negs	r6, r6
10003348:	46b4      	mov	ip, r6
1000334a:	18ba      	adds	r2, r7, r2
1000334c:	4494      	add	ip, r2
1000334e:	4662      	mov	r2, ip
10003350:	6892      	ldr	r2, [r2, #8]
10003352:	360b      	adds	r6, #11
10003354:	46b1      	mov	r9, r6
10003356:	4594      	cmp	ip, r2
10003358:	d103      	bne.n	10003362 <_malloc_r+0x2be>
1000335a:	e0d2      	b.n	10003502 <_malloc_r+0x45e>
1000335c:	6892      	ldr	r2, [r2, #8]
1000335e:	4594      	cmp	ip, r2
10003360:	d004      	beq.n	1000336c <_malloc_r+0x2c8>
10003362:	464e      	mov	r6, r9
10003364:	6850      	ldr	r0, [r2, #4]
10003366:	43b0      	bics	r0, r6
10003368:	4298      	cmp	r0, r3
1000336a:	d8f7      	bhi.n	1000335c <_malloc_r+0x2b8>
1000336c:	68d3      	ldr	r3, [r2, #12]
1000336e:	469c      	mov	ip, r3
10003370:	4663      	mov	r3, ip
10003372:	60a2      	str	r2, [r4, #8]
10003374:	60e3      	str	r3, [r4, #12]
10003376:	609c      	str	r4, [r3, #8]
10003378:	60d4      	str	r4, [r2, #12]
1000337a:	e71c      	b.n	100031b6 <_malloc_r+0x112>
1000337c:	2914      	cmp	r1, #20
1000337e:	d968      	bls.n	10003452 <_malloc_r+0x3ae>
10003380:	2954      	cmp	r1, #84	; 0x54
10003382:	d900      	bls.n	10003386 <_malloc_r+0x2e2>
10003384:	e0dc      	b.n	10003540 <_malloc_r+0x49c>
10003386:	236e      	movs	r3, #110	; 0x6e
10003388:	469c      	mov	ip, r3
1000338a:	0b29      	lsrs	r1, r5, #12
1000338c:	448c      	add	ip, r1
1000338e:	316f      	adds	r1, #111	; 0x6f
10003390:	00c8      	lsls	r0, r1, #3
10003392:	e6d6      	b.n	10003142 <_malloc_r+0x9e>
10003394:	2001      	movs	r0, #1
10003396:	1961      	adds	r1, r4, r5
10003398:	4305      	orrs	r5, r0
1000339a:	6065      	str	r5, [r4, #4]
1000339c:	68a5      	ldr	r5, [r4, #8]
1000339e:	3708      	adds	r7, #8
100033a0:	60eb      	str	r3, [r5, #12]
100033a2:	4330      	orrs	r0, r6
100033a4:	609d      	str	r5, [r3, #8]
100033a6:	60b9      	str	r1, [r7, #8]
100033a8:	60f9      	str	r1, [r7, #12]
100033aa:	6048      	str	r0, [r1, #4]
100033ac:	60cf      	str	r7, [r1, #12]
100033ae:	9800      	ldr	r0, [sp, #0]
100033b0:	608f      	str	r7, [r1, #8]
100033b2:	50a6      	str	r6, [r4, r2]
100033b4:	f000 f9be 	bl	10003734 <__malloc_unlock>
100033b8:	0020      	movs	r0, r4
100033ba:	3008      	adds	r0, #8
100033bc:	e69f      	b.n	100030fe <_malloc_r+0x5a>
100033be:	2001      	movs	r0, #1
100033c0:	18a2      	adds	r2, r4, r2
100033c2:	6851      	ldr	r1, [r2, #4]
100033c4:	4301      	orrs	r1, r0
100033c6:	6051      	str	r1, [r2, #4]
100033c8:	68a2      	ldr	r2, [r4, #8]
100033ca:	9800      	ldr	r0, [sp, #0]
100033cc:	60d3      	str	r3, [r2, #12]
100033ce:	609a      	str	r2, [r3, #8]
100033d0:	f000 f9b0 	bl	10003734 <__malloc_unlock>
100033d4:	0020      	movs	r0, r4
100033d6:	3008      	adds	r0, #8
100033d8:	e691      	b.n	100030fe <_malloc_r+0x5a>
100033da:	002b      	movs	r3, r5
100033dc:	08e9      	lsrs	r1, r5, #3
100033de:	3308      	adds	r3, #8
100033e0:	e674      	b.n	100030cc <_malloc_r+0x28>
100033e2:	46c0      	nop			; (mov r8, r8)
100033e4:	20000290 	.word	0x20000290
100033e8:	200006e0 	.word	0x200006e0
100033ec:	20000c58 	.word	0x20000c58
100033f0:	0000100f 	.word	0x0000100f
100033f4:	20000c28 	.word	0x20000c28
100033f8:	20000c54 	.word	0x20000c54
100033fc:	20000c50 	.word	0x20000c50
10003400:	2601      	movs	r6, #1
10003402:	1961      	adds	r1, r4, r5
10003404:	4335      	orrs	r5, r6
10003406:	6065      	str	r5, [r4, #4]
10003408:	6139      	str	r1, [r7, #16]
1000340a:	6179      	str	r1, [r7, #20]
1000340c:	60ca      	str	r2, [r1, #12]
1000340e:	608a      	str	r2, [r1, #8]
10003410:	0032      	movs	r2, r6
10003412:	4302      	orrs	r2, r0
10003414:	604a      	str	r2, [r1, #4]
10003416:	50e0      	str	r0, [r4, r3]
10003418:	9800      	ldr	r0, [sp, #0]
1000341a:	f000 f98b 	bl	10003734 <__malloc_unlock>
1000341e:	0020      	movs	r0, r4
10003420:	3008      	adds	r0, #8
10003422:	e66c      	b.n	100030fe <_malloc_r+0x5a>
10003424:	099a      	lsrs	r2, r3, #6
10003426:	0010      	movs	r0, r2
10003428:	3239      	adds	r2, #57	; 0x39
1000342a:	3038      	adds	r0, #56	; 0x38
1000342c:	00d2      	lsls	r2, r2, #3
1000342e:	e789      	b.n	10003344 <_malloc_r+0x2a0>
10003430:	42bc      	cmp	r4, r7
10003432:	d014      	beq.n	1000345e <_malloc_r+0x3ba>
10003434:	68bc      	ldr	r4, [r7, #8]
10003436:	6862      	ldr	r2, [r4, #4]
10003438:	2303      	movs	r3, #3
1000343a:	439a      	bics	r2, r3
1000343c:	1b53      	subs	r3, r2, r5
1000343e:	42aa      	cmp	r2, r5
10003440:	d302      	bcc.n	10003448 <_malloc_r+0x3a4>
10003442:	2b0f      	cmp	r3, #15
10003444:	dd00      	ble.n	10003448 <_malloc_r+0x3a4>
10003446:	e75f      	b.n	10003308 <_malloc_r+0x264>
10003448:	9800      	ldr	r0, [sp, #0]
1000344a:	f000 f973 	bl	10003734 <__malloc_unlock>
1000344e:	2000      	movs	r0, #0
10003450:	e655      	b.n	100030fe <_malloc_r+0x5a>
10003452:	235b      	movs	r3, #91	; 0x5b
10003454:	469c      	mov	ip, r3
10003456:	448c      	add	ip, r1
10003458:	315c      	adds	r1, #92	; 0x5c
1000345a:	00c8      	lsls	r0, r1, #3
1000345c:	e671      	b.n	10003142 <_malloc_r+0x9e>
1000345e:	4b60      	ldr	r3, [pc, #384]	; (100035e0 <_malloc_r+0x53c>)
10003460:	46b4      	mov	ip, r6
10003462:	469a      	mov	sl, r3
10003464:	681a      	ldr	r2, [r3, #0]
10003466:	4462      	add	r2, ip
10003468:	601a      	str	r2, [r3, #0]
1000346a:	465b      	mov	r3, fp
1000346c:	681b      	ldr	r3, [r3, #0]
1000346e:	3301      	adds	r3, #1
10003470:	d071      	beq.n	10003556 <_malloc_r+0x4b2>
10003472:	4643      	mov	r3, r8
10003474:	9901      	ldr	r1, [sp, #4]
10003476:	1a5b      	subs	r3, r3, r1
10003478:	189b      	adds	r3, r3, r2
1000347a:	4652      	mov	r2, sl
1000347c:	6013      	str	r3, [r2, #0]
1000347e:	2307      	movs	r3, #7
10003480:	4642      	mov	r2, r8
10003482:	4641      	mov	r1, r8
10003484:	401a      	ands	r2, r3
10003486:	9201      	str	r2, [sp, #4]
10003488:	4219      	tst	r1, r3
1000348a:	d042      	beq.n	10003512 <_malloc_r+0x46e>
1000348c:	1a8b      	subs	r3, r1, r2
1000348e:	2108      	movs	r1, #8
10003490:	4688      	mov	r8, r1
10003492:	0031      	movs	r1, r6
10003494:	4498      	add	r8, r3
10003496:	4b53      	ldr	r3, [pc, #332]	; (100035e4 <_malloc_r+0x540>)
10003498:	4441      	add	r1, r8
1000349a:	1a9b      	subs	r3, r3, r2
1000349c:	1a5b      	subs	r3, r3, r1
1000349e:	051b      	lsls	r3, r3, #20
100034a0:	0d1b      	lsrs	r3, r3, #20
100034a2:	000e      	movs	r6, r1
100034a4:	9800      	ldr	r0, [sp, #0]
100034a6:	0019      	movs	r1, r3
100034a8:	469b      	mov	fp, r3
100034aa:	f000 f94b 	bl	10003744 <_sbrk_r>
100034ae:	1c43      	adds	r3, r0, #1
100034b0:	d06c      	beq.n	1000358c <_malloc_r+0x4e8>
100034b2:	4643      	mov	r3, r8
100034b4:	1ac0      	subs	r0, r0, r3
100034b6:	0003      	movs	r3, r0
100034b8:	445b      	add	r3, fp
100034ba:	001e      	movs	r6, r3
100034bc:	4653      	mov	r3, sl
100034be:	6819      	ldr	r1, [r3, #0]
100034c0:	2001      	movs	r0, #1
100034c2:	0032      	movs	r2, r6
100034c4:	4459      	add	r1, fp
100034c6:	6019      	str	r1, [r3, #0]
100034c8:	4643      	mov	r3, r8
100034ca:	4302      	orrs	r2, r0
100034cc:	60bb      	str	r3, [r7, #8]
100034ce:	605a      	str	r2, [r3, #4]
100034d0:	42bc      	cmp	r4, r7
100034d2:	d100      	bne.n	100034d6 <_malloc_r+0x432>
100034d4:	e709      	b.n	100032ea <_malloc_r+0x246>
100034d6:	464b      	mov	r3, r9
100034d8:	2b0f      	cmp	r3, #15
100034da:	d940      	bls.n	1000355e <_malloc_r+0x4ba>
100034dc:	2207      	movs	r2, #7
100034de:	3b0c      	subs	r3, #12
100034e0:	4393      	bics	r3, r2
100034e2:	6862      	ldr	r2, [r4, #4]
100034e4:	4002      	ands	r2, r0
100034e6:	2005      	movs	r0, #5
100034e8:	431a      	orrs	r2, r3
100034ea:	6062      	str	r2, [r4, #4]
100034ec:	18e2      	adds	r2, r4, r3
100034ee:	6050      	str	r0, [r2, #4]
100034f0:	6090      	str	r0, [r2, #8]
100034f2:	2b0f      	cmp	r3, #15
100034f4:	d854      	bhi.n	100035a0 <_malloc_r+0x4fc>
100034f6:	4643      	mov	r3, r8
100034f8:	685a      	ldr	r2, [r3, #4]
100034fa:	e6f6      	b.n	100032ea <_malloc_r+0x246>
100034fc:	3310      	adds	r3, #16
100034fe:	001e      	movs	r6, r3
10003500:	e6cf      	b.n	100032a2 <_malloc_r+0x1fe>
10003502:	2301      	movs	r3, #1
10003504:	1080      	asrs	r0, r0, #2
10003506:	4083      	lsls	r3, r0
10003508:	4640      	mov	r0, r8
1000350a:	4318      	orrs	r0, r3
1000350c:	4680      	mov	r8, r0
1000350e:	6078      	str	r0, [r7, #4]
10003510:	e72e      	b.n	10003370 <_malloc_r+0x2cc>
10003512:	0033      	movs	r3, r6
10003514:	4443      	add	r3, r8
10003516:	425b      	negs	r3, r3
10003518:	051b      	lsls	r3, r3, #20
1000351a:	0d1b      	lsrs	r3, r3, #20
1000351c:	0019      	movs	r1, r3
1000351e:	9800      	ldr	r0, [sp, #0]
10003520:	469b      	mov	fp, r3
10003522:	f000 f90f 	bl	10003744 <_sbrk_r>
10003526:	1c43      	adds	r3, r0, #1
10003528:	d1c3      	bne.n	100034b2 <_malloc_r+0x40e>
1000352a:	2300      	movs	r3, #0
1000352c:	469b      	mov	fp, r3
1000352e:	e7c5      	b.n	100034bc <_malloc_r+0x418>
10003530:	2a54      	cmp	r2, #84	; 0x54
10003532:	d817      	bhi.n	10003564 <_malloc_r+0x4c0>
10003534:	0b1a      	lsrs	r2, r3, #12
10003536:	0010      	movs	r0, r2
10003538:	326f      	adds	r2, #111	; 0x6f
1000353a:	306e      	adds	r0, #110	; 0x6e
1000353c:	00d2      	lsls	r2, r2, #3
1000353e:	e701      	b.n	10003344 <_malloc_r+0x2a0>
10003540:	23aa      	movs	r3, #170	; 0xaa
10003542:	005b      	lsls	r3, r3, #1
10003544:	4299      	cmp	r1, r3
10003546:	d817      	bhi.n	10003578 <_malloc_r+0x4d4>
10003548:	3bdd      	subs	r3, #221	; 0xdd
1000354a:	469c      	mov	ip, r3
1000354c:	0be9      	lsrs	r1, r5, #15
1000354e:	448c      	add	ip, r1
10003550:	3178      	adds	r1, #120	; 0x78
10003552:	00c8      	lsls	r0, r1, #3
10003554:	e5f5      	b.n	10003142 <_malloc_r+0x9e>
10003556:	465b      	mov	r3, fp
10003558:	4642      	mov	r2, r8
1000355a:	601a      	str	r2, [r3, #0]
1000355c:	e78f      	b.n	1000347e <_malloc_r+0x3da>
1000355e:	4643      	mov	r3, r8
10003560:	6058      	str	r0, [r3, #4]
10003562:	e771      	b.n	10003448 <_malloc_r+0x3a4>
10003564:	20aa      	movs	r0, #170	; 0xaa
10003566:	0040      	lsls	r0, r0, #1
10003568:	4282      	cmp	r2, r0
1000356a:	d824      	bhi.n	100035b6 <_malloc_r+0x512>
1000356c:	0bda      	lsrs	r2, r3, #15
1000356e:	0010      	movs	r0, r2
10003570:	3278      	adds	r2, #120	; 0x78
10003572:	3077      	adds	r0, #119	; 0x77
10003574:	00d2      	lsls	r2, r2, #3
10003576:	e6e5      	b.n	10003344 <_malloc_r+0x2a0>
10003578:	4b1b      	ldr	r3, [pc, #108]	; (100035e8 <_malloc_r+0x544>)
1000357a:	4299      	cmp	r1, r3
1000357c:	d824      	bhi.n	100035c8 <_malloc_r+0x524>
1000357e:	237c      	movs	r3, #124	; 0x7c
10003580:	469c      	mov	ip, r3
10003582:	0ca9      	lsrs	r1, r5, #18
10003584:	448c      	add	ip, r1
10003586:	317d      	adds	r1, #125	; 0x7d
10003588:	00c8      	lsls	r0, r1, #3
1000358a:	e5da      	b.n	10003142 <_malloc_r+0x9e>
1000358c:	46b4      	mov	ip, r6
1000358e:	4642      	mov	r2, r8
10003590:	9b01      	ldr	r3, [sp, #4]
10003592:	3b08      	subs	r3, #8
10003594:	4463      	add	r3, ip
10003596:	1a9b      	subs	r3, r3, r2
10003598:	001e      	movs	r6, r3
1000359a:	2300      	movs	r3, #0
1000359c:	469b      	mov	fp, r3
1000359e:	e78d      	b.n	100034bc <_malloc_r+0x418>
100035a0:	0021      	movs	r1, r4
100035a2:	9800      	ldr	r0, [sp, #0]
100035a4:	3108      	adds	r1, #8
100035a6:	f001 fa39 	bl	10004a1c <_free_r>
100035aa:	4653      	mov	r3, sl
100035ac:	6819      	ldr	r1, [r3, #0]
100035ae:	68bb      	ldr	r3, [r7, #8]
100035b0:	4698      	mov	r8, r3
100035b2:	685a      	ldr	r2, [r3, #4]
100035b4:	e699      	b.n	100032ea <_malloc_r+0x246>
100035b6:	480c      	ldr	r0, [pc, #48]	; (100035e8 <_malloc_r+0x544>)
100035b8:	4282      	cmp	r2, r0
100035ba:	d80b      	bhi.n	100035d4 <_malloc_r+0x530>
100035bc:	0c9a      	lsrs	r2, r3, #18
100035be:	0010      	movs	r0, r2
100035c0:	327d      	adds	r2, #125	; 0x7d
100035c2:	307c      	adds	r0, #124	; 0x7c
100035c4:	00d2      	lsls	r2, r2, #3
100035c6:	e6bd      	b.n	10003344 <_malloc_r+0x2a0>
100035c8:	20fe      	movs	r0, #254	; 0xfe
100035ca:	237e      	movs	r3, #126	; 0x7e
100035cc:	217f      	movs	r1, #127	; 0x7f
100035ce:	469c      	mov	ip, r3
100035d0:	0080      	lsls	r0, r0, #2
100035d2:	e5b6      	b.n	10003142 <_malloc_r+0x9e>
100035d4:	22fe      	movs	r2, #254	; 0xfe
100035d6:	207e      	movs	r0, #126	; 0x7e
100035d8:	0092      	lsls	r2, r2, #2
100035da:	e6b3      	b.n	10003344 <_malloc_r+0x2a0>
100035dc:	687b      	ldr	r3, [r7, #4]
100035de:	e62b      	b.n	10003238 <_malloc_r+0x194>
100035e0:	20000c28 	.word	0x20000c28
100035e4:	00001008 	.word	0x00001008
100035e8:	00000554 	.word	0x00000554

100035ec <memcpy>:
100035ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100035ee:	0005      	movs	r5, r0
100035f0:	2a0f      	cmp	r2, #15
100035f2:	d933      	bls.n	1000365c <memcpy+0x70>
100035f4:	2403      	movs	r4, #3
100035f6:	0003      	movs	r3, r0
100035f8:	0026      	movs	r6, r4
100035fa:	430b      	orrs	r3, r1
100035fc:	401e      	ands	r6, r3
100035fe:	421c      	tst	r4, r3
10003600:	d137      	bne.n	10003672 <memcpy+0x86>
10003602:	0015      	movs	r5, r2
10003604:	3d10      	subs	r5, #16
10003606:	092d      	lsrs	r5, r5, #4
10003608:	0003      	movs	r3, r0
1000360a:	000c      	movs	r4, r1
1000360c:	46ac      	mov	ip, r5
1000360e:	012f      	lsls	r7, r5, #4
10003610:	183f      	adds	r7, r7, r0
10003612:	6865      	ldr	r5, [r4, #4]
10003614:	605d      	str	r5, [r3, #4]
10003616:	68a5      	ldr	r5, [r4, #8]
10003618:	609d      	str	r5, [r3, #8]
1000361a:	68e5      	ldr	r5, [r4, #12]
1000361c:	60dd      	str	r5, [r3, #12]
1000361e:	6825      	ldr	r5, [r4, #0]
10003620:	3410      	adds	r4, #16
10003622:	601d      	str	r5, [r3, #0]
10003624:	001d      	movs	r5, r3
10003626:	3310      	adds	r3, #16
10003628:	42bd      	cmp	r5, r7
1000362a:	d1f2      	bne.n	10003612 <memcpy+0x26>
1000362c:	4665      	mov	r5, ip
1000362e:	230f      	movs	r3, #15
10003630:	240c      	movs	r4, #12
10003632:	3501      	adds	r5, #1
10003634:	012d      	lsls	r5, r5, #4
10003636:	1949      	adds	r1, r1, r5
10003638:	4013      	ands	r3, r2
1000363a:	1945      	adds	r5, r0, r5
1000363c:	4214      	tst	r4, r2
1000363e:	d01a      	beq.n	10003676 <memcpy+0x8a>
10003640:	598c      	ldr	r4, [r1, r6]
10003642:	51ac      	str	r4, [r5, r6]
10003644:	3604      	adds	r6, #4
10003646:	1b9c      	subs	r4, r3, r6
10003648:	2c03      	cmp	r4, #3
1000364a:	d8f9      	bhi.n	10003640 <memcpy+0x54>
1000364c:	3b04      	subs	r3, #4
1000364e:	089b      	lsrs	r3, r3, #2
10003650:	3301      	adds	r3, #1
10003652:	009b      	lsls	r3, r3, #2
10003654:	18ed      	adds	r5, r5, r3
10003656:	18c9      	adds	r1, r1, r3
10003658:	2303      	movs	r3, #3
1000365a:	401a      	ands	r2, r3
1000365c:	1e56      	subs	r6, r2, #1
1000365e:	2a00      	cmp	r2, #0
10003660:	d006      	beq.n	10003670 <memcpy+0x84>
10003662:	2300      	movs	r3, #0
10003664:	5ccc      	ldrb	r4, [r1, r3]
10003666:	001a      	movs	r2, r3
10003668:	54ec      	strb	r4, [r5, r3]
1000366a:	3301      	adds	r3, #1
1000366c:	4296      	cmp	r6, r2
1000366e:	d1f9      	bne.n	10003664 <memcpy+0x78>
10003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003672:	1e56      	subs	r6, r2, #1
10003674:	e7f5      	b.n	10003662 <memcpy+0x76>
10003676:	001a      	movs	r2, r3
10003678:	e7f0      	b.n	1000365c <memcpy+0x70>
1000367a:	46c0      	nop			; (mov r8, r8)

1000367c <memset>:
1000367c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000367e:	0005      	movs	r5, r0
10003680:	0783      	lsls	r3, r0, #30
10003682:	d049      	beq.n	10003718 <memset+0x9c>
10003684:	1e54      	subs	r4, r2, #1
10003686:	2a00      	cmp	r2, #0
10003688:	d045      	beq.n	10003716 <memset+0x9a>
1000368a:	0003      	movs	r3, r0
1000368c:	2603      	movs	r6, #3
1000368e:	b2ca      	uxtb	r2, r1
10003690:	e002      	b.n	10003698 <memset+0x1c>
10003692:	3501      	adds	r5, #1
10003694:	3c01      	subs	r4, #1
10003696:	d33e      	bcc.n	10003716 <memset+0x9a>
10003698:	3301      	adds	r3, #1
1000369a:	702a      	strb	r2, [r5, #0]
1000369c:	4233      	tst	r3, r6
1000369e:	d1f8      	bne.n	10003692 <memset+0x16>
100036a0:	2c03      	cmp	r4, #3
100036a2:	d930      	bls.n	10003706 <memset+0x8a>
100036a4:	22ff      	movs	r2, #255	; 0xff
100036a6:	400a      	ands	r2, r1
100036a8:	0215      	lsls	r5, r2, #8
100036aa:	18ad      	adds	r5, r5, r2
100036ac:	042a      	lsls	r2, r5, #16
100036ae:	18ad      	adds	r5, r5, r2
100036b0:	2c0f      	cmp	r4, #15
100036b2:	d934      	bls.n	1000371e <memset+0xa2>
100036b4:	0027      	movs	r7, r4
100036b6:	3f10      	subs	r7, #16
100036b8:	093f      	lsrs	r7, r7, #4
100036ba:	013e      	lsls	r6, r7, #4
100036bc:	46b4      	mov	ip, r6
100036be:	001e      	movs	r6, r3
100036c0:	001a      	movs	r2, r3
100036c2:	3610      	adds	r6, #16
100036c4:	4466      	add	r6, ip
100036c6:	6015      	str	r5, [r2, #0]
100036c8:	6055      	str	r5, [r2, #4]
100036ca:	6095      	str	r5, [r2, #8]
100036cc:	60d5      	str	r5, [r2, #12]
100036ce:	3210      	adds	r2, #16
100036d0:	4296      	cmp	r6, r2
100036d2:	d1f8      	bne.n	100036c6 <memset+0x4a>
100036d4:	3701      	adds	r7, #1
100036d6:	013f      	lsls	r7, r7, #4
100036d8:	19db      	adds	r3, r3, r7
100036da:	270f      	movs	r7, #15
100036dc:	220c      	movs	r2, #12
100036de:	4027      	ands	r7, r4
100036e0:	4022      	ands	r2, r4
100036e2:	003c      	movs	r4, r7
100036e4:	2a00      	cmp	r2, #0
100036e6:	d00e      	beq.n	10003706 <memset+0x8a>
100036e8:	1f3e      	subs	r6, r7, #4
100036ea:	08b6      	lsrs	r6, r6, #2
100036ec:	00b4      	lsls	r4, r6, #2
100036ee:	46a4      	mov	ip, r4
100036f0:	001a      	movs	r2, r3
100036f2:	1d1c      	adds	r4, r3, #4
100036f4:	4464      	add	r4, ip
100036f6:	c220      	stmia	r2!, {r5}
100036f8:	42a2      	cmp	r2, r4
100036fa:	d1fc      	bne.n	100036f6 <memset+0x7a>
100036fc:	2403      	movs	r4, #3
100036fe:	3601      	adds	r6, #1
10003700:	00b6      	lsls	r6, r6, #2
10003702:	199b      	adds	r3, r3, r6
10003704:	403c      	ands	r4, r7
10003706:	2c00      	cmp	r4, #0
10003708:	d005      	beq.n	10003716 <memset+0x9a>
1000370a:	b2c9      	uxtb	r1, r1
1000370c:	191c      	adds	r4, r3, r4
1000370e:	7019      	strb	r1, [r3, #0]
10003710:	3301      	adds	r3, #1
10003712:	429c      	cmp	r4, r3
10003714:	d1fb      	bne.n	1000370e <memset+0x92>
10003716:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003718:	0003      	movs	r3, r0
1000371a:	0014      	movs	r4, r2
1000371c:	e7c0      	b.n	100036a0 <memset+0x24>
1000371e:	0027      	movs	r7, r4
10003720:	e7e2      	b.n	100036e8 <memset+0x6c>
10003722:	46c0      	nop			; (mov r8, r8)

10003724 <__malloc_lock>:
10003724:	b510      	push	{r4, lr}
10003726:	4802      	ldr	r0, [pc, #8]	; (10003730 <__malloc_lock+0xc>)
10003728:	f002 fa28 	bl	10005b7c <__retarget_lock_acquire_recursive>
1000372c:	bd10      	pop	{r4, pc}
1000372e:	46c0      	nop			; (mov r8, r8)
10003730:	20000860 	.word	0x20000860

10003734 <__malloc_unlock>:
10003734:	b510      	push	{r4, lr}
10003736:	4802      	ldr	r0, [pc, #8]	; (10003740 <__malloc_unlock+0xc>)
10003738:	f002 fa27 	bl	10005b8a <__retarget_lock_release_recursive>
1000373c:	bd10      	pop	{r4, pc}
1000373e:	46c0      	nop			; (mov r8, r8)
10003740:	20000860 	.word	0x20000860

10003744 <_sbrk_r>:
10003744:	2300      	movs	r3, #0
10003746:	b570      	push	{r4, r5, r6, lr}
10003748:	4c06      	ldr	r4, [pc, #24]	; (10003764 <_sbrk_r+0x20>)
1000374a:	0005      	movs	r5, r0
1000374c:	0008      	movs	r0, r1
1000374e:	6023      	str	r3, [r4, #0]
10003750:	f7fd fe6c 	bl	1000142c <_sbrk>
10003754:	1c43      	adds	r3, r0, #1
10003756:	d000      	beq.n	1000375a <_sbrk_r+0x16>
10003758:	bd70      	pop	{r4, r5, r6, pc}
1000375a:	6823      	ldr	r3, [r4, #0]
1000375c:	2b00      	cmp	r3, #0
1000375e:	d0fb      	beq.n	10003758 <_sbrk_r+0x14>
10003760:	602b      	str	r3, [r5, #0]
10003762:	e7f9      	b.n	10003758 <_sbrk_r+0x14>
10003764:	20000c5c 	.word	0x20000c5c

10003768 <strlen>:
10003768:	b510      	push	{r4, lr}
1000376a:	0783      	lsls	r3, r0, #30
1000376c:	d00a      	beq.n	10003784 <strlen+0x1c>
1000376e:	0003      	movs	r3, r0
10003770:	2103      	movs	r1, #3
10003772:	e002      	b.n	1000377a <strlen+0x12>
10003774:	3301      	adds	r3, #1
10003776:	420b      	tst	r3, r1
10003778:	d005      	beq.n	10003786 <strlen+0x1e>
1000377a:	781a      	ldrb	r2, [r3, #0]
1000377c:	2a00      	cmp	r2, #0
1000377e:	d1f9      	bne.n	10003774 <strlen+0xc>
10003780:	1a18      	subs	r0, r3, r0
10003782:	bd10      	pop	{r4, pc}
10003784:	0003      	movs	r3, r0
10003786:	6819      	ldr	r1, [r3, #0]
10003788:	4a0c      	ldr	r2, [pc, #48]	; (100037bc <strlen+0x54>)
1000378a:	4c0d      	ldr	r4, [pc, #52]	; (100037c0 <strlen+0x58>)
1000378c:	188a      	adds	r2, r1, r2
1000378e:	438a      	bics	r2, r1
10003790:	4222      	tst	r2, r4
10003792:	d10f      	bne.n	100037b4 <strlen+0x4c>
10003794:	6859      	ldr	r1, [r3, #4]
10003796:	4a09      	ldr	r2, [pc, #36]	; (100037bc <strlen+0x54>)
10003798:	3304      	adds	r3, #4
1000379a:	188a      	adds	r2, r1, r2
1000379c:	438a      	bics	r2, r1
1000379e:	4222      	tst	r2, r4
100037a0:	d108      	bne.n	100037b4 <strlen+0x4c>
100037a2:	6859      	ldr	r1, [r3, #4]
100037a4:	4a05      	ldr	r2, [pc, #20]	; (100037bc <strlen+0x54>)
100037a6:	3304      	adds	r3, #4
100037a8:	188a      	adds	r2, r1, r2
100037aa:	438a      	bics	r2, r1
100037ac:	4222      	tst	r2, r4
100037ae:	d0f1      	beq.n	10003794 <strlen+0x2c>
100037b0:	e000      	b.n	100037b4 <strlen+0x4c>
100037b2:	3301      	adds	r3, #1
100037b4:	781a      	ldrb	r2, [r3, #0]
100037b6:	2a00      	cmp	r2, #0
100037b8:	d1fb      	bne.n	100037b2 <strlen+0x4a>
100037ba:	e7e1      	b.n	10003780 <strlen+0x18>
100037bc:	fefefeff 	.word	0xfefefeff
100037c0:	80808080 	.word	0x80808080

100037c4 <strnlen>:
100037c4:	b510      	push	{r4, lr}
100037c6:	0003      	movs	r3, r0
100037c8:	1844      	adds	r4, r0, r1
100037ca:	2900      	cmp	r1, #0
100037cc:	d103      	bne.n	100037d6 <strnlen+0x12>
100037ce:	e009      	b.n	100037e4 <strnlen+0x20>
100037d0:	3301      	adds	r3, #1
100037d2:	429c      	cmp	r4, r3
100037d4:	d004      	beq.n	100037e0 <strnlen+0x1c>
100037d6:	781a      	ldrb	r2, [r3, #0]
100037d8:	2a00      	cmp	r2, #0
100037da:	d1f9      	bne.n	100037d0 <strnlen+0xc>
100037dc:	1a18      	subs	r0, r3, r0
100037de:	bd10      	pop	{r4, pc}
100037e0:	1a20      	subs	r0, r4, r0
100037e2:	e7fc      	b.n	100037de <strnlen+0x1a>
100037e4:	2000      	movs	r0, #0
100037e6:	e7fa      	b.n	100037de <strnlen+0x1a>

100037e8 <_vfiprintf_r>:
100037e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100037ea:	4657      	mov	r7, sl
100037ec:	46de      	mov	lr, fp
100037ee:	464e      	mov	r6, r9
100037f0:	4645      	mov	r5, r8
100037f2:	b5e0      	push	{r5, r6, r7, lr}
100037f4:	b0bf      	sub	sp, #252	; 0xfc
100037f6:	4692      	mov	sl, r2
100037f8:	001c      	movs	r4, r3
100037fa:	9001      	str	r0, [sp, #4]
100037fc:	9100      	str	r1, [sp, #0]
100037fe:	9305      	str	r3, [sp, #20]
10003800:	2800      	cmp	r0, #0
10003802:	d003      	beq.n	1000380c <_vfiprintf_r+0x24>
10003804:	6b83      	ldr	r3, [r0, #56]	; 0x38
10003806:	2b00      	cmp	r3, #0
10003808:	d100      	bne.n	1000380c <_vfiprintf_r+0x24>
1000380a:	e1dd      	b.n	10003bc8 <_vfiprintf_r+0x3e0>
1000380c:	9b00      	ldr	r3, [sp, #0]
1000380e:	210c      	movs	r1, #12
10003810:	5e5a      	ldrsh	r2, [r3, r1]
10003812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10003814:	07db      	lsls	r3, r3, #31
10003816:	d403      	bmi.n	10003820 <_vfiprintf_r+0x38>
10003818:	0593      	lsls	r3, r2, #22
1000381a:	d401      	bmi.n	10003820 <_vfiprintf_r+0x38>
1000381c:	f000 fd65 	bl	100042ea <_vfiprintf_r+0xb02>
10003820:	0713      	lsls	r3, r2, #28
10003822:	d55b      	bpl.n	100038dc <_vfiprintf_r+0xf4>
10003824:	9b00      	ldr	r3, [sp, #0]
10003826:	691b      	ldr	r3, [r3, #16]
10003828:	2b00      	cmp	r3, #0
1000382a:	d057      	beq.n	100038dc <_vfiprintf_r+0xf4>
1000382c:	231a      	movs	r3, #26
1000382e:	4013      	ands	r3, r2
10003830:	2b0a      	cmp	r3, #10
10003832:	d063      	beq.n	100038fc <_vfiprintf_r+0x114>
10003834:	ab15      	add	r3, sp, #84	; 0x54
10003836:	9312      	str	r3, [sp, #72]	; 0x48
10003838:	2300      	movs	r3, #0
1000383a:	4655      	mov	r5, sl
1000383c:	9314      	str	r3, [sp, #80]	; 0x50
1000383e:	9313      	str	r3, [sp, #76]	; 0x4c
10003840:	930c      	str	r3, [sp, #48]	; 0x30
10003842:	930b      	str	r3, [sp, #44]	; 0x2c
10003844:	930f      	str	r3, [sp, #60]	; 0x3c
10003846:	930e      	str	r3, [sp, #56]	; 0x38
10003848:	9303      	str	r3, [sp, #12]
1000384a:	4bc7      	ldr	r3, [pc, #796]	; (10003b68 <_vfiprintf_r+0x380>)
1000384c:	ae15      	add	r6, sp, #84	; 0x54
1000384e:	930a      	str	r3, [sp, #40]	; 0x28
10003850:	4bc6      	ldr	r3, [pc, #792]	; (10003b6c <_vfiprintf_r+0x384>)
10003852:	930d      	str	r3, [sp, #52]	; 0x34
10003854:	782b      	ldrb	r3, [r5, #0]
10003856:	2b00      	cmp	r3, #0
10003858:	d100      	bne.n	1000385c <_vfiprintf_r+0x74>
1000385a:	e134      	b.n	10003ac6 <_vfiprintf_r+0x2de>
1000385c:	002c      	movs	r4, r5
1000385e:	e003      	b.n	10003868 <_vfiprintf_r+0x80>
10003860:	7863      	ldrb	r3, [r4, #1]
10003862:	3401      	adds	r4, #1
10003864:	2b00      	cmp	r3, #0
10003866:	d065      	beq.n	10003934 <_vfiprintf_r+0x14c>
10003868:	2b25      	cmp	r3, #37	; 0x25
1000386a:	d1f9      	bne.n	10003860 <_vfiprintf_r+0x78>
1000386c:	1b67      	subs	r7, r4, r5
1000386e:	42ac      	cmp	r4, r5
10003870:	d164      	bne.n	1000393c <_vfiprintf_r+0x154>
10003872:	7823      	ldrb	r3, [r4, #0]
10003874:	2b00      	cmp	r3, #0
10003876:	d100      	bne.n	1000387a <_vfiprintf_r+0x92>
10003878:	e125      	b.n	10003ac6 <_vfiprintf_r+0x2de>
1000387a:	2300      	movs	r3, #0
1000387c:	aa10      	add	r2, sp, #64	; 0x40
1000387e:	70d3      	strb	r3, [r2, #3]
10003880:	3b01      	subs	r3, #1
10003882:	4699      	mov	r9, r3
10003884:	2300      	movs	r3, #0
10003886:	7861      	ldrb	r1, [r4, #1]
10003888:	1c65      	adds	r5, r4, #1
1000388a:	464f      	mov	r7, r9
1000388c:	001c      	movs	r4, r3
1000388e:	9302      	str	r3, [sp, #8]
10003890:	3501      	adds	r5, #1
10003892:	000b      	movs	r3, r1
10003894:	3b20      	subs	r3, #32
10003896:	2b5a      	cmp	r3, #90	; 0x5a
10003898:	d900      	bls.n	1000389c <_vfiprintf_r+0xb4>
1000389a:	e081      	b.n	100039a0 <_vfiprintf_r+0x1b8>
1000389c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000389e:	009b      	lsls	r3, r3, #2
100038a0:	58d3      	ldr	r3, [r2, r3]
100038a2:	469f      	mov	pc, r3
100038a4:	9b01      	ldr	r3, [sp, #4]
100038a6:	0018      	movs	r0, r3
100038a8:	4699      	mov	r9, r3
100038aa:	f001 fb4d 	bl	10004f48 <_localeconv_r>
100038ae:	6843      	ldr	r3, [r0, #4]
100038b0:	0018      	movs	r0, r3
100038b2:	930e      	str	r3, [sp, #56]	; 0x38
100038b4:	f7ff ff58 	bl	10003768 <strlen>
100038b8:	4680      	mov	r8, r0
100038ba:	900f      	str	r0, [sp, #60]	; 0x3c
100038bc:	4648      	mov	r0, r9
100038be:	f001 fb43 	bl	10004f48 <_localeconv_r>
100038c2:	6883      	ldr	r3, [r0, #8]
100038c4:	930b      	str	r3, [sp, #44]	; 0x2c
100038c6:	4643      	mov	r3, r8
100038c8:	2b00      	cmp	r3, #0
100038ca:	d001      	beq.n	100038d0 <_vfiprintf_r+0xe8>
100038cc:	f000 fcfd 	bl	100042ca <_vfiprintf_r+0xae2>
100038d0:	7829      	ldrb	r1, [r5, #0]
100038d2:	e7dd      	b.n	10003890 <_vfiprintf_r+0xa8>
100038d4:	2320      	movs	r3, #32
100038d6:	7829      	ldrb	r1, [r5, #0]
100038d8:	431c      	orrs	r4, r3
100038da:	e7d9      	b.n	10003890 <_vfiprintf_r+0xa8>
100038dc:	9d00      	ldr	r5, [sp, #0]
100038de:	9801      	ldr	r0, [sp, #4]
100038e0:	0029      	movs	r1, r5
100038e2:	f000 fe75 	bl	100045d0 <__swsetup_r>
100038e6:	2800      	cmp	r0, #0
100038e8:	d001      	beq.n	100038ee <_vfiprintf_r+0x106>
100038ea:	f000 fe02 	bl	100044f2 <_vfiprintf_r+0xd0a>
100038ee:	002b      	movs	r3, r5
100038f0:	220c      	movs	r2, #12
100038f2:	5e9a      	ldrsh	r2, [r3, r2]
100038f4:	231a      	movs	r3, #26
100038f6:	4013      	ands	r3, r2
100038f8:	2b0a      	cmp	r3, #10
100038fa:	d19b      	bne.n	10003834 <_vfiprintf_r+0x4c>
100038fc:	9900      	ldr	r1, [sp, #0]
100038fe:	200e      	movs	r0, #14
10003900:	5e0b      	ldrsh	r3, [r1, r0]
10003902:	2b00      	cmp	r3, #0
10003904:	db96      	blt.n	10003834 <_vfiprintf_r+0x4c>
10003906:	6e4b      	ldr	r3, [r1, #100]	; 0x64
10003908:	07db      	lsls	r3, r3, #31
1000390a:	d403      	bmi.n	10003914 <_vfiprintf_r+0x12c>
1000390c:	0592      	lsls	r2, r2, #22
1000390e:	d401      	bmi.n	10003914 <_vfiprintf_r+0x12c>
10003910:	f000 fdc6 	bl	100044a0 <_vfiprintf_r+0xcb8>
10003914:	0023      	movs	r3, r4
10003916:	4652      	mov	r2, sl
10003918:	9900      	ldr	r1, [sp, #0]
1000391a:	9801      	ldr	r0, [sp, #4]
1000391c:	f000 fe12 	bl	10004544 <__sbprintf>
10003920:	9003      	str	r0, [sp, #12]
10003922:	e035      	b.n	10003990 <_vfiprintf_r+0x1a8>
10003924:	9a02      	ldr	r2, [sp, #8]
10003926:	9305      	str	r3, [sp, #20]
10003928:	4252      	negs	r2, r2
1000392a:	9202      	str	r2, [sp, #8]
1000392c:	2304      	movs	r3, #4
1000392e:	7829      	ldrb	r1, [r5, #0]
10003930:	431c      	orrs	r4, r3
10003932:	e7ad      	b.n	10003890 <_vfiprintf_r+0xa8>
10003934:	1b67      	subs	r7, r4, r5
10003936:	42ac      	cmp	r4, r5
10003938:	d100      	bne.n	1000393c <_vfiprintf_r+0x154>
1000393a:	e0c4      	b.n	10003ac6 <_vfiprintf_r+0x2de>
1000393c:	9a14      	ldr	r2, [sp, #80]	; 0x50
1000393e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10003940:	18ba      	adds	r2, r7, r2
10003942:	3301      	adds	r3, #1
10003944:	6035      	str	r5, [r6, #0]
10003946:	6077      	str	r7, [r6, #4]
10003948:	9214      	str	r2, [sp, #80]	; 0x50
1000394a:	9313      	str	r3, [sp, #76]	; 0x4c
1000394c:	3608      	adds	r6, #8
1000394e:	2b07      	cmp	r3, #7
10003950:	dd03      	ble.n	1000395a <_vfiprintf_r+0x172>
10003952:	2a00      	cmp	r2, #0
10003954:	d107      	bne.n	10003966 <_vfiprintf_r+0x17e>
10003956:	9213      	str	r2, [sp, #76]	; 0x4c
10003958:	ae15      	add	r6, sp, #84	; 0x54
1000395a:	9b03      	ldr	r3, [sp, #12]
1000395c:	469c      	mov	ip, r3
1000395e:	44bc      	add	ip, r7
10003960:	4663      	mov	r3, ip
10003962:	9303      	str	r3, [sp, #12]
10003964:	e785      	b.n	10003872 <_vfiprintf_r+0x8a>
10003966:	9900      	ldr	r1, [sp, #0]
10003968:	9801      	ldr	r0, [sp, #4]
1000396a:	aa12      	add	r2, sp, #72	; 0x48
1000396c:	f001 f940 	bl	10004bf0 <__sfvwrite_r>
10003970:	2300      	movs	r3, #0
10003972:	9314      	str	r3, [sp, #80]	; 0x50
10003974:	9313      	str	r3, [sp, #76]	; 0x4c
10003976:	2800      	cmp	r0, #0
10003978:	d0ee      	beq.n	10003958 <_vfiprintf_r+0x170>
1000397a:	9a00      	ldr	r2, [sp, #0]
1000397c:	210c      	movs	r1, #12
1000397e:	5e53      	ldrsh	r3, [r2, r1]
10003980:	6e52      	ldr	r2, [r2, #100]	; 0x64
10003982:	07d2      	lsls	r2, r2, #31
10003984:	d400      	bmi.n	10003988 <_vfiprintf_r+0x1a0>
10003986:	e0b5      	b.n	10003af4 <_vfiprintf_r+0x30c>
10003988:	065b      	lsls	r3, r3, #25
1000398a:	d501      	bpl.n	10003990 <_vfiprintf_r+0x1a8>
1000398c:	f000 fdbd 	bl	1000450a <_vfiprintf_r+0xd22>
10003990:	9803      	ldr	r0, [sp, #12]
10003992:	b03f      	add	sp, #252	; 0xfc
10003994:	bcf0      	pop	{r4, r5, r6, r7}
10003996:	46bb      	mov	fp, r7
10003998:	46b2      	mov	sl, r6
1000399a:	46a9      	mov	r9, r5
1000399c:	46a0      	mov	r8, r4
1000399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100039a0:	46a3      	mov	fp, r4
100039a2:	2900      	cmp	r1, #0
100039a4:	d100      	bne.n	100039a8 <_vfiprintf_r+0x1c0>
100039a6:	e08e      	b.n	10003ac6 <_vfiprintf_r+0x2de>
100039a8:	2300      	movs	r3, #0
100039aa:	aa10      	add	r2, sp, #64	; 0x40
100039ac:	70d3      	strb	r3, [r2, #3]
100039ae:	3301      	adds	r3, #1
100039b0:	469a      	mov	sl, r3
100039b2:	ac25      	add	r4, sp, #148	; 0x94
100039b4:	7021      	strb	r1, [r4, #0]
100039b6:	9304      	str	r3, [sp, #16]
100039b8:	2300      	movs	r3, #0
100039ba:	4699      	mov	r9, r3
100039bc:	2302      	movs	r3, #2
100039be:	465a      	mov	r2, fp
100039c0:	401a      	ands	r2, r3
100039c2:	9206      	str	r2, [sp, #24]
100039c4:	465a      	mov	r2, fp
100039c6:	4213      	tst	r3, r2
100039c8:	d001      	beq.n	100039ce <_vfiprintf_r+0x1e6>
100039ca:	469c      	mov	ip, r3
100039cc:	44e2      	add	sl, ip
100039ce:	2784      	movs	r7, #132	; 0x84
100039d0:	465b      	mov	r3, fp
100039d2:	4659      	mov	r1, fp
100039d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100039d6:	403b      	ands	r3, r7
100039d8:	9307      	str	r3, [sp, #28]
100039da:	1c53      	adds	r3, r2, #1
100039dc:	469c      	mov	ip, r3
100039de:	0018      	movs	r0, r3
100039e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
100039e2:	420f      	tst	r7, r1
100039e4:	d105      	bne.n	100039f2 <_vfiprintf_r+0x20a>
100039e6:	4657      	mov	r7, sl
100039e8:	9902      	ldr	r1, [sp, #8]
100039ea:	1bcf      	subs	r7, r1, r7
100039ec:	2f00      	cmp	r7, #0
100039ee:	dd00      	ble.n	100039f2 <_vfiprintf_r+0x20a>
100039f0:	e3b5      	b.n	1000415e <_vfiprintf_r+0x976>
100039f2:	a910      	add	r1, sp, #64	; 0x40
100039f4:	78c9      	ldrb	r1, [r1, #3]
100039f6:	2900      	cmp	r1, #0
100039f8:	d100      	bne.n	100039fc <_vfiprintf_r+0x214>
100039fa:	e291      	b.n	10003f20 <_vfiprintf_r+0x738>
100039fc:	aa10      	add	r2, sp, #64	; 0x40
100039fe:	3203      	adds	r2, #3
10003a00:	6032      	str	r2, [r6, #0]
10003a02:	2201      	movs	r2, #1
10003a04:	3301      	adds	r3, #1
10003a06:	6072      	str	r2, [r6, #4]
10003a08:	9314      	str	r3, [sp, #80]	; 0x50
10003a0a:	9013      	str	r0, [sp, #76]	; 0x4c
10003a0c:	2807      	cmp	r0, #7
10003a0e:	dc00      	bgt.n	10003a12 <_vfiprintf_r+0x22a>
10003a10:	e283      	b.n	10003f1a <_vfiprintf_r+0x732>
10003a12:	2b00      	cmp	r3, #0
10003a14:	d009      	beq.n	10003a2a <_vfiprintf_r+0x242>
10003a16:	9900      	ldr	r1, [sp, #0]
10003a18:	9801      	ldr	r0, [sp, #4]
10003a1a:	aa12      	add	r2, sp, #72	; 0x48
10003a1c:	f001 f8e8 	bl	10004bf0 <__sfvwrite_r>
10003a20:	2300      	movs	r3, #0
10003a22:	9314      	str	r3, [sp, #80]	; 0x50
10003a24:	9313      	str	r3, [sp, #76]	; 0x4c
10003a26:	2800      	cmp	r0, #0
10003a28:	d1a7      	bne.n	1000397a <_vfiprintf_r+0x192>
10003a2a:	9b06      	ldr	r3, [sp, #24]
10003a2c:	2b00      	cmp	r3, #0
10003a2e:	d100      	bne.n	10003a32 <_vfiprintf_r+0x24a>
10003a30:	e287      	b.n	10003f42 <_vfiprintf_r+0x75a>
10003a32:	ab11      	add	r3, sp, #68	; 0x44
10003a34:	9315      	str	r3, [sp, #84]	; 0x54
10003a36:	2302      	movs	r3, #2
10003a38:	2001      	movs	r0, #1
10003a3a:	9316      	str	r3, [sp, #88]	; 0x58
10003a3c:	ae15      	add	r6, sp, #84	; 0x54
10003a3e:	0002      	movs	r2, r0
10003a40:	3608      	adds	r6, #8
10003a42:	3001      	adds	r0, #1
10003a44:	9907      	ldr	r1, [sp, #28]
10003a46:	2980      	cmp	r1, #128	; 0x80
10003a48:	d100      	bne.n	10003a4c <_vfiprintf_r+0x264>
10003a4a:	e282      	b.n	10003f52 <_vfiprintf_r+0x76a>
10003a4c:	4649      	mov	r1, r9
10003a4e:	9f04      	ldr	r7, [sp, #16]
10003a50:	1bcf      	subs	r7, r1, r7
10003a52:	2f00      	cmp	r7, #0
10003a54:	dd00      	ble.n	10003a58 <_vfiprintf_r+0x270>
10003a56:	e2b8      	b.n	10003fca <_vfiprintf_r+0x7e2>
10003a58:	9a04      	ldr	r2, [sp, #16]
10003a5a:	6034      	str	r4, [r6, #0]
10003a5c:	4694      	mov	ip, r2
10003a5e:	4463      	add	r3, ip
10003a60:	6072      	str	r2, [r6, #4]
10003a62:	9314      	str	r3, [sp, #80]	; 0x50
10003a64:	9013      	str	r0, [sp, #76]	; 0x4c
10003a66:	2807      	cmp	r0, #7
10003a68:	dc00      	bgt.n	10003a6c <_vfiprintf_r+0x284>
10003a6a:	e2f2      	b.n	10004052 <_vfiprintf_r+0x86a>
10003a6c:	2b00      	cmp	r3, #0
10003a6e:	d000      	beq.n	10003a72 <_vfiprintf_r+0x28a>
10003a70:	e357      	b.n	10004122 <_vfiprintf_r+0x93a>
10003a72:	9313      	str	r3, [sp, #76]	; 0x4c
10003a74:	465b      	mov	r3, fp
10003a76:	075b      	lsls	r3, r3, #29
10003a78:	d400      	bmi.n	10003a7c <_vfiprintf_r+0x294>
10003a7a:	e329      	b.n	100040d0 <_vfiprintf_r+0x8e8>
10003a7c:	4650      	mov	r0, sl
10003a7e:	9902      	ldr	r1, [sp, #8]
10003a80:	9b14      	ldr	r3, [sp, #80]	; 0x50
10003a82:	aa15      	add	r2, sp, #84	; 0x54
10003a84:	1a0c      	subs	r4, r1, r0
10003a86:	2c00      	cmp	r4, #0
10003a88:	dd00      	ble.n	10003a8c <_vfiprintf_r+0x2a4>
10003a8a:	e2ee      	b.n	1000406a <_vfiprintf_r+0x882>
10003a8c:	9a02      	ldr	r2, [sp, #8]
10003a8e:	4552      	cmp	r2, sl
10003a90:	da00      	bge.n	10003a94 <_vfiprintf_r+0x2ac>
10003a92:	4652      	mov	r2, sl
10003a94:	9903      	ldr	r1, [sp, #12]
10003a96:	468c      	mov	ip, r1
10003a98:	4494      	add	ip, r2
10003a9a:	4662      	mov	r2, ip
10003a9c:	9203      	str	r2, [sp, #12]
10003a9e:	2b00      	cmp	r3, #0
10003aa0:	d00a      	beq.n	10003ab8 <_vfiprintf_r+0x2d0>
10003aa2:	9900      	ldr	r1, [sp, #0]
10003aa4:	9801      	ldr	r0, [sp, #4]
10003aa6:	aa12      	add	r2, sp, #72	; 0x48
10003aa8:	f001 f8a2 	bl	10004bf0 <__sfvwrite_r>
10003aac:	2300      	movs	r3, #0
10003aae:	9314      	str	r3, [sp, #80]	; 0x50
10003ab0:	9313      	str	r3, [sp, #76]	; 0x4c
10003ab2:	2800      	cmp	r0, #0
10003ab4:	d000      	beq.n	10003ab8 <_vfiprintf_r+0x2d0>
10003ab6:	e760      	b.n	1000397a <_vfiprintf_r+0x192>
10003ab8:	2300      	movs	r3, #0
10003aba:	9313      	str	r3, [sp, #76]	; 0x4c
10003abc:	782b      	ldrb	r3, [r5, #0]
10003abe:	ae15      	add	r6, sp, #84	; 0x54
10003ac0:	2b00      	cmp	r3, #0
10003ac2:	d000      	beq.n	10003ac6 <_vfiprintf_r+0x2de>
10003ac4:	e6ca      	b.n	1000385c <_vfiprintf_r+0x74>
10003ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
10003ac8:	2b00      	cmp	r3, #0
10003aca:	d001      	beq.n	10003ad0 <_vfiprintf_r+0x2e8>
10003acc:	f000 fcfa 	bl	100044c4 <_vfiprintf_r+0xcdc>
10003ad0:	2300      	movs	r3, #0
10003ad2:	9313      	str	r3, [sp, #76]	; 0x4c
10003ad4:	e751      	b.n	1000397a <_vfiprintf_r+0x192>
10003ad6:	000a      	movs	r2, r1
10003ad8:	2000      	movs	r0, #0
10003ada:	3a30      	subs	r2, #48	; 0x30
10003adc:	0083      	lsls	r3, r0, #2
10003ade:	7829      	ldrb	r1, [r5, #0]
10003ae0:	181b      	adds	r3, r3, r0
10003ae2:	005b      	lsls	r3, r3, #1
10003ae4:	18d0      	adds	r0, r2, r3
10003ae6:	000a      	movs	r2, r1
10003ae8:	3a30      	subs	r2, #48	; 0x30
10003aea:	3501      	adds	r5, #1
10003aec:	2a09      	cmp	r2, #9
10003aee:	d9f5      	bls.n	10003adc <_vfiprintf_r+0x2f4>
10003af0:	9002      	str	r0, [sp, #8]
10003af2:	e6ce      	b.n	10003892 <_vfiprintf_r+0xaa>
10003af4:	059a      	lsls	r2, r3, #22
10003af6:	d500      	bpl.n	10003afa <_vfiprintf_r+0x312>
10003af8:	e746      	b.n	10003988 <_vfiprintf_r+0x1a0>
10003afa:	9c00      	ldr	r4, [sp, #0]
10003afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
10003afe:	f002 f844 	bl	10005b8a <__retarget_lock_release_recursive>
10003b02:	220c      	movs	r2, #12
10003b04:	5ea3      	ldrsh	r3, [r4, r2]
10003b06:	e73f      	b.n	10003988 <_vfiprintf_r+0x1a0>
10003b08:	46b9      	mov	r9, r7
10003b0a:	2300      	movs	r3, #0
10003b0c:	9f05      	ldr	r7, [sp, #20]
10003b0e:	46a3      	mov	fp, r4
10003b10:	cf10      	ldmia	r7!, {r4}
10003b12:	aa10      	add	r2, sp, #64	; 0x40
10003b14:	70d3      	strb	r3, [r2, #3]
10003b16:	464b      	mov	r3, r9
10003b18:	2c00      	cmp	r4, #0
10003b1a:	d101      	bne.n	10003b20 <_vfiprintf_r+0x338>
10003b1c:	f000 fc95 	bl	1000444a <_vfiprintf_r+0xc62>
10003b20:	3301      	adds	r3, #1
10003b22:	d101      	bne.n	10003b28 <_vfiprintf_r+0x340>
10003b24:	f000 fc4d 	bl	100043c2 <_vfiprintf_r+0xbda>
10003b28:	464a      	mov	r2, r9
10003b2a:	2100      	movs	r1, #0
10003b2c:	0020      	movs	r0, r4
10003b2e:	f001 fa6f 	bl	10005010 <memchr>
10003b32:	2800      	cmp	r0, #0
10003b34:	d101      	bne.n	10003b3a <_vfiprintf_r+0x352>
10003b36:	f000 fcb8 	bl	100044aa <_vfiprintf_r+0xcc2>
10003b3a:	1b02      	subs	r2, r0, r4
10003b3c:	43d3      	mvns	r3, r2
10003b3e:	17db      	asrs	r3, r3, #31
10003b40:	9204      	str	r2, [sp, #16]
10003b42:	401a      	ands	r2, r3
10003b44:	2300      	movs	r3, #0
10003b46:	4692      	mov	sl, r2
10003b48:	4699      	mov	r9, r3
10003b4a:	9705      	str	r7, [sp, #20]
10003b4c:	e07b      	b.n	10003c46 <_vfiprintf_r+0x45e>
10003b4e:	9b05      	ldr	r3, [sp, #20]
10003b50:	46a3      	mov	fp, r4
10003b52:	cb04      	ldmia	r3!, {r2}
10003b54:	ac25      	add	r4, sp, #148	; 0x94
10003b56:	7022      	strb	r2, [r4, #0]
10003b58:	9305      	str	r3, [sp, #20]
10003b5a:	2200      	movs	r2, #0
10003b5c:	2301      	movs	r3, #1
10003b5e:	a910      	add	r1, sp, #64	; 0x40
10003b60:	469a      	mov	sl, r3
10003b62:	70ca      	strb	r2, [r1, #3]
10003b64:	9304      	str	r3, [sp, #16]
10003b66:	e727      	b.n	100039b8 <_vfiprintf_r+0x1d0>
10003b68:	10007758 	.word	0x10007758
10003b6c:	100078c4 	.word	0x100078c4
10003b70:	46a3      	mov	fp, r4
10003b72:	465b      	mov	r3, fp
10003b74:	46b9      	mov	r9, r7
10003b76:	9a05      	ldr	r2, [sp, #20]
10003b78:	069b      	lsls	r3, r3, #26
10003b7a:	d573      	bpl.n	10003c64 <_vfiprintf_r+0x47c>
10003b7c:	2307      	movs	r3, #7
10003b7e:	3207      	adds	r2, #7
10003b80:	439a      	bics	r2, r3
10003b82:	3301      	adds	r3, #1
10003b84:	469c      	mov	ip, r3
10003b86:	4494      	add	ip, r2
10003b88:	4663      	mov	r3, ip
10003b8a:	9305      	str	r3, [sp, #20]
10003b8c:	6853      	ldr	r3, [r2, #4]
10003b8e:	6812      	ldr	r2, [r2, #0]
10003b90:	9309      	str	r3, [sp, #36]	; 0x24
10003b92:	9208      	str	r2, [sp, #32]
10003b94:	2b00      	cmp	r3, #0
10003b96:	da00      	bge.n	10003b9a <_vfiprintf_r+0x3b2>
10003b98:	e13a      	b.n	10003e10 <_vfiprintf_r+0x628>
10003b9a:	464b      	mov	r3, r9
10003b9c:	3301      	adds	r3, #1
10003b9e:	d100      	bne.n	10003ba2 <_vfiprintf_r+0x3ba>
10003ba0:	e147      	b.n	10003e32 <_vfiprintf_r+0x64a>
10003ba2:	2380      	movs	r3, #128	; 0x80
10003ba4:	465a      	mov	r2, fp
10003ba6:	439a      	bics	r2, r3
10003ba8:	4693      	mov	fp, r2
10003baa:	9a08      	ldr	r2, [sp, #32]
10003bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003bae:	0011      	movs	r1, r2
10003bb0:	4319      	orrs	r1, r3
10003bb2:	d000      	beq.n	10003bb6 <_vfiprintf_r+0x3ce>
10003bb4:	e13d      	b.n	10003e32 <_vfiprintf_r+0x64a>
10003bb6:	464b      	mov	r3, r9
10003bb8:	2b00      	cmp	r3, #0
10003bba:	d001      	beq.n	10003bc0 <_vfiprintf_r+0x3d8>
10003bbc:	f000 fc7d 	bl	100044ba <_vfiprintf_r+0xcd2>
10003bc0:	46ca      	mov	sl, r9
10003bc2:	9304      	str	r3, [sp, #16]
10003bc4:	ac3e      	add	r4, sp, #248	; 0xf8
10003bc6:	e03e      	b.n	10003c46 <_vfiprintf_r+0x45e>
10003bc8:	f000 fe42 	bl	10004850 <__sinit>
10003bcc:	e61e      	b.n	1000380c <_vfiprintf_r+0x24>
10003bce:	2110      	movs	r1, #16
10003bd0:	0023      	movs	r3, r4
10003bd2:	430b      	orrs	r3, r1
10003bd4:	46b9      	mov	r9, r7
10003bd6:	0019      	movs	r1, r3
10003bd8:	9a05      	ldr	r2, [sp, #20]
10003bda:	068b      	lsls	r3, r1, #26
10003bdc:	d400      	bmi.n	10003be0 <_vfiprintf_r+0x3f8>
10003bde:	e331      	b.n	10004244 <_vfiprintf_r+0xa5c>
10003be0:	2307      	movs	r3, #7
10003be2:	3207      	adds	r2, #7
10003be4:	439a      	bics	r2, r3
10003be6:	3301      	adds	r3, #1
10003be8:	469c      	mov	ip, r3
10003bea:	4494      	add	ip, r2
10003bec:	4663      	mov	r3, ip
10003bee:	9305      	str	r3, [sp, #20]
10003bf0:	6813      	ldr	r3, [r2, #0]
10003bf2:	6852      	ldr	r2, [r2, #4]
10003bf4:	48bd      	ldr	r0, [pc, #756]	; (10003eec <_vfiprintf_r+0x704>)
10003bf6:	ac10      	add	r4, sp, #64	; 0x40
10003bf8:	4008      	ands	r0, r1
10003bfa:	4683      	mov	fp, r0
10003bfc:	2000      	movs	r0, #0
10003bfe:	70e0      	strb	r0, [r4, #3]
10003c00:	4648      	mov	r0, r9
10003c02:	3001      	adds	r0, #1
10003c04:	d074      	beq.n	10003cf0 <_vfiprintf_r+0x508>
10003c06:	48ba      	ldr	r0, [pc, #744]	; (10003ef0 <_vfiprintf_r+0x708>)
10003c08:	4001      	ands	r1, r0
10003c0a:	0018      	movs	r0, r3
10003c0c:	4310      	orrs	r0, r2
10003c0e:	d001      	beq.n	10003c14 <_vfiprintf_r+0x42c>
10003c10:	f000 fc07 	bl	10004422 <_vfiprintf_r+0xc3a>
10003c14:	465b      	mov	r3, fp
10003c16:	2200      	movs	r2, #0
10003c18:	468b      	mov	fp, r1
10003c1a:	4649      	mov	r1, r9
10003c1c:	2900      	cmp	r1, #0
10003c1e:	d15f      	bne.n	10003ce0 <_vfiprintf_r+0x4f8>
10003c20:	2a00      	cmp	r2, #0
10003c22:	d000      	beq.n	10003c26 <_vfiprintf_r+0x43e>
10003c24:	e324      	b.n	10004270 <_vfiprintf_r+0xa88>
10003c26:	3201      	adds	r2, #1
10003c28:	0010      	movs	r0, r2
10003c2a:	4018      	ands	r0, r3
10003c2c:	9004      	str	r0, [sp, #16]
10003c2e:	421a      	tst	r2, r3
10003c30:	d100      	bne.n	10003c34 <_vfiprintf_r+0x44c>
10003c32:	e322      	b.n	1000427a <_vfiprintf_r+0xa92>
10003c34:	2363      	movs	r3, #99	; 0x63
10003c36:	2130      	movs	r1, #48	; 0x30
10003c38:	aa25      	add	r2, sp, #148	; 0x94
10003c3a:	54d1      	strb	r1, [r2, r3]
10003c3c:	ab10      	add	r3, sp, #64	; 0x40
10003c3e:	24b7      	movs	r4, #183	; 0xb7
10003c40:	469c      	mov	ip, r3
10003c42:	4682      	mov	sl, r0
10003c44:	4464      	add	r4, ip
10003c46:	ab10      	add	r3, sp, #64	; 0x40
10003c48:	78db      	ldrb	r3, [r3, #3]
10003c4a:	1e5a      	subs	r2, r3, #1
10003c4c:	4193      	sbcs	r3, r2
10003c4e:	449a      	add	sl, r3
10003c50:	e6b4      	b.n	100039bc <_vfiprintf_r+0x1d4>
10003c52:	2310      	movs	r3, #16
10003c54:	0022      	movs	r2, r4
10003c56:	431a      	orrs	r2, r3
10003c58:	4693      	mov	fp, r2
10003c5a:	465b      	mov	r3, fp
10003c5c:	46b9      	mov	r9, r7
10003c5e:	9a05      	ldr	r2, [sp, #20]
10003c60:	069b      	lsls	r3, r3, #26
10003c62:	d48b      	bmi.n	10003b7c <_vfiprintf_r+0x394>
10003c64:	ca08      	ldmia	r2!, {r3}
10003c66:	9205      	str	r2, [sp, #20]
10003c68:	465a      	mov	r2, fp
10003c6a:	06d2      	lsls	r2, r2, #27
10003c6c:	d500      	bpl.n	10003c70 <_vfiprintf_r+0x488>
10003c6e:	e2fb      	b.n	10004268 <_vfiprintf_r+0xa80>
10003c70:	465a      	mov	r2, fp
10003c72:	0652      	lsls	r2, r2, #25
10003c74:	d400      	bmi.n	10003c78 <_vfiprintf_r+0x490>
10003c76:	e2f3      	b.n	10004260 <_vfiprintf_r+0xa78>
10003c78:	b21b      	sxth	r3, r3
10003c7a:	9308      	str	r3, [sp, #32]
10003c7c:	17db      	asrs	r3, r3, #31
10003c7e:	9309      	str	r3, [sp, #36]	; 0x24
10003c80:	e788      	b.n	10003b94 <_vfiprintf_r+0x3ac>
10003c82:	7829      	ldrb	r1, [r5, #0]
10003c84:	2968      	cmp	r1, #104	; 0x68
10003c86:	d100      	bne.n	10003c8a <_vfiprintf_r+0x4a2>
10003c88:	e3cd      	b.n	10004426 <_vfiprintf_r+0xc3e>
10003c8a:	2340      	movs	r3, #64	; 0x40
10003c8c:	431c      	orrs	r4, r3
10003c8e:	e5ff      	b.n	10003890 <_vfiprintf_r+0xa8>
10003c90:	2310      	movs	r3, #16
10003c92:	0022      	movs	r2, r4
10003c94:	431a      	orrs	r2, r3
10003c96:	46b9      	mov	r9, r7
10003c98:	0013      	movs	r3, r2
10003c9a:	069a      	lsls	r2, r3, #26
10003c9c:	d400      	bmi.n	10003ca0 <_vfiprintf_r+0x4b8>
10003c9e:	e2c4      	b.n	1000422a <_vfiprintf_r+0xa42>
10003ca0:	2107      	movs	r1, #7
10003ca2:	9a05      	ldr	r2, [sp, #20]
10003ca4:	3207      	adds	r2, #7
10003ca6:	438a      	bics	r2, r1
10003ca8:	0010      	movs	r0, r2
10003caa:	c806      	ldmia	r0!, {r1, r2}
10003cac:	9108      	str	r1, [sp, #32]
10003cae:	9209      	str	r2, [sp, #36]	; 0x24
10003cb0:	9005      	str	r0, [sp, #20]
10003cb2:	2200      	movs	r2, #0
10003cb4:	a910      	add	r1, sp, #64	; 0x40
10003cb6:	70ca      	strb	r2, [r1, #3]
10003cb8:	464a      	mov	r2, r9
10003cba:	469b      	mov	fp, r3
10003cbc:	3201      	adds	r2, #1
10003cbe:	d100      	bne.n	10003cc2 <_vfiprintf_r+0x4da>
10003cc0:	e0b7      	b.n	10003e32 <_vfiprintf_r+0x64a>
10003cc2:	2280      	movs	r2, #128	; 0x80
10003cc4:	0019      	movs	r1, r3
10003cc6:	4391      	bics	r1, r2
10003cc8:	468b      	mov	fp, r1
10003cca:	9908      	ldr	r1, [sp, #32]
10003ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003cce:	0008      	movs	r0, r1
10003cd0:	4310      	orrs	r0, r2
10003cd2:	1e02      	subs	r2, r0, #0
10003cd4:	d000      	beq.n	10003cd8 <_vfiprintf_r+0x4f0>
10003cd6:	e0ac      	b.n	10003e32 <_vfiprintf_r+0x64a>
10003cd8:	4649      	mov	r1, r9
10003cda:	3201      	adds	r2, #1
10003cdc:	2900      	cmp	r1, #0
10003cde:	d09f      	beq.n	10003c20 <_vfiprintf_r+0x438>
10003ce0:	2a01      	cmp	r2, #1
10003ce2:	d100      	bne.n	10003ce6 <_vfiprintf_r+0x4fe>
10003ce4:	e3e9      	b.n	100044ba <_vfiprintf_r+0xcd2>
10003ce6:	2300      	movs	r3, #0
10003ce8:	2a02      	cmp	r2, #2
10003cea:	d100      	bne.n	10003cee <_vfiprintf_r+0x506>
10003cec:	e3b8      	b.n	10004460 <_vfiprintf_r+0xc78>
10003cee:	2200      	movs	r2, #0
10003cf0:	2107      	movs	r1, #7
10003cf2:	468c      	mov	ip, r1
10003cf4:	ac3e      	add	r4, sp, #248	; 0xf8
10003cf6:	4661      	mov	r1, ip
10003cf8:	0750      	lsls	r0, r2, #29
10003cfa:	4019      	ands	r1, r3
10003cfc:	08db      	lsrs	r3, r3, #3
10003cfe:	4303      	orrs	r3, r0
10003d00:	0018      	movs	r0, r3
10003d02:	0027      	movs	r7, r4
10003d04:	3130      	adds	r1, #48	; 0x30
10003d06:	3c01      	subs	r4, #1
10003d08:	08d2      	lsrs	r2, r2, #3
10003d0a:	7021      	strb	r1, [r4, #0]
10003d0c:	4310      	orrs	r0, r2
10003d0e:	d1f2      	bne.n	10003cf6 <_vfiprintf_r+0x50e>
10003d10:	465b      	mov	r3, fp
10003d12:	07db      	lsls	r3, r3, #31
10003d14:	d400      	bmi.n	10003d18 <_vfiprintf_r+0x530>
10003d16:	e0e0      	b.n	10003eda <_vfiprintf_r+0x6f2>
10003d18:	2930      	cmp	r1, #48	; 0x30
10003d1a:	d100      	bne.n	10003d1e <_vfiprintf_r+0x536>
10003d1c:	e0dd      	b.n	10003eda <_vfiprintf_r+0x6f2>
10003d1e:	2330      	movs	r3, #48	; 0x30
10003d20:	3c01      	subs	r4, #1
10003d22:	3f02      	subs	r7, #2
10003d24:	7023      	strb	r3, [r4, #0]
10003d26:	ab3e      	add	r3, sp, #248	; 0xf8
10003d28:	1bdb      	subs	r3, r3, r7
10003d2a:	469a      	mov	sl, r3
10003d2c:	9304      	str	r3, [sp, #16]
10003d2e:	454b      	cmp	r3, r9
10003d30:	da00      	bge.n	10003d34 <_vfiprintf_r+0x54c>
10003d32:	e2f8      	b.n	10004326 <_vfiprintf_r+0xb3e>
10003d34:	003c      	movs	r4, r7
10003d36:	e786      	b.n	10003c46 <_vfiprintf_r+0x45e>
10003d38:	2002      	movs	r0, #2
10003d3a:	46b9      	mov	r9, r7
10003d3c:	2200      	movs	r2, #0
10003d3e:	9905      	ldr	r1, [sp, #20]
10003d40:	4304      	orrs	r4, r0
10003d42:	c908      	ldmia	r1!, {r3}
10003d44:	46a3      	mov	fp, r4
10003d46:	9105      	str	r1, [sp, #20]
10003d48:	4c6a      	ldr	r4, [pc, #424]	; (10003ef4 <_vfiprintf_r+0x70c>)
10003d4a:	496b      	ldr	r1, [pc, #428]	; (10003ef8 <_vfiprintf_r+0x710>)
10003d4c:	a811      	add	r0, sp, #68	; 0x44
10003d4e:	8004      	strh	r4, [r0, #0]
10003d50:	910c      	str	r1, [sp, #48]	; 0x30
10003d52:	2100      	movs	r1, #0
10003d54:	a810      	add	r0, sp, #64	; 0x40
10003d56:	70c1      	strb	r1, [r0, #3]
10003d58:	4649      	mov	r1, r9
10003d5a:	3101      	adds	r1, #1
10003d5c:	d100      	bne.n	10003d60 <_vfiprintf_r+0x578>
10003d5e:	e1ee      	b.n	1000413e <_vfiprintf_r+0x956>
10003d60:	2180      	movs	r1, #128	; 0x80
10003d62:	4658      	mov	r0, fp
10003d64:	4388      	bics	r0, r1
10003d66:	0001      	movs	r1, r0
10003d68:	0018      	movs	r0, r3
10003d6a:	4310      	orrs	r0, r2
10003d6c:	d000      	beq.n	10003d70 <_vfiprintf_r+0x588>
10003d6e:	e1e5      	b.n	1000413c <_vfiprintf_r+0x954>
10003d70:	465b      	mov	r3, fp
10003d72:	2202      	movs	r2, #2
10003d74:	468b      	mov	fp, r1
10003d76:	e750      	b.n	10003c1a <_vfiprintf_r+0x432>
10003d78:	2380      	movs	r3, #128	; 0x80
10003d7a:	7829      	ldrb	r1, [r5, #0]
10003d7c:	431c      	orrs	r4, r3
10003d7e:	e587      	b.n	10003890 <_vfiprintf_r+0xa8>
10003d80:	0023      	movs	r3, r4
10003d82:	069b      	lsls	r3, r3, #26
10003d84:	d400      	bmi.n	10003d88 <_vfiprintf_r+0x5a0>
10003d86:	e28f      	b.n	100042a8 <_vfiprintf_r+0xac0>
10003d88:	9b05      	ldr	r3, [sp, #20]
10003d8a:	9a03      	ldr	r2, [sp, #12]
10003d8c:	681b      	ldr	r3, [r3, #0]
10003d8e:	601a      	str	r2, [r3, #0]
10003d90:	17d2      	asrs	r2, r2, #31
10003d92:	605a      	str	r2, [r3, #4]
10003d94:	9b05      	ldr	r3, [sp, #20]
10003d96:	3304      	adds	r3, #4
10003d98:	9305      	str	r3, [sp, #20]
10003d9a:	e55b      	b.n	10003854 <_vfiprintf_r+0x6c>
10003d9c:	7829      	ldrb	r1, [r5, #0]
10003d9e:	296c      	cmp	r1, #108	; 0x6c
10003da0:	d100      	bne.n	10003da4 <_vfiprintf_r+0x5bc>
10003da2:	e347      	b.n	10004434 <_vfiprintf_r+0xc4c>
10003da4:	2310      	movs	r3, #16
10003da6:	431c      	orrs	r4, r3
10003da8:	e572      	b.n	10003890 <_vfiprintf_r+0xa8>
10003daa:	9b05      	ldr	r3, [sp, #20]
10003dac:	cb04      	ldmia	r3!, {r2}
10003dae:	9202      	str	r2, [sp, #8]
10003db0:	2a00      	cmp	r2, #0
10003db2:	da00      	bge.n	10003db6 <_vfiprintf_r+0x5ce>
10003db4:	e5b6      	b.n	10003924 <_vfiprintf_r+0x13c>
10003db6:	7829      	ldrb	r1, [r5, #0]
10003db8:	9305      	str	r3, [sp, #20]
10003dba:	e569      	b.n	10003890 <_vfiprintf_r+0xa8>
10003dbc:	2301      	movs	r3, #1
10003dbe:	7829      	ldrb	r1, [r5, #0]
10003dc0:	431c      	orrs	r4, r3
10003dc2:	e565      	b.n	10003890 <_vfiprintf_r+0xa8>
10003dc4:	ab10      	add	r3, sp, #64	; 0x40
10003dc6:	78db      	ldrb	r3, [r3, #3]
10003dc8:	7829      	ldrb	r1, [r5, #0]
10003dca:	2b00      	cmp	r3, #0
10003dcc:	d000      	beq.n	10003dd0 <_vfiprintf_r+0x5e8>
10003dce:	e55f      	b.n	10003890 <_vfiprintf_r+0xa8>
10003dd0:	3320      	adds	r3, #32
10003dd2:	aa10      	add	r2, sp, #64	; 0x40
10003dd4:	70d3      	strb	r3, [r2, #3]
10003dd6:	e55b      	b.n	10003890 <_vfiprintf_r+0xa8>
10003dd8:	7829      	ldrb	r1, [r5, #0]
10003dda:	1c6b      	adds	r3, r5, #1
10003ddc:	292a      	cmp	r1, #42	; 0x2a
10003dde:	d100      	bne.n	10003de2 <_vfiprintf_r+0x5fa>
10003de0:	e398      	b.n	10004514 <_vfiprintf_r+0xd2c>
10003de2:	000a      	movs	r2, r1
10003de4:	3a30      	subs	r2, #48	; 0x30
10003de6:	001d      	movs	r5, r3
10003de8:	2700      	movs	r7, #0
10003dea:	2a09      	cmp	r2, #9
10003dec:	d900      	bls.n	10003df0 <_vfiprintf_r+0x608>
10003dee:	e550      	b.n	10003892 <_vfiprintf_r+0xaa>
10003df0:	00bb      	lsls	r3, r7, #2
10003df2:	7829      	ldrb	r1, [r5, #0]
10003df4:	19db      	adds	r3, r3, r7
10003df6:	005b      	lsls	r3, r3, #1
10003df8:	189f      	adds	r7, r3, r2
10003dfa:	000a      	movs	r2, r1
10003dfc:	3a30      	subs	r2, #48	; 0x30
10003dfe:	3501      	adds	r5, #1
10003e00:	2a09      	cmp	r2, #9
10003e02:	d9f5      	bls.n	10003df0 <_vfiprintf_r+0x608>
10003e04:	e545      	b.n	10003892 <_vfiprintf_r+0xaa>
10003e06:	232b      	movs	r3, #43	; 0x2b
10003e08:	aa10      	add	r2, sp, #64	; 0x40
10003e0a:	7829      	ldrb	r1, [r5, #0]
10003e0c:	70d3      	strb	r3, [r2, #3]
10003e0e:	e53f      	b.n	10003890 <_vfiprintf_r+0xa8>
10003e10:	9908      	ldr	r1, [sp, #32]
10003e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003e14:	2400      	movs	r4, #0
10003e16:	424b      	negs	r3, r1
10003e18:	4194      	sbcs	r4, r2
10003e1a:	9308      	str	r3, [sp, #32]
10003e1c:	9409      	str	r4, [sp, #36]	; 0x24
10003e1e:	232d      	movs	r3, #45	; 0x2d
10003e20:	aa10      	add	r2, sp, #64	; 0x40
10003e22:	70d3      	strb	r3, [r2, #3]
10003e24:	464b      	mov	r3, r9
10003e26:	3301      	adds	r3, #1
10003e28:	d003      	beq.n	10003e32 <_vfiprintf_r+0x64a>
10003e2a:	465a      	mov	r2, fp
10003e2c:	2380      	movs	r3, #128	; 0x80
10003e2e:	439a      	bics	r2, r3
10003e30:	4693      	mov	fp, r2
10003e32:	9b08      	ldr	r3, [sp, #32]
10003e34:	9c09      	ldr	r4, [sp, #36]	; 0x24
10003e36:	2c00      	cmp	r4, #0
10003e38:	d113      	bne.n	10003e62 <_vfiprintf_r+0x67a>
10003e3a:	2b09      	cmp	r3, #9
10003e3c:	d811      	bhi.n	10003e62 <_vfiprintf_r+0x67a>
10003e3e:	3330      	adds	r3, #48	; 0x30
10003e40:	b2db      	uxtb	r3, r3
10003e42:	2263      	movs	r2, #99	; 0x63
10003e44:	a925      	add	r1, sp, #148	; 0x94
10003e46:	548b      	strb	r3, [r1, r2]
10003e48:	464b      	mov	r3, r9
10003e4a:	46ca      	mov	sl, r9
10003e4c:	2b00      	cmp	r3, #0
10003e4e:	dc01      	bgt.n	10003e54 <_vfiprintf_r+0x66c>
10003e50:	2301      	movs	r3, #1
10003e52:	469a      	mov	sl, r3
10003e54:	2301      	movs	r3, #1
10003e56:	9304      	str	r3, [sp, #16]
10003e58:	ab10      	add	r3, sp, #64	; 0x40
10003e5a:	24b7      	movs	r4, #183	; 0xb7
10003e5c:	469c      	mov	ip, r3
10003e5e:	4464      	add	r4, ip
10003e60:	e6f1      	b.n	10003c46 <_vfiprintf_r+0x45e>
10003e62:	2380      	movs	r3, #128	; 0x80
10003e64:	465a      	mov	r2, fp
10003e66:	00db      	lsls	r3, r3, #3
10003e68:	401a      	ands	r2, r3
10003e6a:	2300      	movs	r3, #0
10003e6c:	4698      	mov	r8, r3
10003e6e:	465b      	mov	r3, fp
10003e70:	9304      	str	r3, [sp, #16]
10003e72:	464b      	mov	r3, r9
10003e74:	9607      	str	r6, [sp, #28]
10003e76:	4692      	mov	sl, r2
10003e78:	9e08      	ldr	r6, [sp, #32]
10003e7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
10003e7c:	46ab      	mov	fp, r5
10003e7e:	ac3e      	add	r4, sp, #248	; 0xf8
10003e80:	9306      	str	r3, [sp, #24]
10003e82:	e004      	b.n	10003e8e <_vfiprintf_r+0x6a6>
10003e84:	2f00      	cmp	r7, #0
10003e86:	d100      	bne.n	10003e8a <_vfiprintf_r+0x6a2>
10003e88:	e2f4      	b.n	10004474 <_vfiprintf_r+0xc8c>
10003e8a:	464e      	mov	r6, r9
10003e8c:	002f      	movs	r7, r5
10003e8e:	220a      	movs	r2, #10
10003e90:	2300      	movs	r3, #0
10003e92:	0030      	movs	r0, r6
10003e94:	0039      	movs	r1, r7
10003e96:	f7fc fa41 	bl	1000031c <__aeabi_uldivmod>
10003e9a:	2301      	movs	r3, #1
10003e9c:	469c      	mov	ip, r3
10003e9e:	4653      	mov	r3, sl
10003ea0:	3c01      	subs	r4, #1
10003ea2:	3230      	adds	r2, #48	; 0x30
10003ea4:	4681      	mov	r9, r0
10003ea6:	000d      	movs	r5, r1
10003ea8:	7022      	strb	r2, [r4, #0]
10003eaa:	44e0      	add	r8, ip
10003eac:	2b00      	cmp	r3, #0
10003eae:	d0e9      	beq.n	10003e84 <_vfiprintf_r+0x69c>
10003eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003eb2:	781b      	ldrb	r3, [r3, #0]
10003eb4:	4543      	cmp	r3, r8
10003eb6:	d1e5      	bne.n	10003e84 <_vfiprintf_r+0x69c>
10003eb8:	4643      	mov	r3, r8
10003eba:	2bff      	cmp	r3, #255	; 0xff
10003ebc:	d0e2      	beq.n	10003e84 <_vfiprintf_r+0x69c>
10003ebe:	2f00      	cmp	r7, #0
10003ec0:	d000      	beq.n	10003ec4 <_vfiprintf_r+0x6dc>
10003ec2:	e297      	b.n	100043f4 <_vfiprintf_r+0xc0c>
10003ec4:	2e09      	cmp	r6, #9
10003ec6:	d900      	bls.n	10003eca <_vfiprintf_r+0x6e2>
10003ec8:	e294      	b.n	100043f4 <_vfiprintf_r+0xc0c>
10003eca:	9b06      	ldr	r3, [sp, #24]
10003ecc:	465d      	mov	r5, fp
10003ece:	4699      	mov	r9, r3
10003ed0:	9b04      	ldr	r3, [sp, #16]
10003ed2:	9608      	str	r6, [sp, #32]
10003ed4:	9709      	str	r7, [sp, #36]	; 0x24
10003ed6:	469b      	mov	fp, r3
10003ed8:	9e07      	ldr	r6, [sp, #28]
10003eda:	ab3e      	add	r3, sp, #248	; 0xf8
10003edc:	1b1b      	subs	r3, r3, r4
10003ede:	469a      	mov	sl, r3
10003ee0:	9304      	str	r3, [sp, #16]
10003ee2:	454b      	cmp	r3, r9
10003ee4:	db00      	blt.n	10003ee8 <_vfiprintf_r+0x700>
10003ee6:	e6ae      	b.n	10003c46 <_vfiprintf_r+0x45e>
10003ee8:	46ca      	mov	sl, r9
10003eea:	e6ac      	b.n	10003c46 <_vfiprintf_r+0x45e>
10003eec:	fffffbff 	.word	0xfffffbff
10003ef0:	fffffb7f 	.word	0xfffffb7f
10003ef4:	00007830 	.word	0x00007830
10003ef8:	1000773c 	.word	0x1000773c
10003efc:	2b00      	cmp	r3, #0
10003efe:	d000      	beq.n	10003f02 <_vfiprintf_r+0x71a>
10003f00:	e1ff      	b.n	10004302 <_vfiprintf_r+0xb1a>
10003f02:	ab10      	add	r3, sp, #64	; 0x40
10003f04:	78db      	ldrb	r3, [r3, #3]
10003f06:	2b00      	cmp	r3, #0
10003f08:	d100      	bne.n	10003f0c <_vfiprintf_r+0x724>
10003f0a:	e1f6      	b.n	100042fa <_vfiprintf_r+0xb12>
10003f0c:	ab10      	add	r3, sp, #64	; 0x40
10003f0e:	3303      	adds	r3, #3
10003f10:	9315      	str	r3, [sp, #84]	; 0x54
10003f12:	2301      	movs	r3, #1
10003f14:	2001      	movs	r0, #1
10003f16:	9316      	str	r3, [sp, #88]	; 0x58
10003f18:	ae15      	add	r6, sp, #84	; 0x54
10003f1a:	0002      	movs	r2, r0
10003f1c:	3608      	adds	r6, #8
10003f1e:	3001      	adds	r0, #1
10003f20:	9906      	ldr	r1, [sp, #24]
10003f22:	2900      	cmp	r1, #0
10003f24:	d100      	bne.n	10003f28 <_vfiprintf_r+0x740>
10003f26:	e58d      	b.n	10003a44 <_vfiprintf_r+0x25c>
10003f28:	aa11      	add	r2, sp, #68	; 0x44
10003f2a:	6032      	str	r2, [r6, #0]
10003f2c:	2202      	movs	r2, #2
10003f2e:	3302      	adds	r3, #2
10003f30:	6072      	str	r2, [r6, #4]
10003f32:	9314      	str	r3, [sp, #80]	; 0x50
10003f34:	9013      	str	r0, [sp, #76]	; 0x4c
10003f36:	2807      	cmp	r0, #7
10003f38:	dc00      	bgt.n	10003f3c <_vfiprintf_r+0x754>
10003f3a:	e580      	b.n	10003a3e <_vfiprintf_r+0x256>
10003f3c:	2b00      	cmp	r3, #0
10003f3e:	d000      	beq.n	10003f42 <_vfiprintf_r+0x75a>
10003f40:	e166      	b.n	10004210 <_vfiprintf_r+0xa28>
10003f42:	9907      	ldr	r1, [sp, #28]
10003f44:	2001      	movs	r0, #1
10003f46:	2200      	movs	r2, #0
10003f48:	2300      	movs	r3, #0
10003f4a:	ae15      	add	r6, sp, #84	; 0x54
10003f4c:	2980      	cmp	r1, #128	; 0x80
10003f4e:	d000      	beq.n	10003f52 <_vfiprintf_r+0x76a>
10003f50:	e57c      	b.n	10003a4c <_vfiprintf_r+0x264>
10003f52:	4657      	mov	r7, sl
10003f54:	9902      	ldr	r1, [sp, #8]
10003f56:	1bcf      	subs	r7, r1, r7
10003f58:	2f00      	cmp	r7, #0
10003f5a:	dc00      	bgt.n	10003f5e <_vfiprintf_r+0x776>
10003f5c:	e576      	b.n	10003a4c <_vfiprintf_r+0x264>
10003f5e:	2f10      	cmp	r7, #16
10003f60:	dc00      	bgt.n	10003f64 <_vfiprintf_r+0x77c>
10003f62:	e2c2      	b.n	100044ea <_vfiprintf_r+0xd02>
10003f64:	49ce      	ldr	r1, [pc, #824]	; (100042a0 <_vfiprintf_r+0xab8>)
10003f66:	46a0      	mov	r8, r4
10003f68:	000c      	movs	r4, r1
10003f6a:	e005      	b.n	10003f78 <_vfiprintf_r+0x790>
10003f6c:	3f10      	subs	r7, #16
10003f6e:	1c90      	adds	r0, r2, #2
10003f70:	3608      	adds	r6, #8
10003f72:	000a      	movs	r2, r1
10003f74:	2f10      	cmp	r7, #16
10003f76:	dd12      	ble.n	10003f9e <_vfiprintf_r+0x7b6>
10003f78:	2110      	movs	r1, #16
10003f7a:	3310      	adds	r3, #16
10003f7c:	6071      	str	r1, [r6, #4]
10003f7e:	1c51      	adds	r1, r2, #1
10003f80:	6034      	str	r4, [r6, #0]
10003f82:	9314      	str	r3, [sp, #80]	; 0x50
10003f84:	9113      	str	r1, [sp, #76]	; 0x4c
10003f86:	2907      	cmp	r1, #7
10003f88:	ddf0      	ble.n	10003f6c <_vfiprintf_r+0x784>
10003f8a:	2b00      	cmp	r3, #0
10003f8c:	d000      	beq.n	10003f90 <_vfiprintf_r+0x7a8>
10003f8e:	e0a9      	b.n	100040e4 <_vfiprintf_r+0x8fc>
10003f90:	3f10      	subs	r7, #16
10003f92:	2001      	movs	r0, #1
10003f94:	2200      	movs	r2, #0
10003f96:	2300      	movs	r3, #0
10003f98:	ae15      	add	r6, sp, #84	; 0x54
10003f9a:	2f10      	cmp	r7, #16
10003f9c:	dcec      	bgt.n	10003f78 <_vfiprintf_r+0x790>
10003f9e:	0022      	movs	r2, r4
10003fa0:	4684      	mov	ip, r0
10003fa2:	4644      	mov	r4, r8
10003fa4:	4690      	mov	r8, r2
10003fa6:	4642      	mov	r2, r8
10003fa8:	6032      	str	r2, [r6, #0]
10003faa:	4662      	mov	r2, ip
10003fac:	19db      	adds	r3, r3, r7
10003fae:	6077      	str	r7, [r6, #4]
10003fb0:	9314      	str	r3, [sp, #80]	; 0x50
10003fb2:	9213      	str	r2, [sp, #76]	; 0x4c
10003fb4:	2a07      	cmp	r2, #7
10003fb6:	dd00      	ble.n	10003fba <_vfiprintf_r+0x7d2>
10003fb8:	e163      	b.n	10004282 <_vfiprintf_r+0xa9a>
10003fba:	4649      	mov	r1, r9
10003fbc:	9f04      	ldr	r7, [sp, #16]
10003fbe:	3608      	adds	r6, #8
10003fc0:	1c50      	adds	r0, r2, #1
10003fc2:	1bcf      	subs	r7, r1, r7
10003fc4:	2f00      	cmp	r7, #0
10003fc6:	dc00      	bgt.n	10003fca <_vfiprintf_r+0x7e2>
10003fc8:	e546      	b.n	10003a58 <_vfiprintf_r+0x270>
10003fca:	990d      	ldr	r1, [sp, #52]	; 0x34
10003fcc:	4688      	mov	r8, r1
10003fce:	2f10      	cmp	r7, #16
10003fd0:	dd20      	ble.n	10004014 <_vfiprintf_r+0x82c>
10003fd2:	2110      	movs	r1, #16
10003fd4:	4689      	mov	r9, r1
10003fd6:	4641      	mov	r1, r8
10003fd8:	46a0      	mov	r8, r4
10003fda:	000c      	movs	r4, r1
10003fdc:	e005      	b.n	10003fea <_vfiprintf_r+0x802>
10003fde:	3f10      	subs	r7, #16
10003fe0:	1c90      	adds	r0, r2, #2
10003fe2:	3608      	adds	r6, #8
10003fe4:	000a      	movs	r2, r1
10003fe6:	2f10      	cmp	r7, #16
10003fe8:	dd11      	ble.n	1000400e <_vfiprintf_r+0x826>
10003fea:	4649      	mov	r1, r9
10003fec:	3310      	adds	r3, #16
10003fee:	6071      	str	r1, [r6, #4]
10003ff0:	1c51      	adds	r1, r2, #1
10003ff2:	6034      	str	r4, [r6, #0]
10003ff4:	9314      	str	r3, [sp, #80]	; 0x50
10003ff6:	9113      	str	r1, [sp, #76]	; 0x4c
10003ff8:	2907      	cmp	r1, #7
10003ffa:	ddf0      	ble.n	10003fde <_vfiprintf_r+0x7f6>
10003ffc:	2b00      	cmp	r3, #0
10003ffe:	d17d      	bne.n	100040fc <_vfiprintf_r+0x914>
10004000:	3f10      	subs	r7, #16
10004002:	2001      	movs	r0, #1
10004004:	2200      	movs	r2, #0
10004006:	2300      	movs	r3, #0
10004008:	ae15      	add	r6, sp, #84	; 0x54
1000400a:	2f10      	cmp	r7, #16
1000400c:	dced      	bgt.n	10003fea <_vfiprintf_r+0x802>
1000400e:	0022      	movs	r2, r4
10004010:	4644      	mov	r4, r8
10004012:	4690      	mov	r8, r2
10004014:	4642      	mov	r2, r8
10004016:	19db      	adds	r3, r3, r7
10004018:	6032      	str	r2, [r6, #0]
1000401a:	6077      	str	r7, [r6, #4]
1000401c:	9314      	str	r3, [sp, #80]	; 0x50
1000401e:	9013      	str	r0, [sp, #76]	; 0x4c
10004020:	2807      	cmp	r0, #7
10004022:	dc02      	bgt.n	1000402a <_vfiprintf_r+0x842>
10004024:	3608      	adds	r6, #8
10004026:	3001      	adds	r0, #1
10004028:	e516      	b.n	10003a58 <_vfiprintf_r+0x270>
1000402a:	2b00      	cmp	r3, #0
1000402c:	d00a      	beq.n	10004044 <_vfiprintf_r+0x85c>
1000402e:	9900      	ldr	r1, [sp, #0]
10004030:	9801      	ldr	r0, [sp, #4]
10004032:	aa12      	add	r2, sp, #72	; 0x48
10004034:	f000 fddc 	bl	10004bf0 <__sfvwrite_r>
10004038:	2300      	movs	r3, #0
1000403a:	9314      	str	r3, [sp, #80]	; 0x50
1000403c:	9313      	str	r3, [sp, #76]	; 0x4c
1000403e:	2800      	cmp	r0, #0
10004040:	d000      	beq.n	10004044 <_vfiprintf_r+0x85c>
10004042:	e49a      	b.n	1000397a <_vfiprintf_r+0x192>
10004044:	2201      	movs	r2, #1
10004046:	9b04      	ldr	r3, [sp, #16]
10004048:	9415      	str	r4, [sp, #84]	; 0x54
1000404a:	9316      	str	r3, [sp, #88]	; 0x58
1000404c:	9314      	str	r3, [sp, #80]	; 0x50
1000404e:	9213      	str	r2, [sp, #76]	; 0x4c
10004050:	ae15      	add	r6, sp, #84	; 0x54
10004052:	465a      	mov	r2, fp
10004054:	0752      	lsls	r2, r2, #29
10004056:	d400      	bmi.n	1000405a <_vfiprintf_r+0x872>
10004058:	e518      	b.n	10003a8c <_vfiprintf_r+0x2a4>
1000405a:	0032      	movs	r2, r6
1000405c:	4650      	mov	r0, sl
1000405e:	9902      	ldr	r1, [sp, #8]
10004060:	3208      	adds	r2, #8
10004062:	1a0c      	subs	r4, r1, r0
10004064:	2c00      	cmp	r4, #0
10004066:	dc00      	bgt.n	1000406a <_vfiprintf_r+0x882>
10004068:	e510      	b.n	10003a8c <_vfiprintf_r+0x2a4>
1000406a:	9813      	ldr	r0, [sp, #76]	; 0x4c
1000406c:	2c10      	cmp	r4, #16
1000406e:	dc00      	bgt.n	10004072 <_vfiprintf_r+0x88a>
10004070:	e236      	b.n	100044e0 <_vfiprintf_r+0xcf8>
10004072:	498c      	ldr	r1, [pc, #560]	; (100042a4 <_vfiprintf_r+0xabc>)
10004074:	46a8      	mov	r8, r5
10004076:	2710      	movs	r7, #16
10004078:	2600      	movs	r6, #0
1000407a:	000d      	movs	r5, r1
1000407c:	e006      	b.n	1000408c <_vfiprintf_r+0x8a4>
1000407e:	3002      	adds	r0, #2
10004080:	3c10      	subs	r4, #16
10004082:	4684      	mov	ip, r0
10004084:	3208      	adds	r2, #8
10004086:	0008      	movs	r0, r1
10004088:	2c10      	cmp	r4, #16
1000408a:	dd12      	ble.n	100040b2 <_vfiprintf_r+0x8ca>
1000408c:	3310      	adds	r3, #16
1000408e:	1c41      	adds	r1, r0, #1
10004090:	6015      	str	r5, [r2, #0]
10004092:	6057      	str	r7, [r2, #4]
10004094:	9314      	str	r3, [sp, #80]	; 0x50
10004096:	9113      	str	r1, [sp, #76]	; 0x4c
10004098:	2907      	cmp	r1, #7
1000409a:	ddf0      	ble.n	1000407e <_vfiprintf_r+0x896>
1000409c:	2b00      	cmp	r3, #0
1000409e:	d000      	beq.n	100040a2 <_vfiprintf_r+0x8ba>
100040a0:	e0a3      	b.n	100041ea <_vfiprintf_r+0xa02>
100040a2:	2301      	movs	r3, #1
100040a4:	3c10      	subs	r4, #16
100040a6:	469c      	mov	ip, r3
100040a8:	2000      	movs	r0, #0
100040aa:	2300      	movs	r3, #0
100040ac:	aa15      	add	r2, sp, #84	; 0x54
100040ae:	2c10      	cmp	r4, #16
100040b0:	dcec      	bgt.n	1000408c <_vfiprintf_r+0x8a4>
100040b2:	0029      	movs	r1, r5
100040b4:	4645      	mov	r5, r8
100040b6:	4688      	mov	r8, r1
100040b8:	4641      	mov	r1, r8
100040ba:	c212      	stmia	r2!, {r1, r4}
100040bc:	4662      	mov	r2, ip
100040be:	191b      	adds	r3, r3, r4
100040c0:	9314      	str	r3, [sp, #80]	; 0x50
100040c2:	9213      	str	r2, [sp, #76]	; 0x4c
100040c4:	2a07      	cmp	r2, #7
100040c6:	dc00      	bgt.n	100040ca <_vfiprintf_r+0x8e2>
100040c8:	e4e0      	b.n	10003a8c <_vfiprintf_r+0x2a4>
100040ca:	2b00      	cmp	r3, #0
100040cc:	d000      	beq.n	100040d0 <_vfiprintf_r+0x8e8>
100040ce:	e12d      	b.n	1000432c <_vfiprintf_r+0xb44>
100040d0:	9b02      	ldr	r3, [sp, #8]
100040d2:	4553      	cmp	r3, sl
100040d4:	da00      	bge.n	100040d8 <_vfiprintf_r+0x8f0>
100040d6:	4653      	mov	r3, sl
100040d8:	9a03      	ldr	r2, [sp, #12]
100040da:	4694      	mov	ip, r2
100040dc:	449c      	add	ip, r3
100040de:	4663      	mov	r3, ip
100040e0:	9303      	str	r3, [sp, #12]
100040e2:	e4e9      	b.n	10003ab8 <_vfiprintf_r+0x2d0>
100040e4:	9900      	ldr	r1, [sp, #0]
100040e6:	9801      	ldr	r0, [sp, #4]
100040e8:	aa12      	add	r2, sp, #72	; 0x48
100040ea:	f000 fd81 	bl	10004bf0 <__sfvwrite_r>
100040ee:	2300      	movs	r3, #0
100040f0:	9314      	str	r3, [sp, #80]	; 0x50
100040f2:	9313      	str	r3, [sp, #76]	; 0x4c
100040f4:	2800      	cmp	r0, #0
100040f6:	d100      	bne.n	100040fa <_vfiprintf_r+0x912>
100040f8:	e74a      	b.n	10003f90 <_vfiprintf_r+0x7a8>
100040fa:	e43e      	b.n	1000397a <_vfiprintf_r+0x192>
100040fc:	9900      	ldr	r1, [sp, #0]
100040fe:	9801      	ldr	r0, [sp, #4]
10004100:	aa12      	add	r2, sp, #72	; 0x48
10004102:	f000 fd75 	bl	10004bf0 <__sfvwrite_r>
10004106:	2300      	movs	r3, #0
10004108:	9314      	str	r3, [sp, #80]	; 0x50
1000410a:	9313      	str	r3, [sp, #76]	; 0x4c
1000410c:	2800      	cmp	r0, #0
1000410e:	d100      	bne.n	10004112 <_vfiprintf_r+0x92a>
10004110:	e776      	b.n	10004000 <_vfiprintf_r+0x818>
10004112:	9a00      	ldr	r2, [sp, #0]
10004114:	210c      	movs	r1, #12
10004116:	5e53      	ldrsh	r3, [r2, r1]
10004118:	6e52      	ldr	r2, [r2, #100]	; 0x64
1000411a:	07d2      	lsls	r2, r2, #31
1000411c:	d500      	bpl.n	10004120 <_vfiprintf_r+0x938>
1000411e:	e433      	b.n	10003988 <_vfiprintf_r+0x1a0>
10004120:	e4e8      	b.n	10003af4 <_vfiprintf_r+0x30c>
10004122:	9900      	ldr	r1, [sp, #0]
10004124:	9801      	ldr	r0, [sp, #4]
10004126:	aa12      	add	r2, sp, #72	; 0x48
10004128:	f000 fd62 	bl	10004bf0 <__sfvwrite_r>
1000412c:	2300      	movs	r3, #0
1000412e:	9314      	str	r3, [sp, #80]	; 0x50
10004130:	9313      	str	r3, [sp, #76]	; 0x4c
10004132:	2800      	cmp	r0, #0
10004134:	d100      	bne.n	10004138 <_vfiprintf_r+0x950>
10004136:	e49d      	b.n	10003a74 <_vfiprintf_r+0x28c>
10004138:	f7ff fc1f 	bl	1000397a <_vfiprintf_r+0x192>
1000413c:	468b      	mov	fp, r1
1000413e:	200f      	movs	r0, #15
10004140:	9f0c      	ldr	r7, [sp, #48]	; 0x30
10004142:	ac3e      	add	r4, sp, #248	; 0xf8
10004144:	0019      	movs	r1, r3
10004146:	4001      	ands	r1, r0
10004148:	5c79      	ldrb	r1, [r7, r1]
1000414a:	3c01      	subs	r4, #1
1000414c:	7021      	strb	r1, [r4, #0]
1000414e:	091b      	lsrs	r3, r3, #4
10004150:	0711      	lsls	r1, r2, #28
10004152:	430b      	orrs	r3, r1
10004154:	0019      	movs	r1, r3
10004156:	0912      	lsrs	r2, r2, #4
10004158:	4311      	orrs	r1, r2
1000415a:	d1f3      	bne.n	10004144 <_vfiprintf_r+0x95c>
1000415c:	e6bd      	b.n	10003eda <_vfiprintf_r+0x6f2>
1000415e:	2f10      	cmp	r7, #16
10004160:	dc00      	bgt.n	10004164 <_vfiprintf_r+0x97c>
10004162:	e1ac      	b.n	100044be <_vfiprintf_r+0xcd6>
10004164:	494f      	ldr	r1, [pc, #316]	; (100042a4 <_vfiprintf_r+0xabc>)
10004166:	4688      	mov	r8, r1
10004168:	4640      	mov	r0, r8
1000416a:	4661      	mov	r1, ip
1000416c:	46a0      	mov	r8, r4
1000416e:	0004      	movs	r4, r0
10004170:	e006      	b.n	10004180 <_vfiprintf_r+0x998>
10004172:	3f10      	subs	r7, #16
10004174:	1c90      	adds	r0, r2, #2
10004176:	3608      	adds	r6, #8
10004178:	000a      	movs	r2, r1
1000417a:	2f10      	cmp	r7, #16
1000417c:	dd11      	ble.n	100041a2 <_vfiprintf_r+0x9ba>
1000417e:	1c51      	adds	r1, r2, #1
10004180:	2010      	movs	r0, #16
10004182:	3310      	adds	r3, #16
10004184:	6034      	str	r4, [r6, #0]
10004186:	6070      	str	r0, [r6, #4]
10004188:	9314      	str	r3, [sp, #80]	; 0x50
1000418a:	9113      	str	r1, [sp, #76]	; 0x4c
1000418c:	2907      	cmp	r1, #7
1000418e:	ddf0      	ble.n	10004172 <_vfiprintf_r+0x98a>
10004190:	2b00      	cmp	r3, #0
10004192:	d117      	bne.n	100041c4 <_vfiprintf_r+0x9dc>
10004194:	3f10      	subs	r7, #16
10004196:	2200      	movs	r2, #0
10004198:	2001      	movs	r0, #1
1000419a:	2300      	movs	r3, #0
1000419c:	ae15      	add	r6, sp, #84	; 0x54
1000419e:	2f10      	cmp	r7, #16
100041a0:	dced      	bgt.n	1000417e <_vfiprintf_r+0x996>
100041a2:	0022      	movs	r2, r4
100041a4:	4684      	mov	ip, r0
100041a6:	4644      	mov	r4, r8
100041a8:	4690      	mov	r8, r2
100041aa:	4642      	mov	r2, r8
100041ac:	6032      	str	r2, [r6, #0]
100041ae:	4662      	mov	r2, ip
100041b0:	19db      	adds	r3, r3, r7
100041b2:	6077      	str	r7, [r6, #4]
100041b4:	9314      	str	r3, [sp, #80]	; 0x50
100041b6:	9213      	str	r2, [sp, #76]	; 0x4c
100041b8:	2a07      	cmp	r2, #7
100041ba:	dd00      	ble.n	100041be <_vfiprintf_r+0x9d6>
100041bc:	e69e      	b.n	10003efc <_vfiprintf_r+0x714>
100041be:	3608      	adds	r6, #8
100041c0:	1c50      	adds	r0, r2, #1
100041c2:	e416      	b.n	100039f2 <_vfiprintf_r+0x20a>
100041c4:	9900      	ldr	r1, [sp, #0]
100041c6:	9801      	ldr	r0, [sp, #4]
100041c8:	aa12      	add	r2, sp, #72	; 0x48
100041ca:	f000 fd11 	bl	10004bf0 <__sfvwrite_r>
100041ce:	2300      	movs	r3, #0
100041d0:	9314      	str	r3, [sp, #80]	; 0x50
100041d2:	9313      	str	r3, [sp, #76]	; 0x4c
100041d4:	2800      	cmp	r0, #0
100041d6:	d0dd      	beq.n	10004194 <_vfiprintf_r+0x9ac>
100041d8:	9a00      	ldr	r2, [sp, #0]
100041da:	210c      	movs	r1, #12
100041dc:	5e53      	ldrsh	r3, [r2, r1]
100041de:	6e52      	ldr	r2, [r2, #100]	; 0x64
100041e0:	07d2      	lsls	r2, r2, #31
100041e2:	d501      	bpl.n	100041e8 <_vfiprintf_r+0xa00>
100041e4:	f7ff fbd0 	bl	10003988 <_vfiprintf_r+0x1a0>
100041e8:	e484      	b.n	10003af4 <_vfiprintf_r+0x30c>
100041ea:	9900      	ldr	r1, [sp, #0]
100041ec:	9801      	ldr	r0, [sp, #4]
100041ee:	aa12      	add	r2, sp, #72	; 0x48
100041f0:	f000 fcfe 	bl	10004bf0 <__sfvwrite_r>
100041f4:	9614      	str	r6, [sp, #80]	; 0x50
100041f6:	9613      	str	r6, [sp, #76]	; 0x4c
100041f8:	2800      	cmp	r0, #0
100041fa:	d100      	bne.n	100041fe <_vfiprintf_r+0xa16>
100041fc:	e751      	b.n	100040a2 <_vfiprintf_r+0x8ba>
100041fe:	9a00      	ldr	r2, [sp, #0]
10004200:	210c      	movs	r1, #12
10004202:	5e53      	ldrsh	r3, [r2, r1]
10004204:	6e52      	ldr	r2, [r2, #100]	; 0x64
10004206:	07d2      	lsls	r2, r2, #31
10004208:	d501      	bpl.n	1000420e <_vfiprintf_r+0xa26>
1000420a:	f7ff fbbd 	bl	10003988 <_vfiprintf_r+0x1a0>
1000420e:	e471      	b.n	10003af4 <_vfiprintf_r+0x30c>
10004210:	9900      	ldr	r1, [sp, #0]
10004212:	9801      	ldr	r0, [sp, #4]
10004214:	aa12      	add	r2, sp, #72	; 0x48
10004216:	f000 fceb 	bl	10004bf0 <__sfvwrite_r>
1000421a:	2300      	movs	r3, #0
1000421c:	9314      	str	r3, [sp, #80]	; 0x50
1000421e:	9313      	str	r3, [sp, #76]	; 0x4c
10004220:	2800      	cmp	r0, #0
10004222:	d100      	bne.n	10004226 <_vfiprintf_r+0xa3e>
10004224:	e68d      	b.n	10003f42 <_vfiprintf_r+0x75a>
10004226:	f7ff fba8 	bl	1000397a <_vfiprintf_r+0x192>
1000422a:	9905      	ldr	r1, [sp, #20]
1000422c:	c904      	ldmia	r1!, {r2}
1000422e:	9105      	str	r1, [sp, #20]
10004230:	06d9      	lsls	r1, r3, #27
10004232:	d403      	bmi.n	1000423c <_vfiprintf_r+0xa54>
10004234:	0659      	lsls	r1, r3, #25
10004236:	d400      	bmi.n	1000423a <_vfiprintf_r+0xa52>
10004238:	e114      	b.n	10004464 <_vfiprintf_r+0xc7c>
1000423a:	b292      	uxth	r2, r2
1000423c:	9208      	str	r2, [sp, #32]
1000423e:	2200      	movs	r2, #0
10004240:	9209      	str	r2, [sp, #36]	; 0x24
10004242:	e536      	b.n	10003cb2 <_vfiprintf_r+0x4ca>
10004244:	ca08      	ldmia	r2!, {r3}
10004246:	9205      	str	r2, [sp, #20]
10004248:	06ca      	lsls	r2, r1, #27
1000424a:	d407      	bmi.n	1000425c <_vfiprintf_r+0xa74>
1000424c:	064a      	lsls	r2, r1, #25
1000424e:	d502      	bpl.n	10004256 <_vfiprintf_r+0xa6e>
10004250:	2200      	movs	r2, #0
10004252:	b29b      	uxth	r3, r3
10004254:	e4ce      	b.n	10003bf4 <_vfiprintf_r+0x40c>
10004256:	058a      	lsls	r2, r1, #22
10004258:	d500      	bpl.n	1000425c <_vfiprintf_r+0xa74>
1000425a:	e10f      	b.n	1000447c <_vfiprintf_r+0xc94>
1000425c:	2200      	movs	r2, #0
1000425e:	e4c9      	b.n	10003bf4 <_vfiprintf_r+0x40c>
10004260:	465a      	mov	r2, fp
10004262:	0592      	lsls	r2, r2, #22
10004264:	d500      	bpl.n	10004268 <_vfiprintf_r+0xa80>
10004266:	e10d      	b.n	10004484 <_vfiprintf_r+0xc9c>
10004268:	9308      	str	r3, [sp, #32]
1000426a:	17db      	asrs	r3, r3, #31
1000426c:	9309      	str	r3, [sp, #36]	; 0x24
1000426e:	e491      	b.n	10003b94 <_vfiprintf_r+0x3ac>
10004270:	2300      	movs	r3, #0
10004272:	ac3e      	add	r4, sp, #248	; 0xf8
10004274:	469a      	mov	sl, r3
10004276:	9304      	str	r3, [sp, #16]
10004278:	e4e5      	b.n	10003c46 <_vfiprintf_r+0x45e>
1000427a:	2300      	movs	r3, #0
1000427c:	ac3e      	add	r4, sp, #248	; 0xf8
1000427e:	469a      	mov	sl, r3
10004280:	e4e1      	b.n	10003c46 <_vfiprintf_r+0x45e>
10004282:	2b00      	cmp	r3, #0
10004284:	d000      	beq.n	10004288 <_vfiprintf_r+0xaa0>
10004286:	e0a2      	b.n	100043ce <_vfiprintf_r+0xbe6>
10004288:	464b      	mov	r3, r9
1000428a:	9a04      	ldr	r2, [sp, #16]
1000428c:	1a9f      	subs	r7, r3, r2
1000428e:	2f00      	cmp	r7, #0
10004290:	dc00      	bgt.n	10004294 <_vfiprintf_r+0xaac>
10004292:	e6d7      	b.n	10004044 <_vfiprintf_r+0x85c>
10004294:	2300      	movs	r3, #0
10004296:	2200      	movs	r2, #0
10004298:	2001      	movs	r0, #1
1000429a:	ae15      	add	r6, sp, #84	; 0x54
1000429c:	e697      	b.n	10003fce <_vfiprintf_r+0x7e6>
1000429e:	46c0      	nop			; (mov r8, r8)
100042a0:	100078c4 	.word	0x100078c4
100042a4:	100078d4 	.word	0x100078d4
100042a8:	0023      	movs	r3, r4
100042aa:	06db      	lsls	r3, r3, #27
100042ac:	d500      	bpl.n	100042b0 <_vfiprintf_r+0xac8>
100042ae:	e0c7      	b.n	10004440 <_vfiprintf_r+0xc58>
100042b0:	0023      	movs	r3, r4
100042b2:	065b      	lsls	r3, r3, #25
100042b4:	d500      	bpl.n	100042b8 <_vfiprintf_r+0xad0>
100042b6:	e0ee      	b.n	10004496 <_vfiprintf_r+0xcae>
100042b8:	0023      	movs	r3, r4
100042ba:	059b      	lsls	r3, r3, #22
100042bc:	d400      	bmi.n	100042c0 <_vfiprintf_r+0xad8>
100042be:	e0bf      	b.n	10004440 <_vfiprintf_r+0xc58>
100042c0:	9b05      	ldr	r3, [sp, #20]
100042c2:	9a03      	ldr	r2, [sp, #12]
100042c4:	681b      	ldr	r3, [r3, #0]
100042c6:	701a      	strb	r2, [r3, #0]
100042c8:	e564      	b.n	10003d94 <_vfiprintf_r+0x5ac>
100042ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100042cc:	7829      	ldrb	r1, [r5, #0]
100042ce:	2b00      	cmp	r3, #0
100042d0:	d101      	bne.n	100042d6 <_vfiprintf_r+0xaee>
100042d2:	f7ff fadd 	bl	10003890 <_vfiprintf_r+0xa8>
100042d6:	781b      	ldrb	r3, [r3, #0]
100042d8:	2b00      	cmp	r3, #0
100042da:	d101      	bne.n	100042e0 <_vfiprintf_r+0xaf8>
100042dc:	f7ff fad8 	bl	10003890 <_vfiprintf_r+0xa8>
100042e0:	2380      	movs	r3, #128	; 0x80
100042e2:	00db      	lsls	r3, r3, #3
100042e4:	431c      	orrs	r4, r3
100042e6:	f7ff fad3 	bl	10003890 <_vfiprintf_r+0xa8>
100042ea:	9d00      	ldr	r5, [sp, #0]
100042ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
100042ee:	f001 fc45 	bl	10005b7c <__retarget_lock_acquire_recursive>
100042f2:	230c      	movs	r3, #12
100042f4:	5eea      	ldrsh	r2, [r5, r3]
100042f6:	f7ff fa93 	bl	10003820 <_vfiprintf_r+0x38>
100042fa:	2200      	movs	r2, #0
100042fc:	2001      	movs	r0, #1
100042fe:	ae15      	add	r6, sp, #84	; 0x54
10004300:	e60e      	b.n	10003f20 <_vfiprintf_r+0x738>
10004302:	9900      	ldr	r1, [sp, #0]
10004304:	9801      	ldr	r0, [sp, #4]
10004306:	aa12      	add	r2, sp, #72	; 0x48
10004308:	f000 fc72 	bl	10004bf0 <__sfvwrite_r>
1000430c:	2300      	movs	r3, #0
1000430e:	9314      	str	r3, [sp, #80]	; 0x50
10004310:	9313      	str	r3, [sp, #76]	; 0x4c
10004312:	2800      	cmp	r0, #0
10004314:	d001      	beq.n	1000431a <_vfiprintf_r+0xb32>
10004316:	f7ff fb30 	bl	1000397a <_vfiprintf_r+0x192>
1000431a:	ab10      	add	r3, sp, #64	; 0x40
1000431c:	78db      	ldrb	r3, [r3, #3]
1000431e:	2b00      	cmp	r3, #0
10004320:	d000      	beq.n	10004324 <_vfiprintf_r+0xb3c>
10004322:	e5f3      	b.n	10003f0c <_vfiprintf_r+0x724>
10004324:	e7e9      	b.n	100042fa <_vfiprintf_r+0xb12>
10004326:	46ca      	mov	sl, r9
10004328:	003c      	movs	r4, r7
1000432a:	e48c      	b.n	10003c46 <_vfiprintf_r+0x45e>
1000432c:	9900      	ldr	r1, [sp, #0]
1000432e:	9801      	ldr	r0, [sp, #4]
10004330:	aa12      	add	r2, sp, #72	; 0x48
10004332:	f000 fc5d 	bl	10004bf0 <__sfvwrite_r>
10004336:	2300      	movs	r3, #0
10004338:	9314      	str	r3, [sp, #80]	; 0x50
1000433a:	9313      	str	r3, [sp, #76]	; 0x4c
1000433c:	2800      	cmp	r0, #0
1000433e:	d100      	bne.n	10004342 <_vfiprintf_r+0xb5a>
10004340:	e6c6      	b.n	100040d0 <_vfiprintf_r+0x8e8>
10004342:	f7ff fb1a 	bl	1000397a <_vfiprintf_r+0x192>
10004346:	46b9      	mov	r9, r7
10004348:	0023      	movs	r3, r4
1000434a:	e4a6      	b.n	10003c9a <_vfiprintf_r+0x4b2>
1000434c:	46a3      	mov	fp, r4
1000434e:	4b77      	ldr	r3, [pc, #476]	; (1000452c <_vfiprintf_r+0xd44>)
10004350:	46b9      	mov	r9, r7
10004352:	930c      	str	r3, [sp, #48]	; 0x30
10004354:	465b      	mov	r3, fp
10004356:	9a05      	ldr	r2, [sp, #20]
10004358:	069b      	lsls	r3, r3, #26
1000435a:	d527      	bpl.n	100043ac <_vfiprintf_r+0xbc4>
1000435c:	2307      	movs	r3, #7
1000435e:	3207      	adds	r2, #7
10004360:	439a      	bics	r2, r3
10004362:	3301      	adds	r3, #1
10004364:	469c      	mov	ip, r3
10004366:	4494      	add	ip, r2
10004368:	4663      	mov	r3, ip
1000436a:	9305      	str	r3, [sp, #20]
1000436c:	6813      	ldr	r3, [r2, #0]
1000436e:	6852      	ldr	r2, [r2, #4]
10004370:	4658      	mov	r0, fp
10004372:	07c0      	lsls	r0, r0, #31
10004374:	d50a      	bpl.n	1000438c <_vfiprintf_r+0xba4>
10004376:	0018      	movs	r0, r3
10004378:	4310      	orrs	r0, r2
1000437a:	d007      	beq.n	1000438c <_vfiprintf_r+0xba4>
1000437c:	2430      	movs	r4, #48	; 0x30
1000437e:	a811      	add	r0, sp, #68	; 0x44
10004380:	7041      	strb	r1, [r0, #1]
10004382:	7004      	strb	r4, [r0, #0]
10004384:	2102      	movs	r1, #2
10004386:	4658      	mov	r0, fp
10004388:	4308      	orrs	r0, r1
1000438a:	4683      	mov	fp, r0
1000438c:	4658      	mov	r0, fp
1000438e:	4968      	ldr	r1, [pc, #416]	; (10004530 <_vfiprintf_r+0xd48>)
10004390:	4008      	ands	r0, r1
10004392:	4683      	mov	fp, r0
10004394:	e4dd      	b.n	10003d52 <_vfiprintf_r+0x56a>
10004396:	46b9      	mov	r9, r7
10004398:	0021      	movs	r1, r4
1000439a:	e41d      	b.n	10003bd8 <_vfiprintf_r+0x3f0>
1000439c:	46a3      	mov	fp, r4
1000439e:	4b65      	ldr	r3, [pc, #404]	; (10004534 <_vfiprintf_r+0xd4c>)
100043a0:	46b9      	mov	r9, r7
100043a2:	930c      	str	r3, [sp, #48]	; 0x30
100043a4:	465b      	mov	r3, fp
100043a6:	9a05      	ldr	r2, [sp, #20]
100043a8:	069b      	lsls	r3, r3, #26
100043aa:	d4d7      	bmi.n	1000435c <_vfiprintf_r+0xb74>
100043ac:	ca08      	ldmia	r2!, {r3}
100043ae:	9205      	str	r2, [sp, #20]
100043b0:	465a      	mov	r2, fp
100043b2:	06d2      	lsls	r2, r2, #27
100043b4:	d433      	bmi.n	1000441e <_vfiprintf_r+0xc36>
100043b6:	465a      	mov	r2, fp
100043b8:	0652      	lsls	r2, r2, #25
100043ba:	d52d      	bpl.n	10004418 <_vfiprintf_r+0xc30>
100043bc:	2200      	movs	r2, #0
100043be:	b29b      	uxth	r3, r3
100043c0:	e7d6      	b.n	10004370 <_vfiprintf_r+0xb88>
100043c2:	0020      	movs	r0, r4
100043c4:	f7ff f9d0 	bl	10003768 <strlen>
100043c8:	0002      	movs	r2, r0
100043ca:	f7ff fbb7 	bl	10003b3c <_vfiprintf_r+0x354>
100043ce:	9900      	ldr	r1, [sp, #0]
100043d0:	9801      	ldr	r0, [sp, #4]
100043d2:	aa12      	add	r2, sp, #72	; 0x48
100043d4:	f000 fc0c 	bl	10004bf0 <__sfvwrite_r>
100043d8:	2300      	movs	r3, #0
100043da:	9314      	str	r3, [sp, #80]	; 0x50
100043dc:	9313      	str	r3, [sp, #76]	; 0x4c
100043de:	2800      	cmp	r0, #0
100043e0:	d001      	beq.n	100043e6 <_vfiprintf_r+0xbfe>
100043e2:	f7ff faca 	bl	1000397a <_vfiprintf_r+0x192>
100043e6:	464b      	mov	r3, r9
100043e8:	9a04      	ldr	r2, [sp, #16]
100043ea:	1a9f      	subs	r7, r3, r2
100043ec:	2f00      	cmp	r7, #0
100043ee:	dc00      	bgt.n	100043f2 <_vfiprintf_r+0xc0a>
100043f0:	e628      	b.n	10004044 <_vfiprintf_r+0x85c>
100043f2:	e74f      	b.n	10004294 <_vfiprintf_r+0xaac>
100043f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100043f6:	990e      	ldr	r1, [sp, #56]	; 0x38
100043f8:	1ae4      	subs	r4, r4, r3
100043fa:	001a      	movs	r2, r3
100043fc:	0020      	movs	r0, r4
100043fe:	f001 f8d9 	bl	100055b4 <strncpy>
10004402:	990b      	ldr	r1, [sp, #44]	; 0x2c
10004404:	784b      	ldrb	r3, [r1, #1]
10004406:	468c      	mov	ip, r1
10004408:	1e5a      	subs	r2, r3, #1
1000440a:	4193      	sbcs	r3, r2
1000440c:	449c      	add	ip, r3
1000440e:	4663      	mov	r3, ip
10004410:	930b      	str	r3, [sp, #44]	; 0x2c
10004412:	2300      	movs	r3, #0
10004414:	4698      	mov	r8, r3
10004416:	e538      	b.n	10003e8a <_vfiprintf_r+0x6a2>
10004418:	465a      	mov	r2, fp
1000441a:	0592      	lsls	r2, r2, #22
1000441c:	d438      	bmi.n	10004490 <_vfiprintf_r+0xca8>
1000441e:	2200      	movs	r2, #0
10004420:	e7a6      	b.n	10004370 <_vfiprintf_r+0xb88>
10004422:	468b      	mov	fp, r1
10004424:	e464      	b.n	10003cf0 <_vfiprintf_r+0x508>
10004426:	2380      	movs	r3, #128	; 0x80
10004428:	009b      	lsls	r3, r3, #2
1000442a:	7869      	ldrb	r1, [r5, #1]
1000442c:	431c      	orrs	r4, r3
1000442e:	3501      	adds	r5, #1
10004430:	f7ff fa2e 	bl	10003890 <_vfiprintf_r+0xa8>
10004434:	2320      	movs	r3, #32
10004436:	7869      	ldrb	r1, [r5, #1]
10004438:	431c      	orrs	r4, r3
1000443a:	3501      	adds	r5, #1
1000443c:	f7ff fa28 	bl	10003890 <_vfiprintf_r+0xa8>
10004440:	9b05      	ldr	r3, [sp, #20]
10004442:	9a03      	ldr	r2, [sp, #12]
10004444:	681b      	ldr	r3, [r3, #0]
10004446:	601a      	str	r2, [r3, #0]
10004448:	e4a4      	b.n	10003d94 <_vfiprintf_r+0x5ac>
1000444a:	9304      	str	r3, [sp, #16]
1000444c:	2b06      	cmp	r3, #6
1000444e:	d901      	bls.n	10004454 <_vfiprintf_r+0xc6c>
10004450:	2306      	movs	r3, #6
10004452:	9304      	str	r3, [sp, #16]
10004454:	9b04      	ldr	r3, [sp, #16]
10004456:	4c38      	ldr	r4, [pc, #224]	; (10004538 <_vfiprintf_r+0xd50>)
10004458:	469a      	mov	sl, r3
1000445a:	9705      	str	r7, [sp, #20]
1000445c:	f7ff faac 	bl	100039b8 <_vfiprintf_r+0x1d0>
10004460:	2200      	movs	r2, #0
10004462:	e66c      	b.n	1000413e <_vfiprintf_r+0x956>
10004464:	0599      	lsls	r1, r3, #22
10004466:	d400      	bmi.n	1000446a <_vfiprintf_r+0xc82>
10004468:	e6e8      	b.n	1000423c <_vfiprintf_r+0xa54>
1000446a:	b2d2      	uxtb	r2, r2
1000446c:	9208      	str	r2, [sp, #32]
1000446e:	2200      	movs	r2, #0
10004470:	9209      	str	r2, [sp, #36]	; 0x24
10004472:	e41e      	b.n	10003cb2 <_vfiprintf_r+0x4ca>
10004474:	2e09      	cmp	r6, #9
10004476:	d900      	bls.n	1000447a <_vfiprintf_r+0xc92>
10004478:	e507      	b.n	10003e8a <_vfiprintf_r+0x6a2>
1000447a:	e526      	b.n	10003eca <_vfiprintf_r+0x6e2>
1000447c:	2200      	movs	r2, #0
1000447e:	b2db      	uxtb	r3, r3
10004480:	f7ff fbb8 	bl	10003bf4 <_vfiprintf_r+0x40c>
10004484:	b25b      	sxtb	r3, r3
10004486:	9308      	str	r3, [sp, #32]
10004488:	17db      	asrs	r3, r3, #31
1000448a:	9309      	str	r3, [sp, #36]	; 0x24
1000448c:	f7ff fb82 	bl	10003b94 <_vfiprintf_r+0x3ac>
10004490:	2200      	movs	r2, #0
10004492:	b2db      	uxtb	r3, r3
10004494:	e76c      	b.n	10004370 <_vfiprintf_r+0xb88>
10004496:	9b05      	ldr	r3, [sp, #20]
10004498:	9a03      	ldr	r2, [sp, #12]
1000449a:	681b      	ldr	r3, [r3, #0]
1000449c:	801a      	strh	r2, [r3, #0]
1000449e:	e479      	b.n	10003d94 <_vfiprintf_r+0x5ac>
100044a0:	6d88      	ldr	r0, [r1, #88]	; 0x58
100044a2:	f001 fb72 	bl	10005b8a <__retarget_lock_release_recursive>
100044a6:	f7ff fa35 	bl	10003914 <_vfiprintf_r+0x12c>
100044aa:	464b      	mov	r3, r9
100044ac:	9304      	str	r3, [sp, #16]
100044ae:	2300      	movs	r3, #0
100044b0:	46ca      	mov	sl, r9
100044b2:	9705      	str	r7, [sp, #20]
100044b4:	4699      	mov	r9, r3
100044b6:	f7ff fbc6 	bl	10003c46 <_vfiprintf_r+0x45e>
100044ba:	2330      	movs	r3, #48	; 0x30
100044bc:	e4c1      	b.n	10003e42 <_vfiprintf_r+0x65a>
100044be:	4a1f      	ldr	r2, [pc, #124]	; (1000453c <_vfiprintf_r+0xd54>)
100044c0:	4690      	mov	r8, r2
100044c2:	e672      	b.n	100041aa <_vfiprintf_r+0x9c2>
100044c4:	9900      	ldr	r1, [sp, #0]
100044c6:	9801      	ldr	r0, [sp, #4]
100044c8:	aa12      	add	r2, sp, #72	; 0x48
100044ca:	f000 fb91 	bl	10004bf0 <__sfvwrite_r>
100044ce:	2300      	movs	r3, #0
100044d0:	9314      	str	r3, [sp, #80]	; 0x50
100044d2:	9313      	str	r3, [sp, #76]	; 0x4c
100044d4:	2800      	cmp	r0, #0
100044d6:	d101      	bne.n	100044dc <_vfiprintf_r+0xcf4>
100044d8:	f7ff fafa 	bl	10003ad0 <_vfiprintf_r+0x2e8>
100044dc:	f7ff fa4d 	bl	1000397a <_vfiprintf_r+0x192>
100044e0:	1c41      	adds	r1, r0, #1
100044e2:	468c      	mov	ip, r1
100044e4:	4915      	ldr	r1, [pc, #84]	; (1000453c <_vfiprintf_r+0xd54>)
100044e6:	4688      	mov	r8, r1
100044e8:	e5e6      	b.n	100040b8 <_vfiprintf_r+0x8d0>
100044ea:	4a15      	ldr	r2, [pc, #84]	; (10004540 <_vfiprintf_r+0xd58>)
100044ec:	4684      	mov	ip, r0
100044ee:	4690      	mov	r8, r2
100044f0:	e559      	b.n	10003fa6 <_vfiprintf_r+0x7be>
100044f2:	9b00      	ldr	r3, [sp, #0]
100044f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100044f6:	07db      	lsls	r3, r3, #31
100044f8:	d407      	bmi.n	1000450a <_vfiprintf_r+0xd22>
100044fa:	9b00      	ldr	r3, [sp, #0]
100044fc:	899b      	ldrh	r3, [r3, #12]
100044fe:	059b      	lsls	r3, r3, #22
10004500:	d403      	bmi.n	1000450a <_vfiprintf_r+0xd22>
10004502:	9b00      	ldr	r3, [sp, #0]
10004504:	6d98      	ldr	r0, [r3, #88]	; 0x58
10004506:	f001 fb40 	bl	10005b8a <__retarget_lock_release_recursive>
1000450a:	2301      	movs	r3, #1
1000450c:	425b      	negs	r3, r3
1000450e:	9303      	str	r3, [sp, #12]
10004510:	f7ff fa3e 	bl	10003990 <_vfiprintf_r+0x1a8>
10004514:	9a05      	ldr	r2, [sp, #20]
10004516:	ca80      	ldmia	r2!, {r7}
10004518:	2f00      	cmp	r7, #0
1000451a:	da01      	bge.n	10004520 <_vfiprintf_r+0xd38>
1000451c:	2701      	movs	r7, #1
1000451e:	427f      	negs	r7, r7
10004520:	7869      	ldrb	r1, [r5, #1]
10004522:	9205      	str	r2, [sp, #20]
10004524:	001d      	movs	r5, r3
10004526:	f7ff f9b3 	bl	10003890 <_vfiprintf_r+0xa8>
1000452a:	46c0      	nop			; (mov r8, r8)
1000452c:	10007728 	.word	0x10007728
10004530:	fffffbff 	.word	0xfffffbff
10004534:	1000773c 	.word	0x1000773c
10004538:	10007750 	.word	0x10007750
1000453c:	100078d4 	.word	0x100078d4
10004540:	100078c4 	.word	0x100078c4

10004544 <__sbprintf>:
10004544:	b5f0      	push	{r4, r5, r6, r7, lr}
10004546:	001f      	movs	r7, r3
10004548:	2302      	movs	r3, #2
1000454a:	4c1f      	ldr	r4, [pc, #124]	; (100045c8 <__sbprintf+0x84>)
1000454c:	0015      	movs	r5, r2
1000454e:	44a5      	add	sp, r4
10004550:	000c      	movs	r4, r1
10004552:	8989      	ldrh	r1, [r1, #12]
10004554:	466a      	mov	r2, sp
10004556:	4399      	bics	r1, r3
10004558:	466b      	mov	r3, sp
1000455a:	8199      	strh	r1, [r3, #12]
1000455c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000455e:	2180      	movs	r1, #128	; 0x80
10004560:	9319      	str	r3, [sp, #100]	; 0x64
10004562:	89e3      	ldrh	r3, [r4, #14]
10004564:	0006      	movs	r6, r0
10004566:	81d3      	strh	r3, [r2, #14]
10004568:	69e3      	ldr	r3, [r4, #28]
1000456a:	00c9      	lsls	r1, r1, #3
1000456c:	9307      	str	r3, [sp, #28]
1000456e:	6a63      	ldr	r3, [r4, #36]	; 0x24
10004570:	a816      	add	r0, sp, #88	; 0x58
10004572:	9309      	str	r3, [sp, #36]	; 0x24
10004574:	ab1a      	add	r3, sp, #104	; 0x68
10004576:	9300      	str	r3, [sp, #0]
10004578:	9304      	str	r3, [sp, #16]
1000457a:	2300      	movs	r3, #0
1000457c:	9102      	str	r1, [sp, #8]
1000457e:	9105      	str	r1, [sp, #20]
10004580:	9306      	str	r3, [sp, #24]
10004582:	f001 faee 	bl	10005b62 <__retarget_lock_init_recursive>
10004586:	002a      	movs	r2, r5
10004588:	003b      	movs	r3, r7
1000458a:	4669      	mov	r1, sp
1000458c:	0030      	movs	r0, r6
1000458e:	f7ff f92b 	bl	100037e8 <_vfiprintf_r>
10004592:	1e05      	subs	r5, r0, #0
10004594:	da0e      	bge.n	100045b4 <__sbprintf+0x70>
10004596:	466b      	mov	r3, sp
10004598:	899b      	ldrh	r3, [r3, #12]
1000459a:	065b      	lsls	r3, r3, #25
1000459c:	d503      	bpl.n	100045a6 <__sbprintf+0x62>
1000459e:	2240      	movs	r2, #64	; 0x40
100045a0:	89a3      	ldrh	r3, [r4, #12]
100045a2:	4313      	orrs	r3, r2
100045a4:	81a3      	strh	r3, [r4, #12]
100045a6:	9816      	ldr	r0, [sp, #88]	; 0x58
100045a8:	f001 fae4 	bl	10005b74 <__retarget_lock_close_recursive>
100045ac:	0028      	movs	r0, r5
100045ae:	4b07      	ldr	r3, [pc, #28]	; (100045cc <__sbprintf+0x88>)
100045b0:	449d      	add	sp, r3
100045b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100045b4:	4669      	mov	r1, sp
100045b6:	0030      	movs	r0, r6
100045b8:	f000 f90c 	bl	100047d4 <_fflush_r>
100045bc:	2800      	cmp	r0, #0
100045be:	d0ea      	beq.n	10004596 <__sbprintf+0x52>
100045c0:	2501      	movs	r5, #1
100045c2:	426d      	negs	r5, r5
100045c4:	e7e7      	b.n	10004596 <__sbprintf+0x52>
100045c6:	46c0      	nop			; (mov r8, r8)
100045c8:	fffffb94 	.word	0xfffffb94
100045cc:	0000046c 	.word	0x0000046c

100045d0 <__swsetup_r>:
100045d0:	4b32      	ldr	r3, [pc, #200]	; (1000469c <__swsetup_r+0xcc>)
100045d2:	b570      	push	{r4, r5, r6, lr}
100045d4:	0005      	movs	r5, r0
100045d6:	6818      	ldr	r0, [r3, #0]
100045d8:	000c      	movs	r4, r1
100045da:	2800      	cmp	r0, #0
100045dc:	d002      	beq.n	100045e4 <__swsetup_r+0x14>
100045de:	6b83      	ldr	r3, [r0, #56]	; 0x38
100045e0:	2b00      	cmp	r3, #0
100045e2:	d021      	beq.n	10004628 <__swsetup_r+0x58>
100045e4:	220c      	movs	r2, #12
100045e6:	5ea3      	ldrsh	r3, [r4, r2]
100045e8:	071a      	lsls	r2, r3, #28
100045ea:	d523      	bpl.n	10004634 <__swsetup_r+0x64>
100045ec:	6922      	ldr	r2, [r4, #16]
100045ee:	2a00      	cmp	r2, #0
100045f0:	d02a      	beq.n	10004648 <__swsetup_r+0x78>
100045f2:	07d9      	lsls	r1, r3, #31
100045f4:	d508      	bpl.n	10004608 <__swsetup_r+0x38>
100045f6:	2100      	movs	r1, #0
100045f8:	60a1      	str	r1, [r4, #8]
100045fa:	6961      	ldr	r1, [r4, #20]
100045fc:	2000      	movs	r0, #0
100045fe:	4249      	negs	r1, r1
10004600:	61a1      	str	r1, [r4, #24]
10004602:	2a00      	cmp	r2, #0
10004604:	d008      	beq.n	10004618 <__swsetup_r+0x48>
10004606:	bd70      	pop	{r4, r5, r6, pc}
10004608:	2100      	movs	r1, #0
1000460a:	0798      	lsls	r0, r3, #30
1000460c:	d400      	bmi.n	10004610 <__swsetup_r+0x40>
1000460e:	6961      	ldr	r1, [r4, #20]
10004610:	2000      	movs	r0, #0
10004612:	60a1      	str	r1, [r4, #8]
10004614:	2a00      	cmp	r2, #0
10004616:	d1f6      	bne.n	10004606 <__swsetup_r+0x36>
10004618:	061a      	lsls	r2, r3, #24
1000461a:	d5f4      	bpl.n	10004606 <__swsetup_r+0x36>
1000461c:	2240      	movs	r2, #64	; 0x40
1000461e:	4313      	orrs	r3, r2
10004620:	2001      	movs	r0, #1
10004622:	81a3      	strh	r3, [r4, #12]
10004624:	4240      	negs	r0, r0
10004626:	e7ee      	b.n	10004606 <__swsetup_r+0x36>
10004628:	f000 f912 	bl	10004850 <__sinit>
1000462c:	220c      	movs	r2, #12
1000462e:	5ea3      	ldrsh	r3, [r4, r2]
10004630:	071a      	lsls	r2, r3, #28
10004632:	d4db      	bmi.n	100045ec <__swsetup_r+0x1c>
10004634:	06da      	lsls	r2, r3, #27
10004636:	d52b      	bpl.n	10004690 <__swsetup_r+0xc0>
10004638:	075a      	lsls	r2, r3, #29
1000463a:	d414      	bmi.n	10004666 <__swsetup_r+0x96>
1000463c:	6922      	ldr	r2, [r4, #16]
1000463e:	2108      	movs	r1, #8
10004640:	430b      	orrs	r3, r1
10004642:	81a3      	strh	r3, [r4, #12]
10004644:	2a00      	cmp	r2, #0
10004646:	d1d4      	bne.n	100045f2 <__swsetup_r+0x22>
10004648:	21a0      	movs	r1, #160	; 0xa0
1000464a:	2080      	movs	r0, #128	; 0x80
1000464c:	0089      	lsls	r1, r1, #2
1000464e:	0080      	lsls	r0, r0, #2
10004650:	4019      	ands	r1, r3
10004652:	4281      	cmp	r1, r0
10004654:	d0cd      	beq.n	100045f2 <__swsetup_r+0x22>
10004656:	0021      	movs	r1, r4
10004658:	0028      	movs	r0, r5
1000465a:	f000 fc79 	bl	10004f50 <__smakebuf_r>
1000465e:	220c      	movs	r2, #12
10004660:	5ea3      	ldrsh	r3, [r4, r2]
10004662:	6922      	ldr	r2, [r4, #16]
10004664:	e7c5      	b.n	100045f2 <__swsetup_r+0x22>
10004666:	6b21      	ldr	r1, [r4, #48]	; 0x30
10004668:	2900      	cmp	r1, #0
1000466a:	d00a      	beq.n	10004682 <__swsetup_r+0xb2>
1000466c:	0022      	movs	r2, r4
1000466e:	3240      	adds	r2, #64	; 0x40
10004670:	4291      	cmp	r1, r2
10004672:	d004      	beq.n	1000467e <__swsetup_r+0xae>
10004674:	0028      	movs	r0, r5
10004676:	f000 f9d1 	bl	10004a1c <_free_r>
1000467a:	220c      	movs	r2, #12
1000467c:	5ea3      	ldrsh	r3, [r4, r2]
1000467e:	2200      	movs	r2, #0
10004680:	6322      	str	r2, [r4, #48]	; 0x30
10004682:	2224      	movs	r2, #36	; 0x24
10004684:	4393      	bics	r3, r2
10004686:	2200      	movs	r2, #0
10004688:	6062      	str	r2, [r4, #4]
1000468a:	6922      	ldr	r2, [r4, #16]
1000468c:	6022      	str	r2, [r4, #0]
1000468e:	e7d6      	b.n	1000463e <__swsetup_r+0x6e>
10004690:	2209      	movs	r2, #9
10004692:	602a      	str	r2, [r5, #0]
10004694:	3237      	adds	r2, #55	; 0x37
10004696:	4313      	orrs	r3, r2
10004698:	e7c2      	b.n	10004620 <__swsetup_r+0x50>
1000469a:	46c0      	nop			; (mov r8, r8)
1000469c:	200006dc 	.word	0x200006dc

100046a0 <abort>:
100046a0:	2006      	movs	r0, #6
100046a2:	b510      	push	{r4, lr}
100046a4:	f000 feee 	bl	10005484 <raise>
100046a8:	2001      	movs	r0, #1
100046aa:	f7fc feb5 	bl	10001418 <_exit>
100046ae:	46c0      	nop			; (mov r8, r8)

100046b0 <__sflush_r>:
100046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100046b2:	46c6      	mov	lr, r8
100046b4:	b500      	push	{lr}
100046b6:	220c      	movs	r2, #12
100046b8:	5e8b      	ldrsh	r3, [r1, r2]
100046ba:	0007      	movs	r7, r0
100046bc:	000c      	movs	r4, r1
100046be:	071a      	lsls	r2, r3, #28
100046c0:	d43c      	bmi.n	1000473c <__sflush_r+0x8c>
100046c2:	684a      	ldr	r2, [r1, #4]
100046c4:	2a00      	cmp	r2, #0
100046c6:	dd5c      	ble.n	10004782 <__sflush_r+0xd2>
100046c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100046ca:	2e00      	cmp	r6, #0
100046cc:	d032      	beq.n	10004734 <__sflush_r+0x84>
100046ce:	2200      	movs	r2, #0
100046d0:	683d      	ldr	r5, [r7, #0]
100046d2:	69e1      	ldr	r1, [r4, #28]
100046d4:	603a      	str	r2, [r7, #0]
100046d6:	04da      	lsls	r2, r3, #19
100046d8:	d457      	bmi.n	1000478a <__sflush_r+0xda>
100046da:	2200      	movs	r2, #0
100046dc:	2301      	movs	r3, #1
100046de:	0038      	movs	r0, r7
100046e0:	47b0      	blx	r6
100046e2:	0002      	movs	r2, r0
100046e4:	1c43      	adds	r3, r0, #1
100046e6:	d067      	beq.n	100047b8 <__sflush_r+0x108>
100046e8:	210c      	movs	r1, #12
100046ea:	5e63      	ldrsh	r3, [r4, r1]
100046ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100046ee:	69e1      	ldr	r1, [r4, #28]
100046f0:	075b      	lsls	r3, r3, #29
100046f2:	d506      	bpl.n	10004702 <__sflush_r+0x52>
100046f4:	6863      	ldr	r3, [r4, #4]
100046f6:	1ad2      	subs	r2, r2, r3
100046f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
100046fa:	2b00      	cmp	r3, #0
100046fc:	d001      	beq.n	10004702 <__sflush_r+0x52>
100046fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
10004700:	1ad2      	subs	r2, r2, r3
10004702:	2300      	movs	r3, #0
10004704:	0038      	movs	r0, r7
10004706:	47b0      	blx	r6
10004708:	1c43      	adds	r3, r0, #1
1000470a:	d047      	beq.n	1000479c <__sflush_r+0xec>
1000470c:	2300      	movs	r3, #0
1000470e:	6063      	str	r3, [r4, #4]
10004710:	6923      	ldr	r3, [r4, #16]
10004712:	6023      	str	r3, [r4, #0]
10004714:	89a3      	ldrh	r3, [r4, #12]
10004716:	04db      	lsls	r3, r3, #19
10004718:	d43e      	bmi.n	10004798 <__sflush_r+0xe8>
1000471a:	6b21      	ldr	r1, [r4, #48]	; 0x30
1000471c:	603d      	str	r5, [r7, #0]
1000471e:	2900      	cmp	r1, #0
10004720:	d008      	beq.n	10004734 <__sflush_r+0x84>
10004722:	0023      	movs	r3, r4
10004724:	3340      	adds	r3, #64	; 0x40
10004726:	4299      	cmp	r1, r3
10004728:	d002      	beq.n	10004730 <__sflush_r+0x80>
1000472a:	0038      	movs	r0, r7
1000472c:	f000 f976 	bl	10004a1c <_free_r>
10004730:	2300      	movs	r3, #0
10004732:	6323      	str	r3, [r4, #48]	; 0x30
10004734:	2000      	movs	r0, #0
10004736:	bc80      	pop	{r7}
10004738:	46b8      	mov	r8, r7
1000473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000473c:	690e      	ldr	r6, [r1, #16]
1000473e:	2e00      	cmp	r6, #0
10004740:	d0f8      	beq.n	10004734 <__sflush_r+0x84>
10004742:	680d      	ldr	r5, [r1, #0]
10004744:	2200      	movs	r2, #0
10004746:	1bad      	subs	r5, r5, r6
10004748:	600e      	str	r6, [r1, #0]
1000474a:	079b      	lsls	r3, r3, #30
1000474c:	d100      	bne.n	10004750 <__sflush_r+0xa0>
1000474e:	694a      	ldr	r2, [r1, #20]
10004750:	60a2      	str	r2, [r4, #8]
10004752:	2d00      	cmp	r5, #0
10004754:	dc04      	bgt.n	10004760 <__sflush_r+0xb0>
10004756:	e7ed      	b.n	10004734 <__sflush_r+0x84>
10004758:	1836      	adds	r6, r6, r0
1000475a:	1a2d      	subs	r5, r5, r0
1000475c:	2d00      	cmp	r5, #0
1000475e:	dde9      	ble.n	10004734 <__sflush_r+0x84>
10004760:	6a63      	ldr	r3, [r4, #36]	; 0x24
10004762:	0032      	movs	r2, r6
10004764:	4698      	mov	r8, r3
10004766:	0038      	movs	r0, r7
10004768:	002b      	movs	r3, r5
1000476a:	69e1      	ldr	r1, [r4, #28]
1000476c:	47c0      	blx	r8
1000476e:	2800      	cmp	r0, #0
10004770:	dcf2      	bgt.n	10004758 <__sflush_r+0xa8>
10004772:	2240      	movs	r2, #64	; 0x40
10004774:	89a3      	ldrh	r3, [r4, #12]
10004776:	4313      	orrs	r3, r2
10004778:	b21b      	sxth	r3, r3
1000477a:	2001      	movs	r0, #1
1000477c:	81a3      	strh	r3, [r4, #12]
1000477e:	4240      	negs	r0, r0
10004780:	e7d9      	b.n	10004736 <__sflush_r+0x86>
10004782:	6bca      	ldr	r2, [r1, #60]	; 0x3c
10004784:	2a00      	cmp	r2, #0
10004786:	dc9f      	bgt.n	100046c8 <__sflush_r+0x18>
10004788:	e7d4      	b.n	10004734 <__sflush_r+0x84>
1000478a:	6d22      	ldr	r2, [r4, #80]	; 0x50
1000478c:	e7b0      	b.n	100046f0 <__sflush_r+0x40>
1000478e:	6062      	str	r2, [r4, #4]
10004790:	6922      	ldr	r2, [r4, #16]
10004792:	6022      	str	r2, [r4, #0]
10004794:	04db      	lsls	r3, r3, #19
10004796:	d5c0      	bpl.n	1000471a <__sflush_r+0x6a>
10004798:	6520      	str	r0, [r4, #80]	; 0x50
1000479a:	e7be      	b.n	1000471a <__sflush_r+0x6a>
1000479c:	683a      	ldr	r2, [r7, #0]
1000479e:	210c      	movs	r1, #12
100047a0:	5e63      	ldrsh	r3, [r4, r1]
100047a2:	2a00      	cmp	r2, #0
100047a4:	d0f3      	beq.n	1000478e <__sflush_r+0xde>
100047a6:	2a1d      	cmp	r2, #29
100047a8:	d001      	beq.n	100047ae <__sflush_r+0xfe>
100047aa:	2a16      	cmp	r2, #22
100047ac:	d10e      	bne.n	100047cc <__sflush_r+0x11c>
100047ae:	2300      	movs	r3, #0
100047b0:	6063      	str	r3, [r4, #4]
100047b2:	6923      	ldr	r3, [r4, #16]
100047b4:	6023      	str	r3, [r4, #0]
100047b6:	e7b0      	b.n	1000471a <__sflush_r+0x6a>
100047b8:	683b      	ldr	r3, [r7, #0]
100047ba:	2b00      	cmp	r3, #0
100047bc:	d100      	bne.n	100047c0 <__sflush_r+0x110>
100047be:	e793      	b.n	100046e8 <__sflush_r+0x38>
100047c0:	2b1d      	cmp	r3, #29
100047c2:	d001      	beq.n	100047c8 <__sflush_r+0x118>
100047c4:	2b16      	cmp	r3, #22
100047c6:	d1d4      	bne.n	10004772 <__sflush_r+0xc2>
100047c8:	603d      	str	r5, [r7, #0]
100047ca:	e7b3      	b.n	10004734 <__sflush_r+0x84>
100047cc:	2240      	movs	r2, #64	; 0x40
100047ce:	4313      	orrs	r3, r2
100047d0:	e7d3      	b.n	1000477a <__sflush_r+0xca>
100047d2:	46c0      	nop			; (mov r8, r8)

100047d4 <_fflush_r>:
100047d4:	b570      	push	{r4, r5, r6, lr}
100047d6:	0005      	movs	r5, r0
100047d8:	000c      	movs	r4, r1
100047da:	2800      	cmp	r0, #0
100047dc:	d002      	beq.n	100047e4 <_fflush_r+0x10>
100047de:	6b83      	ldr	r3, [r0, #56]	; 0x38
100047e0:	2b00      	cmp	r3, #0
100047e2:	d015      	beq.n	10004810 <_fflush_r+0x3c>
100047e4:	220c      	movs	r2, #12
100047e6:	5ea3      	ldrsh	r3, [r4, r2]
100047e8:	2b00      	cmp	r3, #0
100047ea:	d017      	beq.n	1000481c <_fflush_r+0x48>
100047ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
100047ee:	07d2      	lsls	r2, r2, #31
100047f0:	d401      	bmi.n	100047f6 <_fflush_r+0x22>
100047f2:	059b      	lsls	r3, r3, #22
100047f4:	d514      	bpl.n	10004820 <_fflush_r+0x4c>
100047f6:	0028      	movs	r0, r5
100047f8:	0021      	movs	r1, r4
100047fa:	f7ff ff59 	bl	100046b0 <__sflush_r>
100047fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
10004800:	0005      	movs	r5, r0
10004802:	07db      	lsls	r3, r3, #31
10004804:	d402      	bmi.n	1000480c <_fflush_r+0x38>
10004806:	89a3      	ldrh	r3, [r4, #12]
10004808:	059b      	lsls	r3, r3, #22
1000480a:	d515      	bpl.n	10004838 <_fflush_r+0x64>
1000480c:	0028      	movs	r0, r5
1000480e:	bd70      	pop	{r4, r5, r6, pc}
10004810:	f000 f81e 	bl	10004850 <__sinit>
10004814:	220c      	movs	r2, #12
10004816:	5ea3      	ldrsh	r3, [r4, r2]
10004818:	2b00      	cmp	r3, #0
1000481a:	d1e7      	bne.n	100047ec <_fflush_r+0x18>
1000481c:	2500      	movs	r5, #0
1000481e:	e7f5      	b.n	1000480c <_fflush_r+0x38>
10004820:	6da0      	ldr	r0, [r4, #88]	; 0x58
10004822:	f001 f9ab 	bl	10005b7c <__retarget_lock_acquire_recursive>
10004826:	0028      	movs	r0, r5
10004828:	0021      	movs	r1, r4
1000482a:	f7ff ff41 	bl	100046b0 <__sflush_r>
1000482e:	6e63      	ldr	r3, [r4, #100]	; 0x64
10004830:	0005      	movs	r5, r0
10004832:	07db      	lsls	r3, r3, #31
10004834:	d4ea      	bmi.n	1000480c <_fflush_r+0x38>
10004836:	e7e6      	b.n	10004806 <_fflush_r+0x32>
10004838:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000483a:	f001 f9a6 	bl	10005b8a <__retarget_lock_release_recursive>
1000483e:	e7e5      	b.n	1000480c <_fflush_r+0x38>

10004840 <_cleanup_r>:
10004840:	b510      	push	{r4, lr}
10004842:	4902      	ldr	r1, [pc, #8]	; (1000484c <_cleanup_r+0xc>)
10004844:	f000 fb5c 	bl	10004f00 <_fwalk_reent>
10004848:	bd10      	pop	{r4, pc}
1000484a:	46c0      	nop			; (mov r8, r8)
1000484c:	100047d5 	.word	0x100047d5

10004850 <__sinit>:
10004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004852:	46de      	mov	lr, fp
10004854:	4657      	mov	r7, sl
10004856:	464e      	mov	r6, r9
10004858:	4645      	mov	r5, r8
1000485a:	b5e0      	push	{r5, r6, r7, lr}
1000485c:	0006      	movs	r6, r0
1000485e:	4f3d      	ldr	r7, [pc, #244]	; (10004954 <__sinit+0x104>)
10004860:	0038      	movs	r0, r7
10004862:	f001 f98b 	bl	10005b7c <__retarget_lock_acquire_recursive>
10004866:	6bb4      	ldr	r4, [r6, #56]	; 0x38
10004868:	2c00      	cmp	r4, #0
1000486a:	d16a      	bne.n	10004942 <__sinit+0xf2>
1000486c:	4b3a      	ldr	r3, [pc, #232]	; (10004958 <__sinit+0x108>)
1000486e:	2203      	movs	r2, #3
10004870:	63f3      	str	r3, [r6, #60]	; 0x3c
10004872:	23a6      	movs	r3, #166	; 0xa6
10004874:	005b      	lsls	r3, r3, #1
10004876:	50f4      	str	r4, [r6, r3]
10004878:	3304      	adds	r3, #4
1000487a:	50f2      	str	r2, [r6, r3]
1000487c:	0032      	movs	r2, r6
1000487e:	6875      	ldr	r5, [r6, #4]
10004880:	3259      	adds	r2, #89	; 0x59
10004882:	0028      	movs	r0, r5
10004884:	32ff      	adds	r2, #255	; 0xff
10004886:	3304      	adds	r3, #4
10004888:	50f2      	str	r2, [r6, r3]
1000488a:	3b51      	subs	r3, #81	; 0x51
1000488c:	3bff      	subs	r3, #255	; 0xff
1000488e:	2208      	movs	r2, #8
10004890:	2100      	movs	r1, #0
10004892:	60eb      	str	r3, [r5, #12]
10004894:	602c      	str	r4, [r5, #0]
10004896:	606c      	str	r4, [r5, #4]
10004898:	60ac      	str	r4, [r5, #8]
1000489a:	666c      	str	r4, [r5, #100]	; 0x64
1000489c:	612c      	str	r4, [r5, #16]
1000489e:	616c      	str	r4, [r5, #20]
100048a0:	61ac      	str	r4, [r5, #24]
100048a2:	305c      	adds	r0, #92	; 0x5c
100048a4:	f7fe feea 	bl	1000367c <memset>
100048a8:	0028      	movs	r0, r5
100048aa:	4b2c      	ldr	r3, [pc, #176]	; (1000495c <__sinit+0x10c>)
100048ac:	61ed      	str	r5, [r5, #28]
100048ae:	469b      	mov	fp, r3
100048b0:	622b      	str	r3, [r5, #32]
100048b2:	4b2b      	ldr	r3, [pc, #172]	; (10004960 <__sinit+0x110>)
100048b4:	3058      	adds	r0, #88	; 0x58
100048b6:	469a      	mov	sl, r3
100048b8:	626b      	str	r3, [r5, #36]	; 0x24
100048ba:	4b2a      	ldr	r3, [pc, #168]	; (10004964 <__sinit+0x114>)
100048bc:	4699      	mov	r9, r3
100048be:	62ab      	str	r3, [r5, #40]	; 0x28
100048c0:	4b29      	ldr	r3, [pc, #164]	; (10004968 <__sinit+0x118>)
100048c2:	62eb      	str	r3, [r5, #44]	; 0x2c
100048c4:	4698      	mov	r8, r3
100048c6:	f001 f94c 	bl	10005b62 <__retarget_lock_init_recursive>
100048ca:	68b5      	ldr	r5, [r6, #8]
100048cc:	4b27      	ldr	r3, [pc, #156]	; (1000496c <__sinit+0x11c>)
100048ce:	0028      	movs	r0, r5
100048d0:	2208      	movs	r2, #8
100048d2:	2100      	movs	r1, #0
100048d4:	60eb      	str	r3, [r5, #12]
100048d6:	602c      	str	r4, [r5, #0]
100048d8:	606c      	str	r4, [r5, #4]
100048da:	60ac      	str	r4, [r5, #8]
100048dc:	666c      	str	r4, [r5, #100]	; 0x64
100048de:	612c      	str	r4, [r5, #16]
100048e0:	616c      	str	r4, [r5, #20]
100048e2:	61ac      	str	r4, [r5, #24]
100048e4:	305c      	adds	r0, #92	; 0x5c
100048e6:	f7fe fec9 	bl	1000367c <memset>
100048ea:	465b      	mov	r3, fp
100048ec:	622b      	str	r3, [r5, #32]
100048ee:	4653      	mov	r3, sl
100048f0:	626b      	str	r3, [r5, #36]	; 0x24
100048f2:	464b      	mov	r3, r9
100048f4:	0028      	movs	r0, r5
100048f6:	62ab      	str	r3, [r5, #40]	; 0x28
100048f8:	4643      	mov	r3, r8
100048fa:	61ed      	str	r5, [r5, #28]
100048fc:	62eb      	str	r3, [r5, #44]	; 0x2c
100048fe:	3058      	adds	r0, #88	; 0x58
10004900:	f001 f92f 	bl	10005b62 <__retarget_lock_init_recursive>
10004904:	68f5      	ldr	r5, [r6, #12]
10004906:	4b1a      	ldr	r3, [pc, #104]	; (10004970 <__sinit+0x120>)
10004908:	0028      	movs	r0, r5
1000490a:	2208      	movs	r2, #8
1000490c:	2100      	movs	r1, #0
1000490e:	60eb      	str	r3, [r5, #12]
10004910:	602c      	str	r4, [r5, #0]
10004912:	606c      	str	r4, [r5, #4]
10004914:	60ac      	str	r4, [r5, #8]
10004916:	666c      	str	r4, [r5, #100]	; 0x64
10004918:	612c      	str	r4, [r5, #16]
1000491a:	616c      	str	r4, [r5, #20]
1000491c:	61ac      	str	r4, [r5, #24]
1000491e:	305c      	adds	r0, #92	; 0x5c
10004920:	f7fe feac 	bl	1000367c <memset>
10004924:	465b      	mov	r3, fp
10004926:	622b      	str	r3, [r5, #32]
10004928:	4653      	mov	r3, sl
1000492a:	626b      	str	r3, [r5, #36]	; 0x24
1000492c:	464b      	mov	r3, r9
1000492e:	0028      	movs	r0, r5
10004930:	62ab      	str	r3, [r5, #40]	; 0x28
10004932:	4643      	mov	r3, r8
10004934:	61ed      	str	r5, [r5, #28]
10004936:	62eb      	str	r3, [r5, #44]	; 0x2c
10004938:	3058      	adds	r0, #88	; 0x58
1000493a:	f001 f912 	bl	10005b62 <__retarget_lock_init_recursive>
1000493e:	2301      	movs	r3, #1
10004940:	63b3      	str	r3, [r6, #56]	; 0x38
10004942:	0038      	movs	r0, r7
10004944:	f001 f921 	bl	10005b8a <__retarget_lock_release_recursive>
10004948:	bcf0      	pop	{r4, r5, r6, r7}
1000494a:	46bb      	mov	fp, r7
1000494c:	46b2      	mov	sl, r6
1000494e:	46a9      	mov	r9, r5
10004950:	46a0      	mov	r8, r4
10004952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10004954:	20000874 	.word	0x20000874
10004958:	10004841 	.word	0x10004841
1000495c:	10005511 	.word	0x10005511
10004960:	10005539 	.word	0x10005539
10004964:	10005579 	.word	0x10005579
10004968:	100055a9 	.word	0x100055a9
1000496c:	00010009 	.word	0x00010009
10004970:	00020012 	.word	0x00020012

10004974 <_malloc_trim_r>:
10004974:	b5f0      	push	{r4, r5, r6, r7, lr}
10004976:	46c6      	mov	lr, r8
10004978:	b500      	push	{lr}
1000497a:	4688      	mov	r8, r1
1000497c:	0005      	movs	r5, r0
1000497e:	f7fe fed1 	bl	10003724 <__malloc_lock>
10004982:	4f22      	ldr	r7, [pc, #136]	; (10004a0c <_malloc_trim_r+0x98>)
10004984:	68bb      	ldr	r3, [r7, #8]
10004986:	685e      	ldr	r6, [r3, #4]
10004988:	2303      	movs	r3, #3
1000498a:	439e      	bics	r6, r3
1000498c:	4b20      	ldr	r3, [pc, #128]	; (10004a10 <_malloc_trim_r+0x9c>)
1000498e:	18f4      	adds	r4, r6, r3
10004990:	4643      	mov	r3, r8
10004992:	1ae4      	subs	r4, r4, r3
10004994:	2380      	movs	r3, #128	; 0x80
10004996:	0b24      	lsrs	r4, r4, #12
10004998:	3c01      	subs	r4, #1
1000499a:	0324      	lsls	r4, r4, #12
1000499c:	015b      	lsls	r3, r3, #5
1000499e:	429c      	cmp	r4, r3
100049a0:	db07      	blt.n	100049b2 <_malloc_trim_r+0x3e>
100049a2:	2100      	movs	r1, #0
100049a4:	0028      	movs	r0, r5
100049a6:	f7fe fecd 	bl	10003744 <_sbrk_r>
100049aa:	68bb      	ldr	r3, [r7, #8]
100049ac:	199b      	adds	r3, r3, r6
100049ae:	4298      	cmp	r0, r3
100049b0:	d006      	beq.n	100049c0 <_malloc_trim_r+0x4c>
100049b2:	0028      	movs	r0, r5
100049b4:	f7fe febe 	bl	10003734 <__malloc_unlock>
100049b8:	2000      	movs	r0, #0
100049ba:	bc80      	pop	{r7}
100049bc:	46b8      	mov	r8, r7
100049be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100049c0:	0028      	movs	r0, r5
100049c2:	4261      	negs	r1, r4
100049c4:	f7fe febe 	bl	10003744 <_sbrk_r>
100049c8:	3001      	adds	r0, #1
100049ca:	d00d      	beq.n	100049e8 <_malloc_trim_r+0x74>
100049cc:	2201      	movs	r2, #1
100049ce:	1b36      	subs	r6, r6, r4
100049d0:	68bb      	ldr	r3, [r7, #8]
100049d2:	4316      	orrs	r6, r2
100049d4:	4a0f      	ldr	r2, [pc, #60]	; (10004a14 <_malloc_trim_r+0xa0>)
100049d6:	605e      	str	r6, [r3, #4]
100049d8:	6813      	ldr	r3, [r2, #0]
100049da:	0028      	movs	r0, r5
100049dc:	1b1b      	subs	r3, r3, r4
100049de:	6013      	str	r3, [r2, #0]
100049e0:	f7fe fea8 	bl	10003734 <__malloc_unlock>
100049e4:	2001      	movs	r0, #1
100049e6:	e7e8      	b.n	100049ba <_malloc_trim_r+0x46>
100049e8:	2100      	movs	r1, #0
100049ea:	0028      	movs	r0, r5
100049ec:	f7fe feaa 	bl	10003744 <_sbrk_r>
100049f0:	68ba      	ldr	r2, [r7, #8]
100049f2:	1a83      	subs	r3, r0, r2
100049f4:	2b0f      	cmp	r3, #15
100049f6:	dddc      	ble.n	100049b2 <_malloc_trim_r+0x3e>
100049f8:	4c07      	ldr	r4, [pc, #28]	; (10004a18 <_malloc_trim_r+0xa4>)
100049fa:	4906      	ldr	r1, [pc, #24]	; (10004a14 <_malloc_trim_r+0xa0>)
100049fc:	6824      	ldr	r4, [r4, #0]
100049fe:	1b00      	subs	r0, r0, r4
10004a00:	6008      	str	r0, [r1, #0]
10004a02:	2101      	movs	r1, #1
10004a04:	430b      	orrs	r3, r1
10004a06:	6053      	str	r3, [r2, #4]
10004a08:	e7d3      	b.n	100049b2 <_malloc_trim_r+0x3e>
10004a0a:	46c0      	nop			; (mov r8, r8)
10004a0c:	20000290 	.word	0x20000290
10004a10:	00000fef 	.word	0x00000fef
10004a14:	20000c28 	.word	0x20000c28
10004a18:	200006e0 	.word	0x200006e0

10004a1c <_free_r>:
10004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004a1e:	46ce      	mov	lr, r9
10004a20:	4647      	mov	r7, r8
10004a22:	0005      	movs	r5, r0
10004a24:	000c      	movs	r4, r1
10004a26:	b580      	push	{r7, lr}
10004a28:	2900      	cmp	r1, #0
10004a2a:	d057      	beq.n	10004adc <_free_r+0xc0>
10004a2c:	f7fe fe7a 	bl	10003724 <__malloc_lock>
10004a30:	2301      	movs	r3, #1
10004a32:	0021      	movs	r1, r4
10004a34:	469c      	mov	ip, r3
10004a36:	3908      	subs	r1, #8
10004a38:	6848      	ldr	r0, [r1, #4]
10004a3a:	4662      	mov	r2, ip
10004a3c:	0003      	movs	r3, r0
10004a3e:	2403      	movs	r4, #3
10004a40:	4393      	bics	r3, r2
10004a42:	18cf      	adds	r7, r1, r3
10004a44:	687a      	ldr	r2, [r7, #4]
10004a46:	4e65      	ldr	r6, [pc, #404]	; (10004bdc <_free_r+0x1c0>)
10004a48:	43a2      	bics	r2, r4
10004a4a:	68b4      	ldr	r4, [r6, #8]
10004a4c:	42bc      	cmp	r4, r7
10004a4e:	d100      	bne.n	10004a52 <_free_r+0x36>
10004a50:	e070      	b.n	10004b34 <_free_r+0x118>
10004a52:	18bc      	adds	r4, r7, r2
10004a54:	46a1      	mov	r9, r4
10004a56:	4664      	mov	r4, ip
10004a58:	607a      	str	r2, [r7, #4]
10004a5a:	4204      	tst	r4, r0
10004a5c:	d121      	bne.n	10004aa2 <_free_r+0x86>
10004a5e:	6808      	ldr	r0, [r1, #0]
10004a60:	1a09      	subs	r1, r1, r0
10004a62:	181b      	adds	r3, r3, r0
10004a64:	6888      	ldr	r0, [r1, #8]
10004a66:	4680      	mov	r8, r0
10004a68:	4648      	mov	r0, r9
10004a6a:	6840      	ldr	r0, [r0, #4]
10004a6c:	4020      	ands	r0, r4
10004a6e:	0034      	movs	r4, r6
10004a70:	3408      	adds	r4, #8
10004a72:	4681      	mov	r9, r0
10004a74:	45a0      	cmp	r8, r4
10004a76:	d051      	beq.n	10004b1c <_free_r+0x100>
10004a78:	4640      	mov	r0, r8
10004a7a:	68cc      	ldr	r4, [r1, #12]
10004a7c:	60c4      	str	r4, [r0, #12]
10004a7e:	60a0      	str	r0, [r4, #8]
10004a80:	4648      	mov	r0, r9
10004a82:	2800      	cmp	r0, #0
10004a84:	d111      	bne.n	10004aaa <_free_r+0x8e>
10004a86:	189b      	adds	r3, r3, r2
10004a88:	4855      	ldr	r0, [pc, #340]	; (10004be0 <_free_r+0x1c4>)
10004a8a:	68ba      	ldr	r2, [r7, #8]
10004a8c:	4282      	cmp	r2, r0
10004a8e:	d100      	bne.n	10004a92 <_free_r+0x76>
10004a90:	e07f      	b.n	10004b92 <_free_r+0x176>
10004a92:	68f8      	ldr	r0, [r7, #12]
10004a94:	60d0      	str	r0, [r2, #12]
10004a96:	6082      	str	r2, [r0, #8]
10004a98:	2201      	movs	r2, #1
10004a9a:	431a      	orrs	r2, r3
10004a9c:	604a      	str	r2, [r1, #4]
10004a9e:	50cb      	str	r3, [r1, r3]
10004aa0:	e007      	b.n	10004ab2 <_free_r+0x96>
10004aa2:	4648      	mov	r0, r9
10004aa4:	6840      	ldr	r0, [r0, #4]
10004aa6:	4220      	tst	r0, r4
10004aa8:	d0ed      	beq.n	10004a86 <_free_r+0x6a>
10004aaa:	4662      	mov	r2, ip
10004aac:	431a      	orrs	r2, r3
10004aae:	604a      	str	r2, [r1, #4]
10004ab0:	603b      	str	r3, [r7, #0]
10004ab2:	2280      	movs	r2, #128	; 0x80
10004ab4:	0092      	lsls	r2, r2, #2
10004ab6:	4293      	cmp	r3, r2
10004ab8:	d214      	bcs.n	10004ae4 <_free_r+0xc8>
10004aba:	08da      	lsrs	r2, r3, #3
10004abc:	0958      	lsrs	r0, r3, #5
10004abe:	2301      	movs	r3, #1
10004ac0:	4083      	lsls	r3, r0
10004ac2:	6870      	ldr	r0, [r6, #4]
10004ac4:	4303      	orrs	r3, r0
10004ac6:	6073      	str	r3, [r6, #4]
10004ac8:	00d3      	lsls	r3, r2, #3
10004aca:	199b      	adds	r3, r3, r6
10004acc:	689a      	ldr	r2, [r3, #8]
10004ace:	60cb      	str	r3, [r1, #12]
10004ad0:	608a      	str	r2, [r1, #8]
10004ad2:	6099      	str	r1, [r3, #8]
10004ad4:	60d1      	str	r1, [r2, #12]
10004ad6:	0028      	movs	r0, r5
10004ad8:	f7fe fe2c 	bl	10003734 <__malloc_unlock>
10004adc:	bcc0      	pop	{r6, r7}
10004ade:	46b9      	mov	r9, r7
10004ae0:	46b0      	mov	r8, r6
10004ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10004ae4:	0a5c      	lsrs	r4, r3, #9
10004ae6:	2c04      	cmp	r4, #4
10004ae8:	d83d      	bhi.n	10004b66 <_free_r+0x14a>
10004aea:	099c      	lsrs	r4, r3, #6
10004aec:	0020      	movs	r0, r4
10004aee:	3439      	adds	r4, #57	; 0x39
10004af0:	3038      	adds	r0, #56	; 0x38
10004af2:	00e4      	lsls	r4, r4, #3
10004af4:	1934      	adds	r4, r6, r4
10004af6:	6822      	ldr	r2, [r4, #0]
10004af8:	3c08      	subs	r4, #8
10004afa:	2703      	movs	r7, #3
10004afc:	4294      	cmp	r4, r2
10004afe:	d103      	bne.n	10004b08 <_free_r+0xec>
10004b00:	e040      	b.n	10004b84 <_free_r+0x168>
10004b02:	6892      	ldr	r2, [r2, #8]
10004b04:	4294      	cmp	r4, r2
10004b06:	d003      	beq.n	10004b10 <_free_r+0xf4>
10004b08:	6850      	ldr	r0, [r2, #4]
10004b0a:	43b8      	bics	r0, r7
10004b0c:	4298      	cmp	r0, r3
10004b0e:	d8f8      	bhi.n	10004b02 <_free_r+0xe6>
10004b10:	68d4      	ldr	r4, [r2, #12]
10004b12:	60cc      	str	r4, [r1, #12]
10004b14:	608a      	str	r2, [r1, #8]
10004b16:	60a1      	str	r1, [r4, #8]
10004b18:	60d1      	str	r1, [r2, #12]
10004b1a:	e7dc      	b.n	10004ad6 <_free_r+0xba>
10004b1c:	2800      	cmp	r0, #0
10004b1e:	d158      	bne.n	10004bd2 <_free_r+0x1b6>
10004b20:	68b8      	ldr	r0, [r7, #8]
10004b22:	18d2      	adds	r2, r2, r3
10004b24:	68fb      	ldr	r3, [r7, #12]
10004b26:	60c3      	str	r3, [r0, #12]
10004b28:	6098      	str	r0, [r3, #8]
10004b2a:	4663      	mov	r3, ip
10004b2c:	4313      	orrs	r3, r2
10004b2e:	604b      	str	r3, [r1, #4]
10004b30:	508a      	str	r2, [r1, r2]
10004b32:	e7d0      	b.n	10004ad6 <_free_r+0xba>
10004b34:	189a      	adds	r2, r3, r2
10004b36:	4663      	mov	r3, ip
10004b38:	4203      	tst	r3, r0
10004b3a:	d106      	bne.n	10004b4a <_free_r+0x12e>
10004b3c:	680b      	ldr	r3, [r1, #0]
10004b3e:	1ac9      	subs	r1, r1, r3
10004b40:	6888      	ldr	r0, [r1, #8]
10004b42:	18d2      	adds	r2, r2, r3
10004b44:	68cb      	ldr	r3, [r1, #12]
10004b46:	60c3      	str	r3, [r0, #12]
10004b48:	6098      	str	r0, [r3, #8]
10004b4a:	2301      	movs	r3, #1
10004b4c:	4313      	orrs	r3, r2
10004b4e:	604b      	str	r3, [r1, #4]
10004b50:	4b24      	ldr	r3, [pc, #144]	; (10004be4 <_free_r+0x1c8>)
10004b52:	60b1      	str	r1, [r6, #8]
10004b54:	681b      	ldr	r3, [r3, #0]
10004b56:	4293      	cmp	r3, r2
10004b58:	d8bd      	bhi.n	10004ad6 <_free_r+0xba>
10004b5a:	4b23      	ldr	r3, [pc, #140]	; (10004be8 <_free_r+0x1cc>)
10004b5c:	0028      	movs	r0, r5
10004b5e:	6819      	ldr	r1, [r3, #0]
10004b60:	f7ff ff08 	bl	10004974 <_malloc_trim_r>
10004b64:	e7b7      	b.n	10004ad6 <_free_r+0xba>
10004b66:	2c14      	cmp	r4, #20
10004b68:	d907      	bls.n	10004b7a <_free_r+0x15e>
10004b6a:	2c54      	cmp	r4, #84	; 0x54
10004b6c:	d81a      	bhi.n	10004ba4 <_free_r+0x188>
10004b6e:	0b1c      	lsrs	r4, r3, #12
10004b70:	0020      	movs	r0, r4
10004b72:	346f      	adds	r4, #111	; 0x6f
10004b74:	306e      	adds	r0, #110	; 0x6e
10004b76:	00e4      	lsls	r4, r4, #3
10004b78:	e7bc      	b.n	10004af4 <_free_r+0xd8>
10004b7a:	0020      	movs	r0, r4
10004b7c:	345c      	adds	r4, #92	; 0x5c
10004b7e:	305b      	adds	r0, #91	; 0x5b
10004b80:	00e4      	lsls	r4, r4, #3
10004b82:	e7b7      	b.n	10004af4 <_free_r+0xd8>
10004b84:	2301      	movs	r3, #1
10004b86:	1080      	asrs	r0, r0, #2
10004b88:	4083      	lsls	r3, r0
10004b8a:	6870      	ldr	r0, [r6, #4]
10004b8c:	4303      	orrs	r3, r0
10004b8e:	6073      	str	r3, [r6, #4]
10004b90:	e7bf      	b.n	10004b12 <_free_r+0xf6>
10004b92:	60d1      	str	r1, [r2, #12]
10004b94:	6091      	str	r1, [r2, #8]
10004b96:	60ca      	str	r2, [r1, #12]
10004b98:	608a      	str	r2, [r1, #8]
10004b9a:	2201      	movs	r2, #1
10004b9c:	431a      	orrs	r2, r3
10004b9e:	604a      	str	r2, [r1, #4]
10004ba0:	50cb      	str	r3, [r1, r3]
10004ba2:	e798      	b.n	10004ad6 <_free_r+0xba>
10004ba4:	22aa      	movs	r2, #170	; 0xaa
10004ba6:	0052      	lsls	r2, r2, #1
10004ba8:	4294      	cmp	r4, r2
10004baa:	d805      	bhi.n	10004bb8 <_free_r+0x19c>
10004bac:	0bdc      	lsrs	r4, r3, #15
10004bae:	0020      	movs	r0, r4
10004bb0:	3478      	adds	r4, #120	; 0x78
10004bb2:	3077      	adds	r0, #119	; 0x77
10004bb4:	00e4      	lsls	r4, r4, #3
10004bb6:	e79d      	b.n	10004af4 <_free_r+0xd8>
10004bb8:	4a0c      	ldr	r2, [pc, #48]	; (10004bec <_free_r+0x1d0>)
10004bba:	4294      	cmp	r4, r2
10004bbc:	d805      	bhi.n	10004bca <_free_r+0x1ae>
10004bbe:	0c9c      	lsrs	r4, r3, #18
10004bc0:	0020      	movs	r0, r4
10004bc2:	347d      	adds	r4, #125	; 0x7d
10004bc4:	307c      	adds	r0, #124	; 0x7c
10004bc6:	00e4      	lsls	r4, r4, #3
10004bc8:	e794      	b.n	10004af4 <_free_r+0xd8>
10004bca:	24fe      	movs	r4, #254	; 0xfe
10004bcc:	207e      	movs	r0, #126	; 0x7e
10004bce:	00a4      	lsls	r4, r4, #2
10004bd0:	e790      	b.n	10004af4 <_free_r+0xd8>
10004bd2:	4662      	mov	r2, ip
10004bd4:	431a      	orrs	r2, r3
10004bd6:	604a      	str	r2, [r1, #4]
10004bd8:	603b      	str	r3, [r7, #0]
10004bda:	e77c      	b.n	10004ad6 <_free_r+0xba>
10004bdc:	20000290 	.word	0x20000290
10004be0:	20000298 	.word	0x20000298
10004be4:	200006e4 	.word	0x200006e4
10004be8:	20000c58 	.word	0x20000c58
10004bec:	00000554 	.word	0x00000554

10004bf0 <__sfvwrite_r>:
10004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10004bf2:	464e      	mov	r6, r9
10004bf4:	46de      	mov	lr, fp
10004bf6:	4657      	mov	r7, sl
10004bf8:	4645      	mov	r5, r8
10004bfa:	b5e0      	push	{r5, r6, r7, lr}
10004bfc:	6893      	ldr	r3, [r2, #8]
10004bfe:	b083      	sub	sp, #12
10004c00:	000c      	movs	r4, r1
10004c02:	4691      	mov	r9, r2
10004c04:	9000      	str	r0, [sp, #0]
10004c06:	2b00      	cmp	r3, #0
10004c08:	d05f      	beq.n	10004cca <__sfvwrite_r+0xda>
10004c0a:	230c      	movs	r3, #12
10004c0c:	5eca      	ldrsh	r2, [r1, r3]
10004c0e:	0713      	lsls	r3, r2, #28
10004c10:	d563      	bpl.n	10004cda <__sfvwrite_r+0xea>
10004c12:	690b      	ldr	r3, [r1, #16]
10004c14:	2b00      	cmp	r3, #0
10004c16:	d060      	beq.n	10004cda <__sfvwrite_r+0xea>
10004c18:	464b      	mov	r3, r9
10004c1a:	681f      	ldr	r7, [r3, #0]
10004c1c:	0793      	lsls	r3, r2, #30
10004c1e:	d523      	bpl.n	10004c68 <__sfvwrite_r+0x78>
10004c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
10004c22:	2600      	movs	r6, #0
10004c24:	469a      	mov	sl, r3
10004c26:	4bb3      	ldr	r3, [pc, #716]	; (10004ef4 <__sfvwrite_r+0x304>)
10004c28:	2500      	movs	r5, #0
10004c2a:	4698      	mov	r8, r3
10004c2c:	69e1      	ldr	r1, [r4, #28]
10004c2e:	2d00      	cmp	r5, #0
10004c30:	d016      	beq.n	10004c60 <__sfvwrite_r+0x70>
10004c32:	002b      	movs	r3, r5
10004c34:	4545      	cmp	r5, r8
10004c36:	d900      	bls.n	10004c3a <__sfvwrite_r+0x4a>
10004c38:	4bae      	ldr	r3, [pc, #696]	; (10004ef4 <__sfvwrite_r+0x304>)
10004c3a:	0032      	movs	r2, r6
10004c3c:	9800      	ldr	r0, [sp, #0]
10004c3e:	47d0      	blx	sl
10004c40:	2800      	cmp	r0, #0
10004c42:	dd59      	ble.n	10004cf8 <__sfvwrite_r+0x108>
10004c44:	464b      	mov	r3, r9
10004c46:	464a      	mov	r2, r9
10004c48:	689b      	ldr	r3, [r3, #8]
10004c4a:	1836      	adds	r6, r6, r0
10004c4c:	1a1b      	subs	r3, r3, r0
10004c4e:	1a2d      	subs	r5, r5, r0
10004c50:	6093      	str	r3, [r2, #8]
10004c52:	2b00      	cmp	r3, #0
10004c54:	d039      	beq.n	10004cca <__sfvwrite_r+0xda>
10004c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
10004c58:	69e1      	ldr	r1, [r4, #28]
10004c5a:	469a      	mov	sl, r3
10004c5c:	2d00      	cmp	r5, #0
10004c5e:	d1e8      	bne.n	10004c32 <__sfvwrite_r+0x42>
10004c60:	683e      	ldr	r6, [r7, #0]
10004c62:	687d      	ldr	r5, [r7, #4]
10004c64:	3708      	adds	r7, #8
10004c66:	e7e2      	b.n	10004c2e <__sfvwrite_r+0x3e>
10004c68:	07d3      	lsls	r3, r2, #31
10004c6a:	d562      	bpl.n	10004d32 <__sfvwrite_r+0x142>
10004c6c:	2300      	movs	r3, #0
10004c6e:	46b8      	mov	r8, r7
10004c70:	2000      	movs	r0, #0
10004c72:	469a      	mov	sl, r3
10004c74:	2600      	movs	r6, #0
10004c76:	001f      	movs	r7, r3
10004c78:	2e00      	cmp	r6, #0
10004c7a:	d045      	beq.n	10004d08 <__sfvwrite_r+0x118>
10004c7c:	2800      	cmp	r0, #0
10004c7e:	d04c      	beq.n	10004d1a <__sfvwrite_r+0x12a>
10004c80:	003b      	movs	r3, r7
10004c82:	46b3      	mov	fp, r6
10004c84:	429e      	cmp	r6, r3
10004c86:	d900      	bls.n	10004c8a <__sfvwrite_r+0x9a>
10004c88:	469b      	mov	fp, r3
10004c8a:	6820      	ldr	r0, [r4, #0]
10004c8c:	6922      	ldr	r2, [r4, #16]
10004c8e:	68a5      	ldr	r5, [r4, #8]
10004c90:	6963      	ldr	r3, [r4, #20]
10004c92:	4290      	cmp	r0, r2
10004c94:	d903      	bls.n	10004c9e <__sfvwrite_r+0xae>
10004c96:	18ed      	adds	r5, r5, r3
10004c98:	45ab      	cmp	fp, r5
10004c9a:	dd00      	ble.n	10004c9e <__sfvwrite_r+0xae>
10004c9c:	e0fe      	b.n	10004e9c <__sfvwrite_r+0x2ac>
10004c9e:	455b      	cmp	r3, fp
10004ca0:	dd00      	ble.n	10004ca4 <__sfvwrite_r+0xb4>
10004ca2:	e0ee      	b.n	10004e82 <__sfvwrite_r+0x292>
10004ca4:	6a65      	ldr	r5, [r4, #36]	; 0x24
10004ca6:	4652      	mov	r2, sl
10004ca8:	69e1      	ldr	r1, [r4, #28]
10004caa:	9800      	ldr	r0, [sp, #0]
10004cac:	47a8      	blx	r5
10004cae:	1e05      	subs	r5, r0, #0
10004cb0:	dd22      	ble.n	10004cf8 <__sfvwrite_r+0x108>
10004cb2:	2001      	movs	r0, #1
10004cb4:	1b7f      	subs	r7, r7, r5
10004cb6:	d019      	beq.n	10004cec <__sfvwrite_r+0xfc>
10004cb8:	464b      	mov	r3, r9
10004cba:	464a      	mov	r2, r9
10004cbc:	689b      	ldr	r3, [r3, #8]
10004cbe:	44aa      	add	sl, r5
10004cc0:	1b5b      	subs	r3, r3, r5
10004cc2:	1b76      	subs	r6, r6, r5
10004cc4:	6093      	str	r3, [r2, #8]
10004cc6:	2b00      	cmp	r3, #0
10004cc8:	d1d6      	bne.n	10004c78 <__sfvwrite_r+0x88>
10004cca:	2000      	movs	r0, #0
10004ccc:	b003      	add	sp, #12
10004cce:	bcf0      	pop	{r4, r5, r6, r7}
10004cd0:	46bb      	mov	fp, r7
10004cd2:	46b2      	mov	sl, r6
10004cd4:	46a9      	mov	r9, r5
10004cd6:	46a0      	mov	r8, r4
10004cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004cda:	0021      	movs	r1, r4
10004cdc:	9800      	ldr	r0, [sp, #0]
10004cde:	f7ff fc77 	bl	100045d0 <__swsetup_r>
10004ce2:	2800      	cmp	r0, #0
10004ce4:	d10d      	bne.n	10004d02 <__sfvwrite_r+0x112>
10004ce6:	230c      	movs	r3, #12
10004ce8:	5ee2      	ldrsh	r2, [r4, r3]
10004cea:	e795      	b.n	10004c18 <__sfvwrite_r+0x28>
10004cec:	0021      	movs	r1, r4
10004cee:	9800      	ldr	r0, [sp, #0]
10004cf0:	f7ff fd70 	bl	100047d4 <_fflush_r>
10004cf4:	2800      	cmp	r0, #0
10004cf6:	d0df      	beq.n	10004cb8 <__sfvwrite_r+0xc8>
10004cf8:	220c      	movs	r2, #12
10004cfa:	5ea3      	ldrsh	r3, [r4, r2]
10004cfc:	2240      	movs	r2, #64	; 0x40
10004cfe:	4313      	orrs	r3, r2
10004d00:	81a3      	strh	r3, [r4, #12]
10004d02:	2001      	movs	r0, #1
10004d04:	4240      	negs	r0, r0
10004d06:	e7e1      	b.n	10004ccc <__sfvwrite_r+0xdc>
10004d08:	2208      	movs	r2, #8
10004d0a:	4643      	mov	r3, r8
10004d0c:	4694      	mov	ip, r2
10004d0e:	685e      	ldr	r6, [r3, #4]
10004d10:	44e0      	add	r8, ip
10004d12:	2e00      	cmp	r6, #0
10004d14:	d0f8      	beq.n	10004d08 <__sfvwrite_r+0x118>
10004d16:	681b      	ldr	r3, [r3, #0]
10004d18:	469a      	mov	sl, r3
10004d1a:	0032      	movs	r2, r6
10004d1c:	210a      	movs	r1, #10
10004d1e:	4650      	mov	r0, sl
10004d20:	f000 f976 	bl	10005010 <memchr>
10004d24:	2800      	cmp	r0, #0
10004d26:	d100      	bne.n	10004d2a <__sfvwrite_r+0x13a>
10004d28:	e0db      	b.n	10004ee2 <__sfvwrite_r+0x2f2>
10004d2a:	4653      	mov	r3, sl
10004d2c:	3001      	adds	r0, #1
10004d2e:	1ac7      	subs	r7, r0, r3
10004d30:	e7a6      	b.n	10004c80 <__sfvwrite_r+0x90>
10004d32:	2300      	movs	r3, #0
10004d34:	2180      	movs	r1, #128	; 0x80
10004d36:	469a      	mov	sl, r3
10004d38:	0089      	lsls	r1, r1, #2
10004d3a:	468b      	mov	fp, r1
10004d3c:	4656      	mov	r6, sl
10004d3e:	4655      	mov	r5, sl
10004d40:	6820      	ldr	r0, [r4, #0]
10004d42:	68a3      	ldr	r3, [r4, #8]
10004d44:	4684      	mov	ip, r0
10004d46:	4698      	mov	r8, r3
10004d48:	2d00      	cmp	r5, #0
10004d4a:	d05c      	beq.n	10004e06 <__sfvwrite_r+0x216>
10004d4c:	4659      	mov	r1, fp
10004d4e:	420a      	tst	r2, r1
10004d50:	d05d      	beq.n	10004e0e <__sfvwrite_r+0x21e>
10004d52:	469a      	mov	sl, r3
10004d54:	42ab      	cmp	r3, r5
10004d56:	d900      	bls.n	10004d5a <__sfvwrite_r+0x16a>
10004d58:	e090      	b.n	10004e7c <__sfvwrite_r+0x28c>
10004d5a:	2390      	movs	r3, #144	; 0x90
10004d5c:	00db      	lsls	r3, r3, #3
10004d5e:	421a      	tst	r2, r3
10004d60:	d032      	beq.n	10004dc8 <__sfvwrite_r+0x1d8>
10004d62:	6921      	ldr	r1, [r4, #16]
10004d64:	1a43      	subs	r3, r0, r1
10004d66:	6960      	ldr	r0, [r4, #20]
10004d68:	9301      	str	r3, [sp, #4]
10004d6a:	0043      	lsls	r3, r0, #1
10004d6c:	181b      	adds	r3, r3, r0
10004d6e:	0fd8      	lsrs	r0, r3, #31
10004d70:	18c3      	adds	r3, r0, r3
10004d72:	1058      	asrs	r0, r3, #1
10004d74:	9b01      	ldr	r3, [sp, #4]
10004d76:	4682      	mov	sl, r0
10004d78:	3301      	adds	r3, #1
10004d7a:	195b      	adds	r3, r3, r5
10004d7c:	4283      	cmp	r3, r0
10004d7e:	d901      	bls.n	10004d84 <__sfvwrite_r+0x194>
10004d80:	469a      	mov	sl, r3
10004d82:	0018      	movs	r0, r3
10004d84:	0552      	lsls	r2, r2, #21
10004d86:	d400      	bmi.n	10004d8a <__sfvwrite_r+0x19a>
10004d88:	e097      	b.n	10004eba <__sfvwrite_r+0x2ca>
10004d8a:	0001      	movs	r1, r0
10004d8c:	9800      	ldr	r0, [sp, #0]
10004d8e:	f7fe f989 	bl	100030a4 <_malloc_r>
10004d92:	4680      	mov	r8, r0
10004d94:	1e03      	subs	r3, r0, #0
10004d96:	d100      	bne.n	10004d9a <__sfvwrite_r+0x1aa>
10004d98:	e0a6      	b.n	10004ee8 <__sfvwrite_r+0x2f8>
10004d9a:	9a01      	ldr	r2, [sp, #4]
10004d9c:	6921      	ldr	r1, [r4, #16]
10004d9e:	f7fe fc25 	bl	100035ec <memcpy>
10004da2:	89a3      	ldrh	r3, [r4, #12]
10004da4:	4a54      	ldr	r2, [pc, #336]	; (10004ef8 <__sfvwrite_r+0x308>)
10004da6:	4013      	ands	r3, r2
10004da8:	2280      	movs	r2, #128	; 0x80
10004daa:	4313      	orrs	r3, r2
10004dac:	81a3      	strh	r3, [r4, #12]
10004dae:	4643      	mov	r3, r8
10004db0:	6123      	str	r3, [r4, #16]
10004db2:	9b01      	ldr	r3, [sp, #4]
10004db4:	001a      	movs	r2, r3
10004db6:	4442      	add	r2, r8
10004db8:	4694      	mov	ip, r2
10004dba:	6022      	str	r2, [r4, #0]
10004dbc:	4652      	mov	r2, sl
10004dbe:	46a8      	mov	r8, r5
10004dc0:	46aa      	mov	sl, r5
10004dc2:	1ad3      	subs	r3, r2, r3
10004dc4:	6162      	str	r2, [r4, #20]
10004dc6:	60a3      	str	r3, [r4, #8]
10004dc8:	4652      	mov	r2, sl
10004dca:	0031      	movs	r1, r6
10004dcc:	4660      	mov	r0, ip
10004dce:	f000 f959 	bl	10005084 <memmove>
10004dd2:	4642      	mov	r2, r8
10004dd4:	46a8      	mov	r8, r5
10004dd6:	2500      	movs	r5, #0
10004dd8:	68a3      	ldr	r3, [r4, #8]
10004dda:	6820      	ldr	r0, [r4, #0]
10004ddc:	1a9b      	subs	r3, r3, r2
10004dde:	4450      	add	r0, sl
10004de0:	60a3      	str	r3, [r4, #8]
10004de2:	6020      	str	r0, [r4, #0]
10004de4:	464b      	mov	r3, r9
10004de6:	4642      	mov	r2, r8
10004de8:	689b      	ldr	r3, [r3, #8]
10004dea:	4446      	add	r6, r8
10004dec:	1a9b      	subs	r3, r3, r2
10004dee:	464a      	mov	r2, r9
10004df0:	6093      	str	r3, [r2, #8]
10004df2:	d100      	bne.n	10004df6 <__sfvwrite_r+0x206>
10004df4:	e769      	b.n	10004cca <__sfvwrite_r+0xda>
10004df6:	230c      	movs	r3, #12
10004df8:	5ee2      	ldrsh	r2, [r4, r3]
10004dfa:	6820      	ldr	r0, [r4, #0]
10004dfc:	68a3      	ldr	r3, [r4, #8]
10004dfe:	4684      	mov	ip, r0
10004e00:	4698      	mov	r8, r3
10004e02:	2d00      	cmp	r5, #0
10004e04:	d1a2      	bne.n	10004d4c <__sfvwrite_r+0x15c>
10004e06:	683e      	ldr	r6, [r7, #0]
10004e08:	687d      	ldr	r5, [r7, #4]
10004e0a:	3708      	adds	r7, #8
10004e0c:	e79a      	b.n	10004d44 <__sfvwrite_r+0x154>
10004e0e:	6922      	ldr	r2, [r4, #16]
10004e10:	4282      	cmp	r2, r0
10004e12:	d31b      	bcc.n	10004e4c <__sfvwrite_r+0x25c>
10004e14:	6962      	ldr	r2, [r4, #20]
10004e16:	4690      	mov	r8, r2
10004e18:	42aa      	cmp	r2, r5
10004e1a:	d817      	bhi.n	10004e4c <__sfvwrite_r+0x25c>
10004e1c:	2380      	movs	r3, #128	; 0x80
10004e1e:	0028      	movs	r0, r5
10004e20:	061b      	lsls	r3, r3, #24
10004e22:	429d      	cmp	r5, r3
10004e24:	d300      	bcc.n	10004e28 <__sfvwrite_r+0x238>
10004e26:	4835      	ldr	r0, [pc, #212]	; (10004efc <__sfvwrite_r+0x30c>)
10004e28:	4641      	mov	r1, r8
10004e2a:	f7fb fa03 	bl	10000234 <__divsi3>
10004e2e:	4643      	mov	r3, r8
10004e30:	6a62      	ldr	r2, [r4, #36]	; 0x24
10004e32:	4343      	muls	r3, r0
10004e34:	4690      	mov	r8, r2
10004e36:	69e1      	ldr	r1, [r4, #28]
10004e38:	0032      	movs	r2, r6
10004e3a:	9800      	ldr	r0, [sp, #0]
10004e3c:	47c0      	blx	r8
10004e3e:	2800      	cmp	r0, #0
10004e40:	dc00      	bgt.n	10004e44 <__sfvwrite_r+0x254>
10004e42:	e759      	b.n	10004cf8 <__sfvwrite_r+0x108>
10004e44:	4680      	mov	r8, r0
10004e46:	4643      	mov	r3, r8
10004e48:	1aed      	subs	r5, r5, r3
10004e4a:	e7cb      	b.n	10004de4 <__sfvwrite_r+0x1f4>
10004e4c:	4698      	mov	r8, r3
10004e4e:	42ab      	cmp	r3, r5
10004e50:	d900      	bls.n	10004e54 <__sfvwrite_r+0x264>
10004e52:	46a8      	mov	r8, r5
10004e54:	4642      	mov	r2, r8
10004e56:	0031      	movs	r1, r6
10004e58:	f000 f914 	bl	10005084 <memmove>
10004e5c:	4642      	mov	r2, r8
10004e5e:	68a3      	ldr	r3, [r4, #8]
10004e60:	6820      	ldr	r0, [r4, #0]
10004e62:	1a9b      	subs	r3, r3, r2
10004e64:	4440      	add	r0, r8
10004e66:	60a3      	str	r3, [r4, #8]
10004e68:	6020      	str	r0, [r4, #0]
10004e6a:	2b00      	cmp	r3, #0
10004e6c:	d1eb      	bne.n	10004e46 <__sfvwrite_r+0x256>
10004e6e:	0021      	movs	r1, r4
10004e70:	9800      	ldr	r0, [sp, #0]
10004e72:	f7ff fcaf 	bl	100047d4 <_fflush_r>
10004e76:	2800      	cmp	r0, #0
10004e78:	d0e5      	beq.n	10004e46 <__sfvwrite_r+0x256>
10004e7a:	e73d      	b.n	10004cf8 <__sfvwrite_r+0x108>
10004e7c:	46a8      	mov	r8, r5
10004e7e:	46aa      	mov	sl, r5
10004e80:	e7a2      	b.n	10004dc8 <__sfvwrite_r+0x1d8>
10004e82:	465a      	mov	r2, fp
10004e84:	4651      	mov	r1, sl
10004e86:	f000 f8fd 	bl	10005084 <memmove>
10004e8a:	465a      	mov	r2, fp
10004e8c:	68a3      	ldr	r3, [r4, #8]
10004e8e:	465d      	mov	r5, fp
10004e90:	1a9b      	subs	r3, r3, r2
10004e92:	60a3      	str	r3, [r4, #8]
10004e94:	6823      	ldr	r3, [r4, #0]
10004e96:	445b      	add	r3, fp
10004e98:	6023      	str	r3, [r4, #0]
10004e9a:	e70a      	b.n	10004cb2 <__sfvwrite_r+0xc2>
10004e9c:	4651      	mov	r1, sl
10004e9e:	002a      	movs	r2, r5
10004ea0:	f000 f8f0 	bl	10005084 <memmove>
10004ea4:	6823      	ldr	r3, [r4, #0]
10004ea6:	0021      	movs	r1, r4
10004ea8:	195b      	adds	r3, r3, r5
10004eaa:	9800      	ldr	r0, [sp, #0]
10004eac:	6023      	str	r3, [r4, #0]
10004eae:	f7ff fc91 	bl	100047d4 <_fflush_r>
10004eb2:	2800      	cmp	r0, #0
10004eb4:	d100      	bne.n	10004eb8 <__sfvwrite_r+0x2c8>
10004eb6:	e6fc      	b.n	10004cb2 <__sfvwrite_r+0xc2>
10004eb8:	e71e      	b.n	10004cf8 <__sfvwrite_r+0x108>
10004eba:	0002      	movs	r2, r0
10004ebc:	9800      	ldr	r0, [sp, #0]
10004ebe:	f000 f939 	bl	10005134 <_realloc_r>
10004ec2:	4680      	mov	r8, r0
10004ec4:	2800      	cmp	r0, #0
10004ec6:	d000      	beq.n	10004eca <__sfvwrite_r+0x2da>
10004ec8:	e771      	b.n	10004dae <__sfvwrite_r+0x1be>
10004eca:	9d00      	ldr	r5, [sp, #0]
10004ecc:	6921      	ldr	r1, [r4, #16]
10004ece:	0028      	movs	r0, r5
10004ed0:	f7ff fda4 	bl	10004a1c <_free_r>
10004ed4:	2280      	movs	r2, #128	; 0x80
10004ed6:	89a3      	ldrh	r3, [r4, #12]
10004ed8:	4393      	bics	r3, r2
10004eda:	3a74      	subs	r2, #116	; 0x74
10004edc:	b21b      	sxth	r3, r3
10004ede:	602a      	str	r2, [r5, #0]
10004ee0:	e70c      	b.n	10004cfc <__sfvwrite_r+0x10c>
10004ee2:	1c73      	adds	r3, r6, #1
10004ee4:	001f      	movs	r7, r3
10004ee6:	e6cc      	b.n	10004c82 <__sfvwrite_r+0x92>
10004ee8:	9a00      	ldr	r2, [sp, #0]
10004eea:	330c      	adds	r3, #12
10004eec:	6013      	str	r3, [r2, #0]
10004eee:	220c      	movs	r2, #12
10004ef0:	5ea3      	ldrsh	r3, [r4, r2]
10004ef2:	e703      	b.n	10004cfc <__sfvwrite_r+0x10c>
10004ef4:	7ffffc00 	.word	0x7ffffc00
10004ef8:	fffffb7f 	.word	0xfffffb7f
10004efc:	7fffffff 	.word	0x7fffffff

10004f00 <_fwalk_reent>:
10004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004f02:	4647      	mov	r7, r8
10004f04:	46ce      	mov	lr, r9
10004f06:	b580      	push	{r7, lr}
10004f08:	0007      	movs	r7, r0
10004f0a:	4680      	mov	r8, r0
10004f0c:	4689      	mov	r9, r1
10004f0e:	2600      	movs	r6, #0
10004f10:	374d      	adds	r7, #77	; 0x4d
10004f12:	37ff      	adds	r7, #255	; 0xff
10004f14:	687d      	ldr	r5, [r7, #4]
10004f16:	68bc      	ldr	r4, [r7, #8]
10004f18:	3d01      	subs	r5, #1
10004f1a:	d40d      	bmi.n	10004f38 <_fwalk_reent+0x38>
10004f1c:	89a3      	ldrh	r3, [r4, #12]
10004f1e:	2b01      	cmp	r3, #1
10004f20:	d907      	bls.n	10004f32 <_fwalk_reent+0x32>
10004f22:	220e      	movs	r2, #14
10004f24:	5ea3      	ldrsh	r3, [r4, r2]
10004f26:	3301      	adds	r3, #1
10004f28:	d003      	beq.n	10004f32 <_fwalk_reent+0x32>
10004f2a:	0021      	movs	r1, r4
10004f2c:	4640      	mov	r0, r8
10004f2e:	47c8      	blx	r9
10004f30:	4306      	orrs	r6, r0
10004f32:	3468      	adds	r4, #104	; 0x68
10004f34:	3d01      	subs	r5, #1
10004f36:	d2f1      	bcs.n	10004f1c <_fwalk_reent+0x1c>
10004f38:	683f      	ldr	r7, [r7, #0]
10004f3a:	2f00      	cmp	r7, #0
10004f3c:	d1ea      	bne.n	10004f14 <_fwalk_reent+0x14>
10004f3e:	0030      	movs	r0, r6
10004f40:	bcc0      	pop	{r6, r7}
10004f42:	46b9      	mov	r9, r7
10004f44:	46b0      	mov	r8, r6
10004f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10004f48 <_localeconv_r>:
10004f48:	4800      	ldr	r0, [pc, #0]	; (10004f4c <_localeconv_r+0x4>)
10004f4a:	4770      	bx	lr
10004f4c:	200007d8 	.word	0x200007d8

10004f50 <__smakebuf_r>:
10004f50:	b5f0      	push	{r4, r5, r6, r7, lr}
10004f52:	220c      	movs	r2, #12
10004f54:	5e8b      	ldrsh	r3, [r1, r2]
10004f56:	0006      	movs	r6, r0
10004f58:	000c      	movs	r4, r1
10004f5a:	b097      	sub	sp, #92	; 0x5c
10004f5c:	079a      	lsls	r2, r3, #30
10004f5e:	d507      	bpl.n	10004f70 <__smakebuf_r+0x20>
10004f60:	0023      	movs	r3, r4
10004f62:	3343      	adds	r3, #67	; 0x43
10004f64:	6023      	str	r3, [r4, #0]
10004f66:	6123      	str	r3, [r4, #16]
10004f68:	2301      	movs	r3, #1
10004f6a:	6163      	str	r3, [r4, #20]
10004f6c:	b017      	add	sp, #92	; 0x5c
10004f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004f70:	220e      	movs	r2, #14
10004f72:	5e89      	ldrsh	r1, [r1, r2]
10004f74:	2900      	cmp	r1, #0
10004f76:	db30      	blt.n	10004fda <__smakebuf_r+0x8a>
10004f78:	466a      	mov	r2, sp
10004f7a:	f000 fb71 	bl	10005660 <_fstat_r>
10004f7e:	2800      	cmp	r0, #0
10004f80:	db29      	blt.n	10004fd6 <__smakebuf_r+0x86>
10004f82:	23f0      	movs	r3, #240	; 0xf0
10004f84:	9d01      	ldr	r5, [sp, #4]
10004f86:	021b      	lsls	r3, r3, #8
10004f88:	401d      	ands	r5, r3
10004f8a:	4b1f      	ldr	r3, [pc, #124]	; (10005008 <__smakebuf_r+0xb8>)
10004f8c:	2780      	movs	r7, #128	; 0x80
10004f8e:	469c      	mov	ip, r3
10004f90:	4465      	add	r5, ip
10004f92:	426b      	negs	r3, r5
10004f94:	415d      	adcs	r5, r3
10004f96:	00ff      	lsls	r7, r7, #3
10004f98:	0039      	movs	r1, r7
10004f9a:	0030      	movs	r0, r6
10004f9c:	f7fe f882 	bl	100030a4 <_malloc_r>
10004fa0:	2800      	cmp	r0, #0
10004fa2:	d026      	beq.n	10004ff2 <__smakebuf_r+0xa2>
10004fa4:	2180      	movs	r1, #128	; 0x80
10004fa6:	4a19      	ldr	r2, [pc, #100]	; (1000500c <__smakebuf_r+0xbc>)
10004fa8:	63f2      	str	r2, [r6, #60]	; 0x3c
10004faa:	89a2      	ldrh	r2, [r4, #12]
10004fac:	6020      	str	r0, [r4, #0]
10004fae:	430a      	orrs	r2, r1
10004fb0:	81a2      	strh	r2, [r4, #12]
10004fb2:	6120      	str	r0, [r4, #16]
10004fb4:	6167      	str	r7, [r4, #20]
10004fb6:	2d00      	cmp	r5, #0
10004fb8:	d0d8      	beq.n	10004f6c <__smakebuf_r+0x1c>
10004fba:	0030      	movs	r0, r6
10004fbc:	230e      	movs	r3, #14
10004fbe:	5ee1      	ldrsh	r1, [r4, r3]
10004fc0:	f000 fb62 	bl	10005688 <_isatty_r>
10004fc4:	2800      	cmp	r0, #0
10004fc6:	d0d1      	beq.n	10004f6c <__smakebuf_r+0x1c>
10004fc8:	2203      	movs	r2, #3
10004fca:	89a3      	ldrh	r3, [r4, #12]
10004fcc:	4393      	bics	r3, r2
10004fce:	2201      	movs	r2, #1
10004fd0:	4313      	orrs	r3, r2
10004fd2:	81a3      	strh	r3, [r4, #12]
10004fd4:	e7ca      	b.n	10004f6c <__smakebuf_r+0x1c>
10004fd6:	220c      	movs	r2, #12
10004fd8:	5ea3      	ldrsh	r3, [r4, r2]
10004fda:	2500      	movs	r5, #0
10004fdc:	2740      	movs	r7, #64	; 0x40
10004fde:	061b      	lsls	r3, r3, #24
10004fe0:	d4da      	bmi.n	10004f98 <__smakebuf_r+0x48>
10004fe2:	2780      	movs	r7, #128	; 0x80
10004fe4:	00ff      	lsls	r7, r7, #3
10004fe6:	0039      	movs	r1, r7
10004fe8:	0030      	movs	r0, r6
10004fea:	f7fe f85b 	bl	100030a4 <_malloc_r>
10004fee:	2800      	cmp	r0, #0
10004ff0:	d1d8      	bne.n	10004fa4 <__smakebuf_r+0x54>
10004ff2:	220c      	movs	r2, #12
10004ff4:	5ea3      	ldrsh	r3, [r4, r2]
10004ff6:	059a      	lsls	r2, r3, #22
10004ff8:	d4b8      	bmi.n	10004f6c <__smakebuf_r+0x1c>
10004ffa:	2203      	movs	r2, #3
10004ffc:	4393      	bics	r3, r2
10004ffe:	2202      	movs	r2, #2
10005000:	4313      	orrs	r3, r2
10005002:	81a3      	strh	r3, [r4, #12]
10005004:	e7ac      	b.n	10004f60 <__smakebuf_r+0x10>
10005006:	46c0      	nop			; (mov r8, r8)
10005008:	ffffe000 	.word	0xffffe000
1000500c:	10004841 	.word	0x10004841

10005010 <memchr>:
10005010:	b570      	push	{r4, r5, r6, lr}
10005012:	b2cc      	uxtb	r4, r1
10005014:	0783      	lsls	r3, r0, #30
10005016:	d00f      	beq.n	10005038 <memchr+0x28>
10005018:	1e53      	subs	r3, r2, #1
1000501a:	2a00      	cmp	r2, #0
1000501c:	d00a      	beq.n	10005034 <memchr+0x24>
1000501e:	2503      	movs	r5, #3
10005020:	e004      	b.n	1000502c <memchr+0x1c>
10005022:	3001      	adds	r0, #1
10005024:	4228      	tst	r0, r5
10005026:	d008      	beq.n	1000503a <memchr+0x2a>
10005028:	3b01      	subs	r3, #1
1000502a:	d303      	bcc.n	10005034 <memchr+0x24>
1000502c:	7802      	ldrb	r2, [r0, #0]
1000502e:	42a2      	cmp	r2, r4
10005030:	d1f7      	bne.n	10005022 <memchr+0x12>
10005032:	bd70      	pop	{r4, r5, r6, pc}
10005034:	2000      	movs	r0, #0
10005036:	e7fc      	b.n	10005032 <memchr+0x22>
10005038:	0013      	movs	r3, r2
1000503a:	2b03      	cmp	r3, #3
1000503c:	d912      	bls.n	10005064 <memchr+0x54>
1000503e:	22ff      	movs	r2, #255	; 0xff
10005040:	400a      	ands	r2, r1
10005042:	0215      	lsls	r5, r2, #8
10005044:	18ad      	adds	r5, r5, r2
10005046:	042a      	lsls	r2, r5, #16
10005048:	4e0c      	ldr	r6, [pc, #48]	; (1000507c <memchr+0x6c>)
1000504a:	18ad      	adds	r5, r5, r2
1000504c:	e003      	b.n	10005056 <memchr+0x46>
1000504e:	3b04      	subs	r3, #4
10005050:	3004      	adds	r0, #4
10005052:	2b03      	cmp	r3, #3
10005054:	d906      	bls.n	10005064 <memchr+0x54>
10005056:	6802      	ldr	r2, [r0, #0]
10005058:	4909      	ldr	r1, [pc, #36]	; (10005080 <memchr+0x70>)
1000505a:	406a      	eors	r2, r5
1000505c:	1851      	adds	r1, r2, r1
1000505e:	4391      	bics	r1, r2
10005060:	4231      	tst	r1, r6
10005062:	d0f4      	beq.n	1000504e <memchr+0x3e>
10005064:	18c2      	adds	r2, r0, r3
10005066:	2b00      	cmp	r3, #0
10005068:	d103      	bne.n	10005072 <memchr+0x62>
1000506a:	e7e3      	b.n	10005034 <memchr+0x24>
1000506c:	3001      	adds	r0, #1
1000506e:	4290      	cmp	r0, r2
10005070:	d0e0      	beq.n	10005034 <memchr+0x24>
10005072:	7803      	ldrb	r3, [r0, #0]
10005074:	42a3      	cmp	r3, r4
10005076:	d1f9      	bne.n	1000506c <memchr+0x5c>
10005078:	e7db      	b.n	10005032 <memchr+0x22>
1000507a:	46c0      	nop			; (mov r8, r8)
1000507c:	80808080 	.word	0x80808080
10005080:	fefefeff 	.word	0xfefefeff

10005084 <memmove>:
10005084:	b5f0      	push	{r4, r5, r6, r7, lr}
10005086:	4288      	cmp	r0, r1
10005088:	d90a      	bls.n	100050a0 <memmove+0x1c>
1000508a:	188b      	adds	r3, r1, r2
1000508c:	4298      	cmp	r0, r3
1000508e:	d207      	bcs.n	100050a0 <memmove+0x1c>
10005090:	1e53      	subs	r3, r2, #1
10005092:	2a00      	cmp	r2, #0
10005094:	d003      	beq.n	1000509e <memmove+0x1a>
10005096:	5cca      	ldrb	r2, [r1, r3]
10005098:	54c2      	strb	r2, [r0, r3]
1000509a:	3b01      	subs	r3, #1
1000509c:	d2fb      	bcs.n	10005096 <memmove+0x12>
1000509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100050a0:	0005      	movs	r5, r0
100050a2:	2a0f      	cmp	r2, #15
100050a4:	d80a      	bhi.n	100050bc <memmove+0x38>
100050a6:	1e56      	subs	r6, r2, #1
100050a8:	2a00      	cmp	r2, #0
100050aa:	d0f8      	beq.n	1000509e <memmove+0x1a>
100050ac:	2300      	movs	r3, #0
100050ae:	5ccc      	ldrb	r4, [r1, r3]
100050b0:	001a      	movs	r2, r3
100050b2:	54ec      	strb	r4, [r5, r3]
100050b4:	3301      	adds	r3, #1
100050b6:	4296      	cmp	r6, r2
100050b8:	d1f9      	bne.n	100050ae <memmove+0x2a>
100050ba:	e7f0      	b.n	1000509e <memmove+0x1a>
100050bc:	2403      	movs	r4, #3
100050be:	0003      	movs	r3, r0
100050c0:	0026      	movs	r6, r4
100050c2:	430b      	orrs	r3, r1
100050c4:	401e      	ands	r6, r3
100050c6:	421c      	tst	r4, r3
100050c8:	d130      	bne.n	1000512c <memmove+0xa8>
100050ca:	0015      	movs	r5, r2
100050cc:	3d10      	subs	r5, #16
100050ce:	092d      	lsrs	r5, r5, #4
100050d0:	0003      	movs	r3, r0
100050d2:	000c      	movs	r4, r1
100050d4:	46ac      	mov	ip, r5
100050d6:	012f      	lsls	r7, r5, #4
100050d8:	183f      	adds	r7, r7, r0
100050da:	6825      	ldr	r5, [r4, #0]
100050dc:	601d      	str	r5, [r3, #0]
100050de:	6865      	ldr	r5, [r4, #4]
100050e0:	605d      	str	r5, [r3, #4]
100050e2:	68a5      	ldr	r5, [r4, #8]
100050e4:	609d      	str	r5, [r3, #8]
100050e6:	68e5      	ldr	r5, [r4, #12]
100050e8:	3410      	adds	r4, #16
100050ea:	60dd      	str	r5, [r3, #12]
100050ec:	001d      	movs	r5, r3
100050ee:	3310      	adds	r3, #16
100050f0:	42bd      	cmp	r5, r7
100050f2:	d1f2      	bne.n	100050da <memmove+0x56>
100050f4:	4665      	mov	r5, ip
100050f6:	230f      	movs	r3, #15
100050f8:	240c      	movs	r4, #12
100050fa:	3501      	adds	r5, #1
100050fc:	012d      	lsls	r5, r5, #4
100050fe:	1949      	adds	r1, r1, r5
10005100:	4013      	ands	r3, r2
10005102:	1945      	adds	r5, r0, r5
10005104:	4214      	tst	r4, r2
10005106:	d013      	beq.n	10005130 <memmove+0xac>
10005108:	598c      	ldr	r4, [r1, r6]
1000510a:	51ac      	str	r4, [r5, r6]
1000510c:	3604      	adds	r6, #4
1000510e:	1b9c      	subs	r4, r3, r6
10005110:	2c03      	cmp	r4, #3
10005112:	d8f9      	bhi.n	10005108 <memmove+0x84>
10005114:	3b04      	subs	r3, #4
10005116:	089b      	lsrs	r3, r3, #2
10005118:	3301      	adds	r3, #1
1000511a:	009b      	lsls	r3, r3, #2
1000511c:	18ed      	adds	r5, r5, r3
1000511e:	18c9      	adds	r1, r1, r3
10005120:	2303      	movs	r3, #3
10005122:	401a      	ands	r2, r3
10005124:	1e56      	subs	r6, r2, #1
10005126:	2a00      	cmp	r2, #0
10005128:	d1c0      	bne.n	100050ac <memmove+0x28>
1000512a:	e7b8      	b.n	1000509e <memmove+0x1a>
1000512c:	1e56      	subs	r6, r2, #1
1000512e:	e7bd      	b.n	100050ac <memmove+0x28>
10005130:	001a      	movs	r2, r3
10005132:	e7b8      	b.n	100050a6 <memmove+0x22>

10005134 <_realloc_r>:
10005134:	b5f0      	push	{r4, r5, r6, r7, lr}
10005136:	4657      	mov	r7, sl
10005138:	464e      	mov	r6, r9
1000513a:	46de      	mov	lr, fp
1000513c:	4645      	mov	r5, r8
1000513e:	b5e0      	push	{r5, r6, r7, lr}
10005140:	000c      	movs	r4, r1
10005142:	0006      	movs	r6, r0
10005144:	0017      	movs	r7, r2
10005146:	b083      	sub	sp, #12
10005148:	2900      	cmp	r1, #0
1000514a:	d100      	bne.n	1000514e <_realloc_r+0x1a>
1000514c:	e0ac      	b.n	100052a8 <_realloc_r+0x174>
1000514e:	f7fe fae9 	bl	10003724 <__malloc_lock>
10005152:	2308      	movs	r3, #8
10005154:	425b      	negs	r3, r3
10005156:	4699      	mov	r9, r3
10005158:	44a1      	add	r9, r4
1000515a:	464b      	mov	r3, r9
1000515c:	685b      	ldr	r3, [r3, #4]
1000515e:	2203      	movs	r2, #3
10005160:	0019      	movs	r1, r3
10005162:	003d      	movs	r5, r7
10005164:	4391      	bics	r1, r2
10005166:	350b      	adds	r5, #11
10005168:	46ca      	mov	sl, r9
1000516a:	4688      	mov	r8, r1
1000516c:	2d16      	cmp	r5, #22
1000516e:	d867      	bhi.n	10005240 <_realloc_r+0x10c>
10005170:	2510      	movs	r5, #16
10005172:	42af      	cmp	r7, r5
10005174:	d867      	bhi.n	10005246 <_realloc_r+0x112>
10005176:	45a8      	cmp	r8, r5
10005178:	da6e      	bge.n	10005258 <_realloc_r+0x124>
1000517a:	4649      	mov	r1, r9
1000517c:	48c0      	ldr	r0, [pc, #768]	; (10005480 <_realloc_r+0x34c>)
1000517e:	4441      	add	r1, r8
10005180:	684a      	ldr	r2, [r1, #4]
10005182:	9000      	str	r0, [sp, #0]
10005184:	6880      	ldr	r0, [r0, #8]
10005186:	4693      	mov	fp, r2
10005188:	4288      	cmp	r0, r1
1000518a:	d100      	bne.n	1000518e <_realloc_r+0x5a>
1000518c:	e0a0      	b.n	100052d0 <_realloc_r+0x19c>
1000518e:	2001      	movs	r0, #1
10005190:	4684      	mov	ip, r0
10005192:	0010      	movs	r0, r2
10005194:	4662      	mov	r2, ip
10005196:	4390      	bics	r0, r2
10005198:	1808      	adds	r0, r1, r0
1000519a:	6840      	ldr	r0, [r0, #4]
1000519c:	4210      	tst	r0, r2
1000519e:	d000      	beq.n	100051a2 <_realloc_r+0x6e>
100051a0:	e077      	b.n	10005292 <_realloc_r+0x15e>
100051a2:	465a      	mov	r2, fp
100051a4:	2003      	movs	r0, #3
100051a6:	4382      	bics	r2, r0
100051a8:	4693      	mov	fp, r2
100051aa:	44c3      	add	fp, r8
100051ac:	455d      	cmp	r5, fp
100051ae:	dd4e      	ble.n	1000524e <_realloc_r+0x11a>
100051b0:	4660      	mov	r0, ip
100051b2:	4218      	tst	r0, r3
100051b4:	d112      	bne.n	100051dc <_realloc_r+0xa8>
100051b6:	464b      	mov	r3, r9
100051b8:	4648      	mov	r0, r9
100051ba:	681b      	ldr	r3, [r3, #0]
100051bc:	1ac3      	subs	r3, r0, r3
100051be:	2003      	movs	r0, #3
100051c0:	469b      	mov	fp, r3
100051c2:	685b      	ldr	r3, [r3, #4]
100051c4:	4383      	bics	r3, r0
100051c6:	18d2      	adds	r2, r2, r3
100051c8:	4442      	add	r2, r8
100051ca:	9200      	str	r2, [sp, #0]
100051cc:	4295      	cmp	r5, r2
100051ce:	dc00      	bgt.n	100051d2 <_realloc_r+0x9e>
100051d0:	e0cc      	b.n	1000536c <_realloc_r+0x238>
100051d2:	4443      	add	r3, r8
100051d4:	9300      	str	r3, [sp, #0]
100051d6:	429d      	cmp	r5, r3
100051d8:	dc00      	bgt.n	100051dc <_realloc_r+0xa8>
100051da:	e0cb      	b.n	10005374 <_realloc_r+0x240>
100051dc:	0039      	movs	r1, r7
100051de:	0030      	movs	r0, r6
100051e0:	f7fd ff60 	bl	100030a4 <_malloc_r>
100051e4:	1e07      	subs	r7, r0, #0
100051e6:	d100      	bne.n	100051ea <_realloc_r+0xb6>
100051e8:	e11e      	b.n	10005428 <_realloc_r+0x2f4>
100051ea:	464b      	mov	r3, r9
100051ec:	2201      	movs	r2, #1
100051ee:	685b      	ldr	r3, [r3, #4]
100051f0:	4393      	bics	r3, r2
100051f2:	0002      	movs	r2, r0
100051f4:	444b      	add	r3, r9
100051f6:	3a08      	subs	r2, #8
100051f8:	4293      	cmp	r3, r2
100051fa:	d100      	bne.n	100051fe <_realloc_r+0xca>
100051fc:	e0e3      	b.n	100053c6 <_realloc_r+0x292>
100051fe:	4642      	mov	r2, r8
10005200:	3a04      	subs	r2, #4
10005202:	2a24      	cmp	r2, #36	; 0x24
10005204:	d900      	bls.n	10005208 <_realloc_r+0xd4>
10005206:	e0e3      	b.n	100053d0 <_realloc_r+0x29c>
10005208:	0003      	movs	r3, r0
1000520a:	0021      	movs	r1, r4
1000520c:	2a13      	cmp	r2, #19
1000520e:	d909      	bls.n	10005224 <_realloc_r+0xf0>
10005210:	6823      	ldr	r3, [r4, #0]
10005212:	6003      	str	r3, [r0, #0]
10005214:	6863      	ldr	r3, [r4, #4]
10005216:	6043      	str	r3, [r0, #4]
10005218:	2a1b      	cmp	r2, #27
1000521a:	d900      	bls.n	1000521e <_realloc_r+0xea>
1000521c:	e0dc      	b.n	100053d8 <_realloc_r+0x2a4>
1000521e:	0003      	movs	r3, r0
10005220:	3108      	adds	r1, #8
10005222:	3308      	adds	r3, #8
10005224:	680a      	ldr	r2, [r1, #0]
10005226:	601a      	str	r2, [r3, #0]
10005228:	684a      	ldr	r2, [r1, #4]
1000522a:	605a      	str	r2, [r3, #4]
1000522c:	688a      	ldr	r2, [r1, #8]
1000522e:	609a      	str	r2, [r3, #8]
10005230:	0030      	movs	r0, r6
10005232:	0021      	movs	r1, r4
10005234:	f7ff fbf2 	bl	10004a1c <_free_r>
10005238:	0030      	movs	r0, r6
1000523a:	f7fe fa7b 	bl	10003734 <__malloc_unlock>
1000523e:	e020      	b.n	10005282 <_realloc_r+0x14e>
10005240:	3204      	adds	r2, #4
10005242:	4395      	bics	r5, r2
10005244:	d595      	bpl.n	10005172 <_realloc_r+0x3e>
10005246:	230c      	movs	r3, #12
10005248:	2700      	movs	r7, #0
1000524a:	6033      	str	r3, [r6, #0]
1000524c:	e019      	b.n	10005282 <_realloc_r+0x14e>
1000524e:	46d8      	mov	r8, fp
10005250:	68cb      	ldr	r3, [r1, #12]
10005252:	688a      	ldr	r2, [r1, #8]
10005254:	60d3      	str	r3, [r2, #12]
10005256:	609a      	str	r2, [r3, #8]
10005258:	4643      	mov	r3, r8
1000525a:	1b5f      	subs	r7, r3, r5
1000525c:	4653      	mov	r3, sl
1000525e:	2201      	movs	r2, #1
10005260:	4650      	mov	r0, sl
10005262:	685b      	ldr	r3, [r3, #4]
10005264:	4440      	add	r0, r8
10005266:	4013      	ands	r3, r2
10005268:	2f0f      	cmp	r7, #15
1000526a:	d822      	bhi.n	100052b2 <_realloc_r+0x17e>
1000526c:	4641      	mov	r1, r8
1000526e:	430b      	orrs	r3, r1
10005270:	4651      	mov	r1, sl
10005272:	604b      	str	r3, [r1, #4]
10005274:	6843      	ldr	r3, [r0, #4]
10005276:	4313      	orrs	r3, r2
10005278:	6043      	str	r3, [r0, #4]
1000527a:	0030      	movs	r0, r6
1000527c:	f7fe fa5a 	bl	10003734 <__malloc_unlock>
10005280:	0027      	movs	r7, r4
10005282:	0038      	movs	r0, r7
10005284:	b003      	add	sp, #12
10005286:	bcf0      	pop	{r4, r5, r6, r7}
10005288:	46bb      	mov	fp, r7
1000528a:	46b2      	mov	sl, r6
1000528c:	46a9      	mov	r9, r5
1000528e:	46a0      	mov	r8, r4
10005290:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005292:	421a      	tst	r2, r3
10005294:	d1a2      	bne.n	100051dc <_realloc_r+0xa8>
10005296:	464b      	mov	r3, r9
10005298:	464a      	mov	r2, r9
1000529a:	681b      	ldr	r3, [r3, #0]
1000529c:	1ad3      	subs	r3, r2, r3
1000529e:	2203      	movs	r2, #3
100052a0:	469b      	mov	fp, r3
100052a2:	685b      	ldr	r3, [r3, #4]
100052a4:	4393      	bics	r3, r2
100052a6:	e794      	b.n	100051d2 <_realloc_r+0x9e>
100052a8:	0011      	movs	r1, r2
100052aa:	f7fd fefb 	bl	100030a4 <_malloc_r>
100052ae:	0007      	movs	r7, r0
100052b0:	e7e7      	b.n	10005282 <_realloc_r+0x14e>
100052b2:	4651      	mov	r1, sl
100052b4:	432b      	orrs	r3, r5
100052b6:	1949      	adds	r1, r1, r5
100052b8:	4655      	mov	r5, sl
100052ba:	4317      	orrs	r7, r2
100052bc:	606b      	str	r3, [r5, #4]
100052be:	604f      	str	r7, [r1, #4]
100052c0:	6843      	ldr	r3, [r0, #4]
100052c2:	3108      	adds	r1, #8
100052c4:	4313      	orrs	r3, r2
100052c6:	6043      	str	r3, [r0, #4]
100052c8:	0030      	movs	r0, r6
100052ca:	f7ff fba7 	bl	10004a1c <_free_r>
100052ce:	e7d4      	b.n	1000527a <_realloc_r+0x146>
100052d0:	2103      	movs	r1, #3
100052d2:	438a      	bics	r2, r1
100052d4:	4694      	mov	ip, r2
100052d6:	0029      	movs	r1, r5
100052d8:	44c4      	add	ip, r8
100052da:	3110      	adds	r1, #16
100052dc:	458c      	cmp	ip, r1
100052de:	db00      	blt.n	100052e2 <_realloc_r+0x1ae>
100052e0:	e084      	b.n	100053ec <_realloc_r+0x2b8>
100052e2:	07db      	lsls	r3, r3, #31
100052e4:	d500      	bpl.n	100052e8 <_realloc_r+0x1b4>
100052e6:	e779      	b.n	100051dc <_realloc_r+0xa8>
100052e8:	464b      	mov	r3, r9
100052ea:	4648      	mov	r0, r9
100052ec:	681b      	ldr	r3, [r3, #0]
100052ee:	1ac3      	subs	r3, r0, r3
100052f0:	2003      	movs	r0, #3
100052f2:	469b      	mov	fp, r3
100052f4:	685b      	ldr	r3, [r3, #4]
100052f6:	4383      	bics	r3, r0
100052f8:	18d2      	adds	r2, r2, r3
100052fa:	4442      	add	r2, r8
100052fc:	9201      	str	r2, [sp, #4]
100052fe:	4291      	cmp	r1, r2
10005300:	dd00      	ble.n	10005304 <_realloc_r+0x1d0>
10005302:	e766      	b.n	100051d2 <_realloc_r+0x9e>
10005304:	465b      	mov	r3, fp
10005306:	465a      	mov	r2, fp
10005308:	68db      	ldr	r3, [r3, #12]
1000530a:	6892      	ldr	r2, [r2, #8]
1000530c:	465f      	mov	r7, fp
1000530e:	60d3      	str	r3, [r2, #12]
10005310:	609a      	str	r2, [r3, #8]
10005312:	4642      	mov	r2, r8
10005314:	3a04      	subs	r2, #4
10005316:	3708      	adds	r7, #8
10005318:	2a24      	cmp	r2, #36	; 0x24
1000531a:	d900      	bls.n	1000531e <_realloc_r+0x1ea>
1000531c:	e099      	b.n	10005452 <_realloc_r+0x31e>
1000531e:	003b      	movs	r3, r7
10005320:	2a13      	cmp	r2, #19
10005322:	d90a      	bls.n	1000533a <_realloc_r+0x206>
10005324:	4659      	mov	r1, fp
10005326:	6823      	ldr	r3, [r4, #0]
10005328:	608b      	str	r3, [r1, #8]
1000532a:	6863      	ldr	r3, [r4, #4]
1000532c:	60cb      	str	r3, [r1, #12]
1000532e:	2a1b      	cmp	r2, #27
10005330:	d900      	bls.n	10005334 <_realloc_r+0x200>
10005332:	e093      	b.n	1000545c <_realloc_r+0x328>
10005334:	465b      	mov	r3, fp
10005336:	3408      	adds	r4, #8
10005338:	3310      	adds	r3, #16
1000533a:	6822      	ldr	r2, [r4, #0]
1000533c:	601a      	str	r2, [r3, #0]
1000533e:	6862      	ldr	r2, [r4, #4]
10005340:	605a      	str	r2, [r3, #4]
10005342:	68a2      	ldr	r2, [r4, #8]
10005344:	609a      	str	r2, [r3, #8]
10005346:	465b      	mov	r3, fp
10005348:	2201      	movs	r2, #1
1000534a:	1959      	adds	r1, r3, r5
1000534c:	9b00      	ldr	r3, [sp, #0]
1000534e:	0030      	movs	r0, r6
10005350:	6099      	str	r1, [r3, #8]
10005352:	9b01      	ldr	r3, [sp, #4]
10005354:	1b5b      	subs	r3, r3, r5
10005356:	4313      	orrs	r3, r2
10005358:	604b      	str	r3, [r1, #4]
1000535a:	465b      	mov	r3, fp
1000535c:	685b      	ldr	r3, [r3, #4]
1000535e:	4013      	ands	r3, r2
10005360:	465a      	mov	r2, fp
10005362:	432b      	orrs	r3, r5
10005364:	6053      	str	r3, [r2, #4]
10005366:	f7fe f9e5 	bl	10003734 <__malloc_unlock>
1000536a:	e78a      	b.n	10005282 <_realloc_r+0x14e>
1000536c:	68cb      	ldr	r3, [r1, #12]
1000536e:	688a      	ldr	r2, [r1, #8]
10005370:	60d3      	str	r3, [r2, #12]
10005372:	609a      	str	r2, [r3, #8]
10005374:	465b      	mov	r3, fp
10005376:	465a      	mov	r2, fp
10005378:	68db      	ldr	r3, [r3, #12]
1000537a:	6892      	ldr	r2, [r2, #8]
1000537c:	465f      	mov	r7, fp
1000537e:	60d3      	str	r3, [r2, #12]
10005380:	609a      	str	r2, [r3, #8]
10005382:	4642      	mov	r2, r8
10005384:	3a04      	subs	r2, #4
10005386:	3708      	adds	r7, #8
10005388:	2a24      	cmp	r2, #36	; 0x24
1000538a:	d817      	bhi.n	100053bc <_realloc_r+0x288>
1000538c:	003b      	movs	r3, r7
1000538e:	2a13      	cmp	r2, #19
10005390:	d909      	bls.n	100053a6 <_realloc_r+0x272>
10005392:	4659      	mov	r1, fp
10005394:	6823      	ldr	r3, [r4, #0]
10005396:	608b      	str	r3, [r1, #8]
10005398:	6863      	ldr	r3, [r4, #4]
1000539a:	60cb      	str	r3, [r1, #12]
1000539c:	2a1b      	cmp	r2, #27
1000539e:	d839      	bhi.n	10005414 <_realloc_r+0x2e0>
100053a0:	465b      	mov	r3, fp
100053a2:	3408      	adds	r4, #8
100053a4:	3310      	adds	r3, #16
100053a6:	6822      	ldr	r2, [r4, #0]
100053a8:	601a      	str	r2, [r3, #0]
100053aa:	6862      	ldr	r2, [r4, #4]
100053ac:	605a      	str	r2, [r3, #4]
100053ae:	68a2      	ldr	r2, [r4, #8]
100053b0:	609a      	str	r2, [r3, #8]
100053b2:	9b00      	ldr	r3, [sp, #0]
100053b4:	003c      	movs	r4, r7
100053b6:	4698      	mov	r8, r3
100053b8:	46da      	mov	sl, fp
100053ba:	e74d      	b.n	10005258 <_realloc_r+0x124>
100053bc:	0021      	movs	r1, r4
100053be:	0038      	movs	r0, r7
100053c0:	f7ff fe60 	bl	10005084 <memmove>
100053c4:	e7f5      	b.n	100053b2 <_realloc_r+0x27e>
100053c6:	2203      	movs	r2, #3
100053c8:	685b      	ldr	r3, [r3, #4]
100053ca:	4393      	bics	r3, r2
100053cc:	4498      	add	r8, r3
100053ce:	e743      	b.n	10005258 <_realloc_r+0x124>
100053d0:	0021      	movs	r1, r4
100053d2:	f7ff fe57 	bl	10005084 <memmove>
100053d6:	e72b      	b.n	10005230 <_realloc_r+0xfc>
100053d8:	68a3      	ldr	r3, [r4, #8]
100053da:	6083      	str	r3, [r0, #8]
100053dc:	68e3      	ldr	r3, [r4, #12]
100053de:	60c3      	str	r3, [r0, #12]
100053e0:	2a24      	cmp	r2, #36	; 0x24
100053e2:	d026      	beq.n	10005432 <_realloc_r+0x2fe>
100053e4:	0003      	movs	r3, r0
100053e6:	3110      	adds	r1, #16
100053e8:	3310      	adds	r3, #16
100053ea:	e71b      	b.n	10005224 <_realloc_r+0xf0>
100053ec:	464b      	mov	r3, r9
100053ee:	1959      	adds	r1, r3, r5
100053f0:	9b00      	ldr	r3, [sp, #0]
100053f2:	2201      	movs	r2, #1
100053f4:	6099      	str	r1, [r3, #8]
100053f6:	4663      	mov	r3, ip
100053f8:	1b5b      	subs	r3, r3, r5
100053fa:	4313      	orrs	r3, r2
100053fc:	604b      	str	r3, [r1, #4]
100053fe:	464b      	mov	r3, r9
10005400:	685b      	ldr	r3, [r3, #4]
10005402:	0030      	movs	r0, r6
10005404:	4013      	ands	r3, r2
10005406:	464a      	mov	r2, r9
10005408:	432b      	orrs	r3, r5
1000540a:	6053      	str	r3, [r2, #4]
1000540c:	f7fe f992 	bl	10003734 <__malloc_unlock>
10005410:	0027      	movs	r7, r4
10005412:	e736      	b.n	10005282 <_realloc_r+0x14e>
10005414:	68a3      	ldr	r3, [r4, #8]
10005416:	610b      	str	r3, [r1, #16]
10005418:	68e3      	ldr	r3, [r4, #12]
1000541a:	614b      	str	r3, [r1, #20]
1000541c:	2a24      	cmp	r2, #36	; 0x24
1000541e:	d010      	beq.n	10005442 <_realloc_r+0x30e>
10005420:	465b      	mov	r3, fp
10005422:	3410      	adds	r4, #16
10005424:	3318      	adds	r3, #24
10005426:	e7be      	b.n	100053a6 <_realloc_r+0x272>
10005428:	0030      	movs	r0, r6
1000542a:	f7fe f983 	bl	10003734 <__malloc_unlock>
1000542e:	2700      	movs	r7, #0
10005430:	e727      	b.n	10005282 <_realloc_r+0x14e>
10005432:	6923      	ldr	r3, [r4, #16]
10005434:	3118      	adds	r1, #24
10005436:	6103      	str	r3, [r0, #16]
10005438:	0003      	movs	r3, r0
1000543a:	6962      	ldr	r2, [r4, #20]
1000543c:	3318      	adds	r3, #24
1000543e:	6142      	str	r2, [r0, #20]
10005440:	e6f0      	b.n	10005224 <_realloc_r+0xf0>
10005442:	6923      	ldr	r3, [r4, #16]
10005444:	618b      	str	r3, [r1, #24]
10005446:	465b      	mov	r3, fp
10005448:	6962      	ldr	r2, [r4, #20]
1000544a:	3320      	adds	r3, #32
1000544c:	61ca      	str	r2, [r1, #28]
1000544e:	3418      	adds	r4, #24
10005450:	e7a9      	b.n	100053a6 <_realloc_r+0x272>
10005452:	0021      	movs	r1, r4
10005454:	0038      	movs	r0, r7
10005456:	f7ff fe15 	bl	10005084 <memmove>
1000545a:	e774      	b.n	10005346 <_realloc_r+0x212>
1000545c:	68a3      	ldr	r3, [r4, #8]
1000545e:	610b      	str	r3, [r1, #16]
10005460:	68e3      	ldr	r3, [r4, #12]
10005462:	614b      	str	r3, [r1, #20]
10005464:	2a24      	cmp	r2, #36	; 0x24
10005466:	d003      	beq.n	10005470 <_realloc_r+0x33c>
10005468:	465b      	mov	r3, fp
1000546a:	3410      	adds	r4, #16
1000546c:	3318      	adds	r3, #24
1000546e:	e764      	b.n	1000533a <_realloc_r+0x206>
10005470:	6923      	ldr	r3, [r4, #16]
10005472:	618b      	str	r3, [r1, #24]
10005474:	465b      	mov	r3, fp
10005476:	6962      	ldr	r2, [r4, #20]
10005478:	3320      	adds	r3, #32
1000547a:	61ca      	str	r2, [r1, #28]
1000547c:	3418      	adds	r4, #24
1000547e:	e75c      	b.n	1000533a <_realloc_r+0x206>
10005480:	20000290 	.word	0x20000290

10005484 <raise>:
10005484:	4b15      	ldr	r3, [pc, #84]	; (100054dc <raise+0x58>)
10005486:	b570      	push	{r4, r5, r6, lr}
10005488:	0004      	movs	r4, r0
1000548a:	681d      	ldr	r5, [r3, #0]
1000548c:	281f      	cmp	r0, #31
1000548e:	d81f      	bhi.n	100054d0 <raise+0x4c>
10005490:	23a4      	movs	r3, #164	; 0xa4
10005492:	005b      	lsls	r3, r3, #1
10005494:	58eb      	ldr	r3, [r5, r3]
10005496:	2b00      	cmp	r3, #0
10005498:	d00d      	beq.n	100054b6 <raise+0x32>
1000549a:	0082      	lsls	r2, r0, #2
1000549c:	189b      	adds	r3, r3, r2
1000549e:	681a      	ldr	r2, [r3, #0]
100054a0:	2a00      	cmp	r2, #0
100054a2:	d008      	beq.n	100054b6 <raise+0x32>
100054a4:	2a01      	cmp	r2, #1
100054a6:	d004      	beq.n	100054b2 <raise+0x2e>
100054a8:	1c51      	adds	r1, r2, #1
100054aa:	d00d      	beq.n	100054c8 <raise+0x44>
100054ac:	2100      	movs	r1, #0
100054ae:	6019      	str	r1, [r3, #0]
100054b0:	4790      	blx	r2
100054b2:	2000      	movs	r0, #0
100054b4:	bd70      	pop	{r4, r5, r6, pc}
100054b6:	0028      	movs	r0, r5
100054b8:	f000 f826 	bl	10005508 <_getpid_r>
100054bc:	0022      	movs	r2, r4
100054be:	0001      	movs	r1, r0
100054c0:	0028      	movs	r0, r5
100054c2:	f000 f80d 	bl	100054e0 <_kill_r>
100054c6:	e7f5      	b.n	100054b4 <raise+0x30>
100054c8:	2316      	movs	r3, #22
100054ca:	2001      	movs	r0, #1
100054cc:	602b      	str	r3, [r5, #0]
100054ce:	e7f1      	b.n	100054b4 <raise+0x30>
100054d0:	2316      	movs	r3, #22
100054d2:	2001      	movs	r0, #1
100054d4:	602b      	str	r3, [r5, #0]
100054d6:	4240      	negs	r0, r0
100054d8:	e7ec      	b.n	100054b4 <raise+0x30>
100054da:	46c0      	nop			; (mov r8, r8)
100054dc:	200006dc 	.word	0x200006dc

100054e0 <_kill_r>:
100054e0:	2300      	movs	r3, #0
100054e2:	b570      	push	{r4, r5, r6, lr}
100054e4:	4d07      	ldr	r5, [pc, #28]	; (10005504 <_kill_r+0x24>)
100054e6:	0004      	movs	r4, r0
100054e8:	0008      	movs	r0, r1
100054ea:	0011      	movs	r1, r2
100054ec:	602b      	str	r3, [r5, #0]
100054ee:	f000 fb2f 	bl	10005b50 <_kill>
100054f2:	1c43      	adds	r3, r0, #1
100054f4:	d000      	beq.n	100054f8 <_kill_r+0x18>
100054f6:	bd70      	pop	{r4, r5, r6, pc}
100054f8:	682b      	ldr	r3, [r5, #0]
100054fa:	2b00      	cmp	r3, #0
100054fc:	d0fb      	beq.n	100054f6 <_kill_r+0x16>
100054fe:	6023      	str	r3, [r4, #0]
10005500:	e7f9      	b.n	100054f6 <_kill_r+0x16>
10005502:	46c0      	nop			; (mov r8, r8)
10005504:	20000c5c 	.word	0x20000c5c

10005508 <_getpid_r>:
10005508:	b510      	push	{r4, lr}
1000550a:	f000 fb23 	bl	10005b54 <_getpid>
1000550e:	bd10      	pop	{r4, pc}

10005510 <__sread>:
10005510:	b570      	push	{r4, r5, r6, lr}
10005512:	000c      	movs	r4, r1
10005514:	250e      	movs	r5, #14
10005516:	5f49      	ldrsh	r1, [r1, r5]
10005518:	f000 f8f2 	bl	10005700 <_read_r>
1000551c:	2800      	cmp	r0, #0
1000551e:	db03      	blt.n	10005528 <__sread+0x18>
10005520:	6d23      	ldr	r3, [r4, #80]	; 0x50
10005522:	181b      	adds	r3, r3, r0
10005524:	6523      	str	r3, [r4, #80]	; 0x50
10005526:	bd70      	pop	{r4, r5, r6, pc}
10005528:	89a3      	ldrh	r3, [r4, #12]
1000552a:	4a02      	ldr	r2, [pc, #8]	; (10005534 <__sread+0x24>)
1000552c:	4013      	ands	r3, r2
1000552e:	81a3      	strh	r3, [r4, #12]
10005530:	e7f9      	b.n	10005526 <__sread+0x16>
10005532:	46c0      	nop			; (mov r8, r8)
10005534:	ffffefff 	.word	0xffffefff

10005538 <__swrite>:
10005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000553a:	000c      	movs	r4, r1
1000553c:	001f      	movs	r7, r3
1000553e:	230c      	movs	r3, #12
10005540:	5ec9      	ldrsh	r1, [r1, r3]
10005542:	0005      	movs	r5, r0
10005544:	0016      	movs	r6, r2
10005546:	05cb      	lsls	r3, r1, #23
10005548:	d40a      	bmi.n	10005560 <__swrite+0x28>
1000554a:	4b0a      	ldr	r3, [pc, #40]	; (10005574 <__swrite+0x3c>)
1000554c:	0032      	movs	r2, r6
1000554e:	4019      	ands	r1, r3
10005550:	0028      	movs	r0, r5
10005552:	81a1      	strh	r1, [r4, #12]
10005554:	230e      	movs	r3, #14
10005556:	5ee1      	ldrsh	r1, [r4, r3]
10005558:	003b      	movs	r3, r7
1000555a:	f000 f85b 	bl	10005614 <_write_r>
1000555e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005560:	230e      	movs	r3, #14
10005562:	5ee1      	ldrsh	r1, [r4, r3]
10005564:	2200      	movs	r2, #0
10005566:	2302      	movs	r3, #2
10005568:	f000 f8a0 	bl	100056ac <_lseek_r>
1000556c:	230c      	movs	r3, #12
1000556e:	5ee1      	ldrsh	r1, [r4, r3]
10005570:	e7eb      	b.n	1000554a <__swrite+0x12>
10005572:	46c0      	nop			; (mov r8, r8)
10005574:	ffffefff 	.word	0xffffefff

10005578 <__sseek>:
10005578:	b570      	push	{r4, r5, r6, lr}
1000557a:	000c      	movs	r4, r1
1000557c:	250e      	movs	r5, #14
1000557e:	5f49      	ldrsh	r1, [r1, r5]
10005580:	f000 f894 	bl	100056ac <_lseek_r>
10005584:	1c43      	adds	r3, r0, #1
10005586:	d007      	beq.n	10005598 <__sseek+0x20>
10005588:	2380      	movs	r3, #128	; 0x80
1000558a:	89a2      	ldrh	r2, [r4, #12]
1000558c:	015b      	lsls	r3, r3, #5
1000558e:	4313      	orrs	r3, r2
10005590:	b21b      	sxth	r3, r3
10005592:	6520      	str	r0, [r4, #80]	; 0x50
10005594:	81a3      	strh	r3, [r4, #12]
10005596:	bd70      	pop	{r4, r5, r6, pc}
10005598:	89a3      	ldrh	r3, [r4, #12]
1000559a:	4a02      	ldr	r2, [pc, #8]	; (100055a4 <__sseek+0x2c>)
1000559c:	4013      	ands	r3, r2
1000559e:	b21b      	sxth	r3, r3
100055a0:	e7f8      	b.n	10005594 <__sseek+0x1c>
100055a2:	46c0      	nop			; (mov r8, r8)
100055a4:	ffffefff 	.word	0xffffefff

100055a8 <__sclose>:
100055a8:	b510      	push	{r4, lr}
100055aa:	230e      	movs	r3, #14
100055ac:	5ec9      	ldrsh	r1, [r1, r3]
100055ae:	f000 f845 	bl	1000563c <_close_r>
100055b2:	bd10      	pop	{r4, pc}

100055b4 <strncpy>:
100055b4:	0003      	movs	r3, r0
100055b6:	430b      	orrs	r3, r1
100055b8:	b570      	push	{r4, r5, r6, lr}
100055ba:	0006      	movs	r6, r0
100055bc:	079b      	lsls	r3, r3, #30
100055be:	d10e      	bne.n	100055de <strncpy+0x2a>
100055c0:	2a03      	cmp	r2, #3
100055c2:	d90c      	bls.n	100055de <strncpy+0x2a>
100055c4:	4d11      	ldr	r5, [pc, #68]	; (1000560c <strncpy+0x58>)
100055c6:	e004      	b.n	100055d2 <strncpy+0x1e>
100055c8:	3a04      	subs	r2, #4
100055ca:	3104      	adds	r1, #4
100055cc:	c610      	stmia	r6!, {r4}
100055ce:	2a03      	cmp	r2, #3
100055d0:	d905      	bls.n	100055de <strncpy+0x2a>
100055d2:	680c      	ldr	r4, [r1, #0]
100055d4:	4b0e      	ldr	r3, [pc, #56]	; (10005610 <strncpy+0x5c>)
100055d6:	18e3      	adds	r3, r4, r3
100055d8:	43a3      	bics	r3, r4
100055da:	422b      	tst	r3, r5
100055dc:	d0f4      	beq.n	100055c8 <strncpy+0x14>
100055de:	0033      	movs	r3, r6
100055e0:	2400      	movs	r4, #0
100055e2:	e006      	b.n	100055f2 <strncpy+0x3e>
100055e4:	5d0d      	ldrb	r5, [r1, r4]
100055e6:	3a01      	subs	r2, #1
100055e8:	5535      	strb	r5, [r6, r4]
100055ea:	3301      	adds	r3, #1
100055ec:	3401      	adds	r4, #1
100055ee:	2d00      	cmp	r5, #0
100055f0:	d002      	beq.n	100055f8 <strncpy+0x44>
100055f2:	2a00      	cmp	r2, #0
100055f4:	d1f6      	bne.n	100055e4 <strncpy+0x30>
100055f6:	bd70      	pop	{r4, r5, r6, pc}
100055f8:	2100      	movs	r1, #0
100055fa:	189c      	adds	r4, r3, r2
100055fc:	2a00      	cmp	r2, #0
100055fe:	d0fa      	beq.n	100055f6 <strncpy+0x42>
10005600:	7019      	strb	r1, [r3, #0]
10005602:	3301      	adds	r3, #1
10005604:	42a3      	cmp	r3, r4
10005606:	d1fb      	bne.n	10005600 <strncpy+0x4c>
10005608:	e7f5      	b.n	100055f6 <strncpy+0x42>
1000560a:	46c0      	nop			; (mov r8, r8)
1000560c:	80808080 	.word	0x80808080
10005610:	fefefeff 	.word	0xfefefeff

10005614 <_write_r>:
10005614:	b570      	push	{r4, r5, r6, lr}
10005616:	0004      	movs	r4, r0
10005618:	0008      	movs	r0, r1
1000561a:	0011      	movs	r1, r2
1000561c:	001a      	movs	r2, r3
1000561e:	2300      	movs	r3, #0
10005620:	4d05      	ldr	r5, [pc, #20]	; (10005638 <_write_r+0x24>)
10005622:	602b      	str	r3, [r5, #0]
10005624:	f000 fa82 	bl	10005b2c <_write>
10005628:	1c43      	adds	r3, r0, #1
1000562a:	d000      	beq.n	1000562e <_write_r+0x1a>
1000562c:	bd70      	pop	{r4, r5, r6, pc}
1000562e:	682b      	ldr	r3, [r5, #0]
10005630:	2b00      	cmp	r3, #0
10005632:	d0fb      	beq.n	1000562c <_write_r+0x18>
10005634:	6023      	str	r3, [r4, #0]
10005636:	e7f9      	b.n	1000562c <_write_r+0x18>
10005638:	20000c5c 	.word	0x20000c5c

1000563c <_close_r>:
1000563c:	2300      	movs	r3, #0
1000563e:	b570      	push	{r4, r5, r6, lr}
10005640:	4c06      	ldr	r4, [pc, #24]	; (1000565c <_close_r+0x20>)
10005642:	0005      	movs	r5, r0
10005644:	0008      	movs	r0, r1
10005646:	6023      	str	r3, [r4, #0]
10005648:	f000 fa76 	bl	10005b38 <_close>
1000564c:	1c43      	adds	r3, r0, #1
1000564e:	d000      	beq.n	10005652 <_close_r+0x16>
10005650:	bd70      	pop	{r4, r5, r6, pc}
10005652:	6823      	ldr	r3, [r4, #0]
10005654:	2b00      	cmp	r3, #0
10005656:	d0fb      	beq.n	10005650 <_close_r+0x14>
10005658:	602b      	str	r3, [r5, #0]
1000565a:	e7f9      	b.n	10005650 <_close_r+0x14>
1000565c:	20000c5c 	.word	0x20000c5c

10005660 <_fstat_r>:
10005660:	2300      	movs	r3, #0
10005662:	b570      	push	{r4, r5, r6, lr}
10005664:	4d07      	ldr	r5, [pc, #28]	; (10005684 <_fstat_r+0x24>)
10005666:	0004      	movs	r4, r0
10005668:	0008      	movs	r0, r1
1000566a:	0011      	movs	r1, r2
1000566c:	602b      	str	r3, [r5, #0]
1000566e:	f000 fa73 	bl	10005b58 <_fstat>
10005672:	1c43      	adds	r3, r0, #1
10005674:	d000      	beq.n	10005678 <_fstat_r+0x18>
10005676:	bd70      	pop	{r4, r5, r6, pc}
10005678:	682b      	ldr	r3, [r5, #0]
1000567a:	2b00      	cmp	r3, #0
1000567c:	d0fb      	beq.n	10005676 <_fstat_r+0x16>
1000567e:	6023      	str	r3, [r4, #0]
10005680:	e7f9      	b.n	10005676 <_fstat_r+0x16>
10005682:	46c0      	nop			; (mov r8, r8)
10005684:	20000c5c 	.word	0x20000c5c

10005688 <_isatty_r>:
10005688:	2300      	movs	r3, #0
1000568a:	b570      	push	{r4, r5, r6, lr}
1000568c:	4c06      	ldr	r4, [pc, #24]	; (100056a8 <_isatty_r+0x20>)
1000568e:	0005      	movs	r5, r0
10005690:	0008      	movs	r0, r1
10005692:	6023      	str	r3, [r4, #0]
10005694:	f000 fa55 	bl	10005b42 <_isatty>
10005698:	1c43      	adds	r3, r0, #1
1000569a:	d000      	beq.n	1000569e <_isatty_r+0x16>
1000569c:	bd70      	pop	{r4, r5, r6, pc}
1000569e:	6823      	ldr	r3, [r4, #0]
100056a0:	2b00      	cmp	r3, #0
100056a2:	d0fb      	beq.n	1000569c <_isatty_r+0x14>
100056a4:	602b      	str	r3, [r5, #0]
100056a6:	e7f9      	b.n	1000569c <_isatty_r+0x14>
100056a8:	20000c5c 	.word	0x20000c5c

100056ac <_lseek_r>:
100056ac:	b570      	push	{r4, r5, r6, lr}
100056ae:	0004      	movs	r4, r0
100056b0:	0008      	movs	r0, r1
100056b2:	0011      	movs	r1, r2
100056b4:	001a      	movs	r2, r3
100056b6:	2300      	movs	r3, #0
100056b8:	4d05      	ldr	r5, [pc, #20]	; (100056d0 <_lseek_r+0x24>)
100056ba:	602b      	str	r3, [r5, #0]
100056bc:	f000 fa3f 	bl	10005b3e <_lseek>
100056c0:	1c43      	adds	r3, r0, #1
100056c2:	d000      	beq.n	100056c6 <_lseek_r+0x1a>
100056c4:	bd70      	pop	{r4, r5, r6, pc}
100056c6:	682b      	ldr	r3, [r5, #0]
100056c8:	2b00      	cmp	r3, #0
100056ca:	d0fb      	beq.n	100056c4 <_lseek_r+0x18>
100056cc:	6023      	str	r3, [r4, #0]
100056ce:	e7f9      	b.n	100056c4 <_lseek_r+0x18>
100056d0:	20000c5c 	.word	0x20000c5c

100056d4 <__ascii_mbtowc>:
100056d4:	b082      	sub	sp, #8
100056d6:	2900      	cmp	r1, #0
100056d8:	d00a      	beq.n	100056f0 <__ascii_mbtowc+0x1c>
100056da:	2a00      	cmp	r2, #0
100056dc:	d00b      	beq.n	100056f6 <__ascii_mbtowc+0x22>
100056de:	2b00      	cmp	r3, #0
100056e0:	d00b      	beq.n	100056fa <__ascii_mbtowc+0x26>
100056e2:	7813      	ldrb	r3, [r2, #0]
100056e4:	600b      	str	r3, [r1, #0]
100056e6:	7810      	ldrb	r0, [r2, #0]
100056e8:	1e43      	subs	r3, r0, #1
100056ea:	4198      	sbcs	r0, r3
100056ec:	b002      	add	sp, #8
100056ee:	4770      	bx	lr
100056f0:	a901      	add	r1, sp, #4
100056f2:	2a00      	cmp	r2, #0
100056f4:	d1f3      	bne.n	100056de <__ascii_mbtowc+0xa>
100056f6:	2000      	movs	r0, #0
100056f8:	e7f8      	b.n	100056ec <__ascii_mbtowc+0x18>
100056fa:	2002      	movs	r0, #2
100056fc:	4240      	negs	r0, r0
100056fe:	e7f5      	b.n	100056ec <__ascii_mbtowc+0x18>

10005700 <_read_r>:
10005700:	b570      	push	{r4, r5, r6, lr}
10005702:	0004      	movs	r4, r0
10005704:	0008      	movs	r0, r1
10005706:	0011      	movs	r1, r2
10005708:	001a      	movs	r2, r3
1000570a:	2300      	movs	r3, #0
1000570c:	4d05      	ldr	r5, [pc, #20]	; (10005724 <_read_r+0x24>)
1000570e:	602b      	str	r3, [r5, #0]
10005710:	f000 fa06 	bl	10005b20 <_read>
10005714:	1c43      	adds	r3, r0, #1
10005716:	d000      	beq.n	1000571a <_read_r+0x1a>
10005718:	bd70      	pop	{r4, r5, r6, pc}
1000571a:	682b      	ldr	r3, [r5, #0]
1000571c:	2b00      	cmp	r3, #0
1000571e:	d0fb      	beq.n	10005718 <_read_r+0x18>
10005720:	6023      	str	r3, [r4, #0]
10005722:	e7f9      	b.n	10005718 <_read_r+0x18>
10005724:	20000c5c 	.word	0x20000c5c

10005728 <__ascii_wctomb>:
10005728:	2900      	cmp	r1, #0
1000572a:	d009      	beq.n	10005740 <__ascii_wctomb+0x18>
1000572c:	2aff      	cmp	r2, #255	; 0xff
1000572e:	d802      	bhi.n	10005736 <__ascii_wctomb+0xe>
10005730:	2001      	movs	r0, #1
10005732:	700a      	strb	r2, [r1, #0]
10005734:	4770      	bx	lr
10005736:	238a      	movs	r3, #138	; 0x8a
10005738:	6003      	str	r3, [r0, #0]
1000573a:	2001      	movs	r0, #1
1000573c:	4240      	negs	r0, r0
1000573e:	e7f9      	b.n	10005734 <__ascii_wctomb+0xc>
10005740:	2000      	movs	r0, #0
10005742:	e7f7      	b.n	10005734 <__ascii_wctomb+0xc>

10005744 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10005744:	4770      	bx	lr

10005746 <z_impl_gpio_pin_interrupt_configure>:
{
10005746:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
10005748:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
1000574a:	6903      	ldr	r3, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
1000574c:	0215      	lsls	r5, r2, #8
1000574e:	d507      	bpl.n	10005760 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
10005750:	681d      	ldr	r5, [r3, #0]
10005752:	2301      	movs	r3, #1
10005754:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
10005756:	422b      	tst	r3, r5
10005758:	d002      	beq.n	10005760 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
1000575a:	23c0      	movs	r3, #192	; 0xc0
1000575c:	04db      	lsls	r3, r3, #19
1000575e:	405a      	eors	r2, r3
	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
10005760:	23c0      	movs	r3, #192	; 0xc0
10005762:	04db      	lsls	r3, r3, #19
10005764:	4013      	ands	r3, r2
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));
10005766:	25b0      	movs	r5, #176	; 0xb0
10005768:	046d      	lsls	r5, r5, #17
1000576a:	402a      	ands	r2, r5
	return api->pin_interrupt_configure(port, pin, mode, trig);
1000576c:	69a4      	ldr	r4, [r4, #24]
1000576e:	47a0      	blx	r4
}
10005770:	bd70      	pop	{r4, r5, r6, pc}

10005772 <gpio_pin_interrupt_configure_dt>:
{
10005772:	b510      	push	{r4, lr}
10005774:	0003      	movs	r3, r0
10005776:	000a      	movs	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
10005778:	6800      	ldr	r0, [r0, #0]
1000577a:	7919      	ldrb	r1, [r3, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
1000577c:	f7ff ffe3 	bl	10005746 <z_impl_gpio_pin_interrupt_configure>
}
10005780:	bd10      	pop	{r4, pc}

10005782 <gpio_pin_configure_dt>:
{
10005782:	b510      	push	{r4, lr}
10005784:	0003      	movs	r3, r0
10005786:	000c      	movs	r4, r1
	return gpio_pin_configure(spec->port,
10005788:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
1000578a:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
1000578c:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
1000578e:	4322      	orrs	r2, r4
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
10005790:	f7fa fe78 	bl	10000484 <z_impl_gpio_pin_configure>
}
10005794:	bd10      	pop	{r4, pc}

10005796 <gpio_pin_set_raw>:
{
10005796:	b510      	push	{r4, lr}
	if (value != 0)	{
10005798:	2a00      	cmp	r2, #0
1000579a:	d006      	beq.n	100057aa <gpio_pin_set_raw+0x14>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
1000579c:	2301      	movs	r3, #1
1000579e:	408b      	lsls	r3, r1
100057a0:	0019      	movs	r1, r3
	const struct gpio_driver_api *api =
100057a2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
100057a4:	68db      	ldr	r3, [r3, #12]
100057a6:	4798      	blx	r3
}
100057a8:	bd10      	pop	{r4, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
100057aa:	2301      	movs	r3, #1
100057ac:	408b      	lsls	r3, r1
100057ae:	0019      	movs	r1, r3
	const struct gpio_driver_api *api =
100057b0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
100057b2:	691b      	ldr	r3, [r3, #16]
100057b4:	4798      	blx	r3
	return ret;
100057b6:	e7f7      	b.n	100057a8 <gpio_pin_set_raw+0x12>

100057b8 <gpio_pin_set>:
{
100057b8:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
100057ba:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
100057bc:	681c      	ldr	r4, [r3, #0]
100057be:	2301      	movs	r3, #1
100057c0:	408b      	lsls	r3, r1
100057c2:	4223      	tst	r3, r4
100057c4:	d002      	beq.n	100057cc <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
100057c6:	4253      	negs	r3, r2
100057c8:	415a      	adcs	r2, r3
100057ca:	b2d2      	uxtb	r2, r2
	return gpio_pin_set_raw(port, pin, value);
100057cc:	f7ff ffe3 	bl	10005796 <gpio_pin_set_raw>
}
100057d0:	bd10      	pop	{r4, pc}

100057d2 <gpio_pin_toggle_dt>:
{
100057d2:	b510      	push	{r4, lr}
100057d4:	0003      	movs	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
100057d6:	6800      	ldr	r0, [r0, #0]
100057d8:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
100057da:	2101      	movs	r1, #1
100057dc:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
100057de:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
100057e0:	695b      	ldr	r3, [r3, #20]
100057e2:	4798      	blx	r3
}
100057e4:	bd10      	pop	{r4, pc}

100057e6 <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
100057e6:	b510      	push	{r4, lr}
	const struct gpio_driver_api *api =
100057e8:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
100057ea:	69db      	ldr	r3, [r3, #28]
100057ec:	2b00      	cmp	r3, #0
100057ee:	d002      	beq.n	100057f6 <gpio_add_callback+0x10>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
100057f0:	2201      	movs	r2, #1
100057f2:	4798      	blx	r3
}
100057f4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
100057f6:	2086      	movs	r0, #134	; 0x86
100057f8:	4240      	negs	r0, r0
100057fa:	e7fb      	b.n	100057f4 <gpio_add_callback+0xe>

100057fc <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
100057fc:	b570      	push	{r4, r5, r6, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
100057fe:	2800      	cmp	r0, #0
10005800:	db0f      	blt.n	10005822 <k_msleep+0x26>
10005802:	0004      	movs	r4, r0
10005804:	17c0      	asrs	r0, r0, #31
10005806:	0005      	movs	r5, r0
			return t * ((uint64_t)to_hz / from_hz);
10005808:	0fa1      	lsrs	r1, r4, #30
1000580a:	0083      	lsls	r3, r0, #2
1000580c:	430b      	orrs	r3, r1
1000580e:	00a2      	lsls	r2, r4, #2
10005810:	1912      	adds	r2, r2, r4
10005812:	416b      	adcs	r3, r5
10005814:	1892      	adds	r2, r2, r2
10005816:	415b      	adcs	r3, r3
	return z_impl_k_sleep(timeout);
10005818:	0010      	movs	r0, r2
1000581a:	0019      	movs	r1, r3
1000581c:	f7fd fa28 	bl	10002c70 <z_impl_k_sleep>
}
10005820:	bd70      	pop	{r4, r5, r6, pc}
	return k_sleep(Z_TIMEOUT_MS(ms));
10005822:	2000      	movs	r0, #0
10005824:	e7ed      	b.n	10005802 <k_msleep+0x6>

10005826 <arch_printk_char_out>:
}
10005826:	2000      	movs	r0, #0
10005828:	4770      	bx	lr

1000582a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
1000582a:	b40f      	push	{r0, r1, r2, r3}
1000582c:	b500      	push	{lr}
1000582e:	b083      	sub	sp, #12
10005830:	a904      	add	r1, sp, #16
10005832:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10005834:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
10005836:	f7fa ff3d 	bl	100006b4 <vprintk>

	va_end(ap);
}
1000583a:	b003      	add	sp, #12
1000583c:	bc08      	pop	{r3}
1000583e:	b004      	add	sp, #16
10005840:	4718      	bx	r3

10005842 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10005842:	b510      	push	{r4, lr}
10005844:	0004      	movs	r4, r0
10005846:	0008      	movs	r0, r1
10005848:	0011      	movs	r1, r2
1000584a:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
1000584c:	47a0      	blx	r4
	return z_impl_z_current_get();
1000584e:	f7fd fa27 	bl	10002ca0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10005852:	f7fb fd2f 	bl	100012b4 <z_impl_k_thread_abort>

10005856 <extract_width>:
{
10005856:	b530      	push	{r4, r5, lr}
10005858:	b083      	sub	sp, #12
1000585a:	0004      	movs	r4, r0
1000585c:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
1000585e:	7802      	ldrb	r2, [r0, #0]
10005860:	2380      	movs	r3, #128	; 0x80
10005862:	425b      	negs	r3, r3
10005864:	4313      	orrs	r3, r2
10005866:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
10005868:	000d      	movs	r5, r1
1000586a:	780b      	ldrb	r3, [r1, #0]
1000586c:	2b2a      	cmp	r3, #42	; 0x2a
1000586e:	d01b      	beq.n	100058a8 <extract_width+0x52>
	size_t width = extract_decimal(&sp);
10005870:	a801      	add	r0, sp, #4
10005872:	f7fa ff2d 	bl	100006d0 <extract_decimal>
	if (sp != wp) {
10005876:	9b01      	ldr	r3, [sp, #4]
10005878:	429d      	cmp	r5, r3
1000587a:	d012      	beq.n	100058a2 <extract_width+0x4c>
		conv->width_present = true;
1000587c:	7822      	ldrb	r2, [r4, #0]
1000587e:	2380      	movs	r3, #128	; 0x80
10005880:	425b      	negs	r3, r3
10005882:	4313      	orrs	r3, r2
10005884:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
10005886:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
10005888:	b2db      	uxtb	r3, r3
1000588a:	079b      	lsls	r3, r3, #30
1000588c:	0fdb      	lsrs	r3, r3, #31
				      || (width != (size_t)conv->width_value));
1000588e:	2800      	cmp	r0, #0
10005890:	db12      	blt.n	100058b8 <extract_width+0x62>
10005892:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
10005894:	4313      	orrs	r3, r2
10005896:	005b      	lsls	r3, r3, #1
10005898:	7822      	ldrb	r2, [r4, #0]
1000589a:	2102      	movs	r1, #2
1000589c:	438a      	bics	r2, r1
1000589e:	4313      	orrs	r3, r2
100058a0:	7023      	strb	r3, [r4, #0]
	return sp;
100058a2:	9801      	ldr	r0, [sp, #4]
}
100058a4:	b003      	add	sp, #12
100058a6:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
100058a8:	7843      	ldrb	r3, [r0, #1]
100058aa:	2201      	movs	r2, #1
100058ac:	4313      	orrs	r3, r2
100058ae:	7043      	strb	r3, [r0, #1]
		return ++sp;
100058b0:	0008      	movs	r0, r1
100058b2:	3001      	adds	r0, #1
100058b4:	9001      	str	r0, [sp, #4]
100058b6:	e7f5      	b.n	100058a4 <extract_width+0x4e>
				      || (width != (size_t)conv->width_value));
100058b8:	2201      	movs	r2, #1
100058ba:	e7eb      	b.n	10005894 <extract_width+0x3e>

100058bc <extract_prec>:
{
100058bc:	b510      	push	{r4, lr}
100058be:	b082      	sub	sp, #8
100058c0:	0004      	movs	r4, r0
100058c2:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
100058c4:	780b      	ldrb	r3, [r1, #0]
100058c6:	3b2e      	subs	r3, #46	; 0x2e
100058c8:	425a      	negs	r2, r3
100058ca:	4153      	adcs	r3, r2
100058cc:	0059      	lsls	r1, r3, #1
100058ce:	7842      	ldrb	r2, [r0, #1]
100058d0:	2002      	movs	r0, #2
100058d2:	4382      	bics	r2, r0
100058d4:	430a      	orrs	r2, r1
100058d6:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
100058d8:	2b00      	cmp	r3, #0
100058da:	d019      	beq.n	10005910 <extract_prec+0x54>
	++sp;
100058dc:	9b01      	ldr	r3, [sp, #4]
100058de:	1c5a      	adds	r2, r3, #1
100058e0:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
100058e2:	785b      	ldrb	r3, [r3, #1]
100058e4:	2b2a      	cmp	r3, #42	; 0x2a
100058e6:	d015      	beq.n	10005914 <extract_prec+0x58>
	size_t prec = extract_decimal(&sp);
100058e8:	a801      	add	r0, sp, #4
100058ea:	f7fa fef1 	bl	100006d0 <extract_decimal>
	conv->prec_value = prec;
100058ee:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
100058f0:	7823      	ldrb	r3, [r4, #0]
100058f2:	079b      	lsls	r3, r3, #30
100058f4:	0fdb      	lsrs	r3, r3, #31
			      || (prec != (size_t)conv->prec_value));
100058f6:	2800      	cmp	r0, #0
100058f8:	db14      	blt.n	10005924 <extract_prec+0x68>
100058fa:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
100058fc:	4313      	orrs	r3, r2
100058fe:	005b      	lsls	r3, r3, #1
10005900:	7822      	ldrb	r2, [r4, #0]
10005902:	2102      	movs	r1, #2
10005904:	438a      	bics	r2, r1
10005906:	4313      	orrs	r3, r2
10005908:	7023      	strb	r3, [r4, #0]
	return sp;
1000590a:	9801      	ldr	r0, [sp, #4]
}
1000590c:	b002      	add	sp, #8
1000590e:	bd10      	pop	{r4, pc}
		return sp;
10005910:	9801      	ldr	r0, [sp, #4]
10005912:	e7fb      	b.n	1000590c <extract_prec+0x50>
		conv->prec_star = true;
10005914:	7863      	ldrb	r3, [r4, #1]
10005916:	2204      	movs	r2, #4
10005918:	4313      	orrs	r3, r2
1000591a:	7063      	strb	r3, [r4, #1]
		return ++sp;
1000591c:	9801      	ldr	r0, [sp, #4]
1000591e:	3001      	adds	r0, #1
10005920:	9001      	str	r0, [sp, #4]
10005922:	e7f3      	b.n	1000590c <extract_prec+0x50>
			      || (prec != (size_t)conv->prec_value));
10005924:	2201      	movs	r2, #1
10005926:	e7e9      	b.n	100058fc <extract_prec+0x40>

10005928 <extract_conversion>:
{
10005928:	b570      	push	{r4, r5, r6, lr}
1000592a:	0005      	movs	r5, r0
1000592c:	000c      	movs	r4, r1
	*conv = (struct conversion) {
1000592e:	220c      	movs	r2, #12
10005930:	2100      	movs	r1, #0
10005932:	f7fd fea3 	bl	1000367c <memset>
	++sp;
10005936:	1c61      	adds	r1, r4, #1
	if (*sp == '%') {
10005938:	7863      	ldrb	r3, [r4, #1]
1000593a:	2b25      	cmp	r3, #37	; 0x25
1000593c:	d013      	beq.n	10005966 <extract_conversion+0x3e>
	sp = extract_flags(conv, sp);
1000593e:	0028      	movs	r0, r5
10005940:	f7fa feda 	bl	100006f8 <extract_flags>
10005944:	0001      	movs	r1, r0
	sp = extract_width(conv, sp);
10005946:	0028      	movs	r0, r5
10005948:	f7ff ff85 	bl	10005856 <extract_width>
1000594c:	0001      	movs	r1, r0
	sp = extract_prec(conv, sp);
1000594e:	0028      	movs	r0, r5
10005950:	f7ff ffb4 	bl	100058bc <extract_prec>
10005954:	0001      	movs	r1, r0
	sp = extract_length(conv, sp);
10005956:	0028      	movs	r0, r5
10005958:	f7fa ff08 	bl	1000076c <extract_length>
1000595c:	0001      	movs	r1, r0
	sp = extract_specifier(conv, sp);
1000595e:	0028      	movs	r0, r5
10005960:	f7fa ff62 	bl	10000828 <extract_specifier>
}
10005964:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier = *sp++;
10005966:	1ca0      	adds	r0, r4, #2
10005968:	70eb      	strb	r3, [r5, #3]
		return sp;
1000596a:	e7fb      	b.n	10005964 <extract_conversion+0x3c>

1000596c <conversion_radix>:
	switch (specifier) {
1000596c:	286f      	cmp	r0, #111	; 0x6f
1000596e:	d00c      	beq.n	1000598a <conversion_radix+0x1e>
10005970:	d905      	bls.n	1000597e <conversion_radix+0x12>
10005972:	2870      	cmp	r0, #112	; 0x70
10005974:	d00b      	beq.n	1000598e <conversion_radix+0x22>
10005976:	2878      	cmp	r0, #120	; 0x78
10005978:	d10b      	bne.n	10005992 <conversion_radix+0x26>
		return 16;
1000597a:	3868      	subs	r0, #104	; 0x68
}
1000597c:	4770      	bx	lr
	switch (specifier) {
1000597e:	2858      	cmp	r0, #88	; 0x58
10005980:	d001      	beq.n	10005986 <conversion_radix+0x1a>
10005982:	200a      	movs	r0, #10
10005984:	e7fa      	b.n	1000597c <conversion_radix+0x10>
		return 16;
10005986:	3848      	subs	r0, #72	; 0x48
10005988:	e7f8      	b.n	1000597c <conversion_radix+0x10>
		return 8;
1000598a:	2008      	movs	r0, #8
1000598c:	e7f6      	b.n	1000597c <conversion_radix+0x10>
		return 16;
1000598e:	2010      	movs	r0, #16
10005990:	e7f4      	b.n	1000597c <conversion_radix+0x10>
	switch (specifier) {
10005992:	200a      	movs	r0, #10
10005994:	e7f2      	b.n	1000597c <conversion_radix+0x10>

10005996 <outs>:
{
10005996:	b5f0      	push	{r4, r5, r6, r7, lr}
10005998:	46c6      	mov	lr, r8
1000599a:	b500      	push	{lr}
1000599c:	0007      	movs	r7, r0
1000599e:	000e      	movs	r6, r1
100059a0:	4698      	mov	r8, r3
	size_t count = 0;
100059a2:	2400      	movs	r4, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100059a4:	e007      	b.n	100059b6 <outs+0x20>
		int rc = out((int)*sp++, ctx);
100059a6:	1c55      	adds	r5, r2, #1
100059a8:	7810      	ldrb	r0, [r2, #0]
100059aa:	0031      	movs	r1, r6
100059ac:	47b8      	blx	r7
		if (rc < 0) {
100059ae:	2800      	cmp	r0, #0
100059b0:	db0a      	blt.n	100059c8 <outs+0x32>
		++count;
100059b2:	3401      	adds	r4, #1
		int rc = out((int)*sp++, ctx);
100059b4:	002a      	movs	r2, r5
	while ((sp < ep) || ((ep == NULL) && *sp)) {
100059b6:	4542      	cmp	r2, r8
100059b8:	d3f5      	bcc.n	100059a6 <outs+0x10>
100059ba:	4643      	mov	r3, r8
100059bc:	2b00      	cmp	r3, #0
100059be:	d102      	bne.n	100059c6 <outs+0x30>
100059c0:	7813      	ldrb	r3, [r2, #0]
100059c2:	2b00      	cmp	r3, #0
100059c4:	d1ef      	bne.n	100059a6 <outs+0x10>
	return (int)count;
100059c6:	0020      	movs	r0, r4
}
100059c8:	bc80      	pop	{r7}
100059ca:	46b8      	mov	r8, r7
100059cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

100059ce <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
100059ce:	4770      	bx	lr

100059d0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100059d0:	b510      	push	{r4, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
100059d2:	f000 ff6f 	bl	100068b4 <z_fatal_error>
}
100059d6:	bd10      	pop	{r4, pc}

100059d8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
100059d8:	b510      	push	{r4, lr}
100059da:	0001      	movs	r1, r0
#if !(defined(CONFIG_EXTRA_EXCEPTION_INFO) && defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE))
	ARG_UNUSED(callee_regs);
#endif
	/* Stacked R0 holds the exception reason. */
	unsigned int reason = esf->basic.r0;
100059dc:	6800      	ldr	r0, [r0, #0]
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
100059de:	f7ff fff7 	bl	100059d0 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
100059e2:	bd10      	pop	{r4, pc}

100059e4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
100059e4:	b510      	push	{r4, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
100059e6:	b240      	sxtb	r0, r0
100059e8:	f7fb fac0 	bl	10000f6c <__NVIC_SetPriority>
}
100059ec:	bd10      	pop	{r4, pc}

100059ee <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
100059ee:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
100059f0:	2100      	movs	r1, #0
100059f2:	2001      	movs	r0, #1
100059f4:	f7ff ffec 	bl	100059d0 <z_arm_fatal_error>
}
100059f8:	bd10      	pop	{r4, pc}

100059fa <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
100059fa:	b510      	push	{r4, lr}
	handler();
100059fc:	f7fb faf2 	bl	10000fe4 <z_SysNmiOnReset>
	z_arm_int_exit();
10005a00:	f7fb fb9e 	bl	10001140 <z_arm_exc_exit>
}
10005a04:	bd10      	pop	{r4, pc}

10005a06 <memory_fault_recoverable>:
}
10005a06:	2000      	movs	r0, #0
10005a08:	4770      	bx	lr

10005a0a <fault_handle>:
{
10005a0a:	b510      	push	{r4, lr}
	*recoverable = false;
10005a0c:	2300      	movs	r3, #0
10005a0e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
10005a10:	2903      	cmp	r1, #3
10005a12:	d001      	beq.n	10005a18 <fault_handle+0xe>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10005a14:	2000      	movs	r0, #0
}
10005a16:	bd10      	pop	{r4, pc}
		reason = hard_fault(esf, recoverable);
10005a18:	0011      	movs	r1, r2
10005a1a:	f7fb fba1 	bl	10001160 <hard_fault>
		break;
10005a1e:	e7fa      	b.n	10005a16 <fault_handle+0xc>

10005a20 <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10005a20:	4770      	bx	lr

10005a22 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10005a22:	b510      	push	{r4, lr}
	int irq = 0;
10005a24:	2400      	movs	r4, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10005a26:	e004      	b.n	10005a32 <z_arm_interrupt_init+0x10>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
10005a28:	b260      	sxtb	r0, r4
10005a2a:	2100      	movs	r1, #0
10005a2c:	f7fb fbfe 	bl	1000122c <__NVIC_SetPriority>
	for (; irq < CONFIG_NUM_IRQS; irq++) {
10005a30:	3401      	adds	r4, #1
10005a32:	2c19      	cmp	r4, #25
10005a34:	ddf8      	ble.n	10005a28 <z_arm_interrupt_init+0x6>
	}
}
10005a36:	bd10      	pop	{r4, pc}

10005a38 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
10005a38:	6843      	ldr	r3, [r0, #4]
10005a3a:	1e5a      	subs	r2, r3, #1
		&&
10005a3c:	421a      	tst	r2, r3
10005a3e:	d106      	bne.n	10005a4e <mpu_partition_is_valid+0x16>
		&&
10005a40:	2bff      	cmp	r3, #255	; 0xff
10005a42:	d906      	bls.n	10005a52 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
10005a44:	6803      	ldr	r3, [r0, #0]
		&&
10005a46:	4213      	tst	r3, r2
10005a48:	d005      	beq.n	10005a56 <mpu_partition_is_valid+0x1e>
10005a4a:	2000      	movs	r0, #0
10005a4c:	e000      	b.n	10005a50 <mpu_partition_is_valid+0x18>
10005a4e:	2000      	movs	r0, #0
}
10005a50:	4770      	bx	lr
		&&
10005a52:	2000      	movs	r0, #0
10005a54:	e7fc      	b.n	10005a50 <mpu_partition_is_valid+0x18>
10005a56:	2001      	movs	r0, #1
	return partition_is_valid;
10005a58:	e7fa      	b.n	10005a50 <mpu_partition_is_valid+0x18>

10005a5a <region_allocate_and_init>:
{
10005a5a:	b510      	push	{r4, lr}
10005a5c:	0004      	movs	r4, r0
	if (index > (get_num_regions() - 1U)) {
10005a5e:	2807      	cmp	r0, #7
10005a60:	d803      	bhi.n	10005a6a <region_allocate_and_init+0x10>
	region_init(index, region_conf);
10005a62:	f7fb fc53 	bl	1000130c <region_init>
	return index;
10005a66:	0020      	movs	r0, r4
}
10005a68:	bd10      	pop	{r4, pc}
		return -EINVAL;
10005a6a:	2016      	movs	r0, #22
10005a6c:	4240      	negs	r0, r0
10005a6e:	e7fb      	b.n	10005a68 <region_allocate_and_init+0xe>

10005a70 <mpu_configure_region>:
{
10005a70:	b530      	push	{r4, r5, lr}
10005a72:	b085      	sub	sp, #20
10005a74:	0004      	movs	r4, r0
	region_conf.base = new_region->start;
10005a76:	680b      	ldr	r3, [r1, #0]
10005a78:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
10005a7a:	6848      	ldr	r0, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
10005a7c:	688d      	ldr	r5, [r1, #8]
	if (size <= 32U) {
10005a7e:	2820      	cmp	r0, #32
10005a80:	d913      	bls.n	10005aaa <mpu_configure_region+0x3a>
	if (size > (1UL << 31)) {
10005a82:	2280      	movs	r2, #128	; 0x80
10005a84:	0612      	lsls	r2, r2, #24
10005a86:	4290      	cmp	r0, r2
10005a88:	d811      	bhi.n	10005aae <mpu_configure_region+0x3e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
10005a8a:	3801      	subs	r0, #1
10005a8c:	f7fa fc28 	bl	100002e0 <__clzsi2>
10005a90:	231f      	movs	r3, #31
10005a92:	1a18      	subs	r0, r3, r0
10005a94:	0040      	lsls	r0, r0, #1
10005a96:	331f      	adds	r3, #31
10005a98:	4003      	ands	r3, r0
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
10005a9a:	432b      	orrs	r3, r5
10005a9c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
10005a9e:	a901      	add	r1, sp, #4
10005aa0:	0020      	movs	r0, r4
10005aa2:	f7ff ffda 	bl	10005a5a <region_allocate_and_init>
}
10005aa6:	b005      	add	sp, #20
10005aa8:	bd30      	pop	{r4, r5, pc}
		return REGION_32B;
10005aaa:	2308      	movs	r3, #8
10005aac:	e7f5      	b.n	10005a9a <mpu_configure_region+0x2a>
		return REGION_4G;
10005aae:	233e      	movs	r3, #62	; 0x3e
10005ab0:	e7f3      	b.n	10005a9a <mpu_configure_region+0x2a>

10005ab2 <mpu_configure_regions>:
{
10005ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005ab4:	46ce      	mov	lr, r9
10005ab6:	4647      	mov	r7, r8
10005ab8:	b580      	push	{r7, lr}
10005aba:	4680      	mov	r8, r0
10005abc:	000f      	movs	r7, r1
10005abe:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
10005ac0:	0015      	movs	r5, r2
	for (i = 0; i < regions_num; i++) {
10005ac2:	2600      	movs	r6, #0
10005ac4:	e009      	b.n	10005ada <mpu_configure_regions+0x28>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
10005ac6:	b2e8      	uxtb	r0, r5
10005ac8:	0021      	movs	r1, r4
10005aca:	f7ff ffd1 	bl	10005a70 <mpu_configure_region>
10005ace:	0005      	movs	r5, r0
		if (reg_index == -EINVAL) {
10005ad0:	0003      	movs	r3, r0
10005ad2:	3316      	adds	r3, #22
10005ad4:	d014      	beq.n	10005b00 <mpu_configure_regions+0x4e>
		reg_index++;
10005ad6:	3501      	adds	r5, #1
	for (i = 0; i < regions_num; i++) {
10005ad8:	3601      	adds	r6, #1
10005ada:	42be      	cmp	r6, r7
10005adc:	da10      	bge.n	10005b00 <mpu_configure_regions+0x4e>
		if (regions[i].size == 0U) {
10005ade:	0074      	lsls	r4, r6, #1
10005ae0:	19a4      	adds	r4, r4, r6
10005ae2:	00a4      	lsls	r4, r4, #2
10005ae4:	4444      	add	r4, r8
10005ae6:	6863      	ldr	r3, [r4, #4]
10005ae8:	2b00      	cmp	r3, #0
10005aea:	d0f5      	beq.n	10005ad8 <mpu_configure_regions+0x26>
		if (do_sanity_check &&
10005aec:	464b      	mov	r3, r9
10005aee:	2b00      	cmp	r3, #0
10005af0:	d0e9      	beq.n	10005ac6 <mpu_configure_regions+0x14>
				(!mpu_partition_is_valid(&regions[i]))) {
10005af2:	0020      	movs	r0, r4
10005af4:	f7ff ffa0 	bl	10005a38 <mpu_partition_is_valid>
		if (do_sanity_check &&
10005af8:	2800      	cmp	r0, #0
10005afa:	d1e4      	bne.n	10005ac6 <mpu_configure_regions+0x14>
			return -EINVAL;
10005afc:	2516      	movs	r5, #22
10005afe:	426d      	negs	r5, r5
}
10005b00:	0028      	movs	r0, r5
10005b02:	bcc0      	pop	{r6, r7}
10005b04:	46b9      	mov	r9, r7
10005b06:	46b0      	mov	r8, r6
10005b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10005b0a <arm_core_mpu_configure_static_mpu_regions>:
{
10005b0a:	b510      	push	{r4, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
10005b0c:	f7fb fc10 	bl	10001330 <mpu_configure_static_mpu_regions>
}
10005b10:	bd10      	pop	{r4, pc}

10005b12 <malloc_prepare>:
}
10005b12:	2000      	movs	r0, #0
10005b14:	4770      	bx	lr

10005b16 <_stdout_hook_default>:
	return EOF;
10005b16:	2001      	movs	r0, #1
}
10005b18:	4240      	negs	r0, r0
10005b1a:	4770      	bx	lr

10005b1c <_stdin_hook_default>:
}
10005b1c:	2000      	movs	r0, #0
10005b1e:	4770      	bx	lr

10005b20 <_read>:
{
10005b20:	b510      	push	{r4, lr}
10005b22:	0008      	movs	r0, r1
10005b24:	0011      	movs	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
10005b26:	f7fb fc47 	bl	100013b8 <z_impl_zephyr_read_stdin>
}
10005b2a:	bd10      	pop	{r4, pc}

10005b2c <_write>:
{
10005b2c:	b510      	push	{r4, lr}
10005b2e:	0008      	movs	r0, r1
10005b30:	0011      	movs	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
10005b32:	f7fb fc57 	bl	100013e4 <z_impl_zephyr_write_stdout>
}
10005b36:	bd10      	pop	{r4, pc}

10005b38 <_close>:
	return -1;
10005b38:	2001      	movs	r0, #1
}
10005b3a:	4240      	negs	r0, r0
10005b3c:	4770      	bx	lr

10005b3e <_lseek>:
}
10005b3e:	2000      	movs	r0, #0
10005b40:	4770      	bx	lr

10005b42 <_isatty>:
{
10005b42:	0003      	movs	r3, r0
	return file <= 2;
10005b44:	0fc0      	lsrs	r0, r0, #31
10005b46:	2202      	movs	r2, #2
10005b48:	2100      	movs	r1, #0
10005b4a:	429a      	cmp	r2, r3
10005b4c:	4148      	adcs	r0, r1
}
10005b4e:	4770      	bx	lr

10005b50 <_kill>:
}
10005b50:	2000      	movs	r0, #0
10005b52:	4770      	bx	lr

10005b54 <_getpid>:
}
10005b54:	2000      	movs	r0, #0
10005b56:	4770      	bx	lr

10005b58 <_fstat>:
	st->st_mode = S_IFCHR;
10005b58:	2380      	movs	r3, #128	; 0x80
10005b5a:	019b      	lsls	r3, r3, #6
10005b5c:	604b      	str	r3, [r1, #4]
}
10005b5e:	2000      	movs	r0, #0
10005b60:	4770      	bx	lr

10005b62 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
10005b62:	b510      	push	{r4, lr}
10005b64:	0004      	movs	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
10005b66:	2014      	movs	r0, #20
10005b68:	f7fd fa88 	bl	1000307c <malloc>
10005b6c:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
10005b6e:	f000 fef4 	bl	1000695a <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
10005b72:	bd10      	pop	{r4, pc}

10005b74 <__retarget_lock_close_recursive>:
#endif /* !CONFIG_USERSPACE */
}

/* Close dynamic recursive lock */
void __retarget_lock_close_recursive(_LOCK_T lock)
{
10005b74:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
#ifndef CONFIG_USERSPACE
	free(lock);
10005b76:	f7fd fa8b 	bl	10003090 <free>
#else
	k_object_release(lock);
#endif /* !CONFIG_USERSPACE */
}
10005b7a:	bd10      	pop	{r4, pc}

10005b7c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
10005b7c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
10005b7e:	2201      	movs	r2, #1
10005b80:	4252      	negs	r2, r2
10005b82:	17d3      	asrs	r3, r2, #31
10005b84:	f7fc fc00 	bl	10002388 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
10005b88:	bd10      	pop	{r4, pc}

10005b8a <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
10005b8a:	b510      	push	{r4, lr}
	return z_impl_k_mutex_unlock(mutex);
10005b8c:	f7fc fc80 	bl	10002490 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
10005b90:	bd10      	pop	{r4, pc}

10005b92 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
10005b92:	2900      	cmp	r1, #0
10005b94:	d007      	beq.n	10005ba6 <sys_slist_remove+0x14>
	return node->next;
10005b96:	6813      	ldr	r3, [r2, #0]
	parent->next = child;
10005b98:	600b      	str	r3, [r1, #0]
	return list->tail;
10005b9a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
10005b9c:	429a      	cmp	r2, r3
10005b9e:	d009      	beq.n	10005bb4 <sys_slist_remove+0x22>
	parent->next = child;
10005ba0:	2300      	movs	r3, #0
10005ba2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
10005ba4:	4770      	bx	lr
	return node->next;
10005ba6:	6813      	ldr	r3, [r2, #0]
	list->head = node;
10005ba8:	6003      	str	r3, [r0, #0]
	return list->tail;
10005baa:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
10005bac:	428a      	cmp	r2, r1
10005bae:	d1f7      	bne.n	10005ba0 <sys_slist_remove+0xe>
	list->tail = node;
10005bb0:	6043      	str	r3, [r0, #4]
}
10005bb2:	e7f5      	b.n	10005ba0 <sys_slist_remove+0xe>
	list->tail = node;
10005bb4:	6041      	str	r1, [r0, #4]
}
10005bb6:	e7f3      	b.n	10005ba0 <sys_slist_remove+0xe>

10005bb8 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005bb8:	b510      	push	{r4, lr}
10005bba:	000a      	movs	r2, r1
	return list->head;
10005bbc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10005bbe:	2100      	movs	r1, #0
10005bc0:	e001      	b.n	10005bc6 <sys_slist_find_and_remove+0xe>
10005bc2:	0019      	movs	r1, r3
10005bc4:	681b      	ldr	r3, [r3, #0]
10005bc6:	2b00      	cmp	r3, #0
10005bc8:	d005      	beq.n	10005bd6 <sys_slist_find_and_remove+0x1e>
10005bca:	4293      	cmp	r3, r2
10005bcc:	d1f9      	bne.n	10005bc2 <sys_slist_find_and_remove+0xa>
10005bce:	f7ff ffe0 	bl	10005b92 <sys_slist_remove>
10005bd2:	2001      	movs	r0, #1
10005bd4:	e000      	b.n	10005bd8 <sys_slist_find_and_remove+0x20>
10005bd6:	2000      	movs	r0, #0
10005bd8:	bd10      	pop	{r4, pc}

10005bda <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
10005bda:	b570      	push	{r4, r5, r6, lr}
10005bdc:	0004      	movs	r4, r0
10005bde:	000d      	movs	r5, r1
10005be0:	0016      	movs	r6, r2
	return list->head;
10005be2:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
10005be4:	2b00      	cmp	r3, #0
10005be6:	d007      	beq.n	10005bf8 <gpio_manage_callback+0x1e>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
10005be8:	f7ff ffe6 	bl	10005bb8 <sys_slist_find_and_remove>
10005bec:	2800      	cmp	r0, #0
10005bee:	d110      	bne.n	10005c12 <gpio_manage_callback+0x38>
			if (!set) {
10005bf0:	2e00      	cmp	r6, #0
10005bf2:	d103      	bne.n	10005bfc <gpio_manage_callback+0x22>
				return -EINVAL;
10005bf4:	3816      	subs	r0, #22
10005bf6:	e008      	b.n	10005c0a <gpio_manage_callback+0x30>
			}
		}
	} else if (!set) {
10005bf8:	2a00      	cmp	r2, #0
10005bfa:	d007      	beq.n	10005c0c <gpio_manage_callback+0x32>
10005bfc:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
10005bfe:	602b      	str	r3, [r5, #0]
	list->head = node;
10005c00:	6025      	str	r5, [r4, #0]
	return list->tail;
10005c02:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
10005c04:	2b00      	cmp	r3, #0
10005c06:	d008      	beq.n	10005c1a <gpio_manage_callback+0x40>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
10005c08:	2000      	movs	r0, #0
}
10005c0a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
10005c0c:	2016      	movs	r0, #22
10005c0e:	4240      	negs	r0, r0
10005c10:	e7fb      	b.n	10005c0a <gpio_manage_callback+0x30>
	if (set) {
10005c12:	2e00      	cmp	r6, #0
10005c14:	d1f2      	bne.n	10005bfc <gpio_manage_callback+0x22>
	return 0;
10005c16:	2000      	movs	r0, #0
10005c18:	e7f7      	b.n	10005c0a <gpio_manage_callback+0x30>
	list->tail = node;
10005c1a:	6065      	str	r5, [r4, #4]
10005c1c:	2000      	movs	r0, #0
}
10005c1e:	e7f4      	b.n	10005c0a <gpio_manage_callback+0x30>

10005c20 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
10005c20:	b570      	push	{r4, r5, r6, lr}
10005c22:	000e      	movs	r6, r1
10005c24:	0015      	movs	r5, r2
	return list->head;
10005c26:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10005c28:	2900      	cmp	r1, #0
10005c2a:	d006      	beq.n	10005c3a <gpio_fire_callbacks+0x1a>
	return node->next;
10005c2c:	680c      	ldr	r4, [r1, #0]
10005c2e:	2c00      	cmp	r4, #0
10005c30:	d008      	beq.n	10005c44 <gpio_fire_callbacks+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
10005c32:	2900      	cmp	r1, #0
10005c34:	d106      	bne.n	10005c44 <gpio_fire_callbacks+0x24>
10005c36:	000c      	movs	r4, r1
10005c38:	e004      	b.n	10005c44 <gpio_fire_callbacks+0x24>
10005c3a:	000c      	movs	r4, r1
10005c3c:	e002      	b.n	10005c44 <gpio_fire_callbacks+0x24>
10005c3e:	0023      	movs	r3, r4
10005c40:	0021      	movs	r1, r4
10005c42:	001c      	movs	r4, r3
10005c44:	2900      	cmp	r1, #0
10005c46:	d010      	beq.n	10005c6a <gpio_fire_callbacks+0x4a>
		if (cb->pin_mask & pins) {
10005c48:	688b      	ldr	r3, [r1, #8]
10005c4a:	002a      	movs	r2, r5
10005c4c:	401a      	ands	r2, r3
10005c4e:	421d      	tst	r5, r3
10005c50:	d002      	beq.n	10005c58 <gpio_fire_callbacks+0x38>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10005c52:	684b      	ldr	r3, [r1, #4]
10005c54:	0030      	movs	r0, r6
10005c56:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
10005c58:	2c00      	cmp	r4, #0
10005c5a:	d0f0      	beq.n	10005c3e <gpio_fire_callbacks+0x1e>
	return node->next;
10005c5c:	6823      	ldr	r3, [r4, #0]
10005c5e:	2b00      	cmp	r3, #0
10005c60:	d0ee      	beq.n	10005c40 <gpio_fire_callbacks+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
10005c62:	2c00      	cmp	r4, #0
10005c64:	d1ec      	bne.n	10005c40 <gpio_fire_callbacks+0x20>
10005c66:	0023      	movs	r3, r4
10005c68:	e7ea      	b.n	10005c40 <gpio_fire_callbacks+0x20>
		}
	}
}
10005c6a:	bd70      	pop	{r4, r5, r6, pc}

10005c6c <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10005c6c:	23d0      	movs	r3, #208	; 0xd0
10005c6e:	061b      	lsls	r3, r3, #24
10005c70:	685b      	ldr	r3, [r3, #4]
	*value = gpio_get_all();
10005c72:	600b      	str	r3, [r1, #0]
}
10005c74:	2000      	movs	r0, #0
10005c76:	4770      	bx	lr

10005c78 <gpio_rpi_port_set_masked_raw>:
 * corresponding bit in \p value, leaving other pins unchanged.
 * Since this uses the TOGL alias, it is concurrency-safe with e.g. an IRQ
 * bashing different pins from the same core.
 */
static inline void gpio_put_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
10005c78:	23d0      	movs	r3, #208	; 0xd0
10005c7a:	061b      	lsls	r3, r3, #24
10005c7c:	6918      	ldr	r0, [r3, #16]
10005c7e:	4042      	eors	r2, r0
10005c80:	400a      	ands	r2, r1
10005c82:	61da      	str	r2, [r3, #28]
}
10005c84:	2000      	movs	r0, #0
10005c86:	4770      	bx	lr

10005c88 <gpio_rpi_port_set_bits_raw>:
    sio_hw->gpio_set = mask;
10005c88:	23d0      	movs	r3, #208	; 0xd0
10005c8a:	061b      	lsls	r3, r3, #24
10005c8c:	6159      	str	r1, [r3, #20]
}
10005c8e:	2000      	movs	r0, #0
10005c90:	4770      	bx	lr

10005c92 <gpio_rpi_port_clear_bits_raw>:
    sio_hw->gpio_clr = mask;
10005c92:	23d0      	movs	r3, #208	; 0xd0
10005c94:	061b      	lsls	r3, r3, #24
10005c96:	6199      	str	r1, [r3, #24]
}
10005c98:	2000      	movs	r0, #0
10005c9a:	4770      	bx	lr

10005c9c <gpio_rpi_port_toggle_bits>:
    sio_hw->gpio_togl = mask;
10005c9c:	23d0      	movs	r3, #208	; 0xd0
10005c9e:	061b      	lsls	r3, r3, #24
10005ca0:	61d9      	str	r1, [r3, #28]
}
10005ca2:	2000      	movs	r0, #0
10005ca4:	4770      	bx	lr

10005ca6 <gpio_rpi_manage_callback>:
{
10005ca6:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
10005ca8:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&data->callbacks, callback, set);
10005caa:	3004      	adds	r0, #4
10005cac:	f7ff ff95 	bl	10005bda <gpio_manage_callback>
}
10005cb0:	bd10      	pop	{r4, pc}

10005cb2 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10005cb2:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;
10005cb4:	6843      	ldr	r3, [r0, #4]

	config->bank_config_func();
10005cb6:	685b      	ldr	r3, [r3, #4]
10005cb8:	4798      	blx	r3
	return 0;
}
10005cba:	2000      	movs	r0, #0
10005cbc:	bd10      	pop	{r4, pc}

10005cbe <gpio_rpi_pin_interrupt_configure>:
{
10005cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005cc0:	000c      	movs	r4, r1
10005cc2:	0016      	movs	r6, r2
10005cc4:	001d      	movs	r5, r3
	struct gpio_rpi_data *data = dev->data;
10005cc6:	6907      	ldr	r7, [r0, #16]
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10005cc8:	2200      	movs	r2, #0
10005cca:	210f      	movs	r1, #15
10005ccc:	0020      	movs	r0, r4
10005cce:	f7fc f91b 	bl	10001f08 <gpio_set_irq_enabled>
	if (mode != GPIO_INT_DISABLE) {
10005cd2:	2380      	movs	r3, #128	; 0x80
10005cd4:	039b      	lsls	r3, r3, #14
10005cd6:	429e      	cmp	r6, r3
10005cd8:	d017      	beq.n	10005d0a <gpio_rpi_pin_interrupt_configure+0x4c>
		if (mode & GPIO_INT_EDGE) {
10005cda:	01f6      	lsls	r6, r6, #7
10005cdc:	d51a      	bpl.n	10005d14 <gpio_rpi_pin_interrupt_configure+0x56>
			if (trig & GPIO_INT_LOW_0) {
10005cde:	2380      	movs	r3, #128	; 0x80
10005ce0:	049b      	lsls	r3, r3, #18
10005ce2:	0029      	movs	r1, r5
10005ce4:	4019      	ands	r1, r3
10005ce6:	421d      	tst	r5, r3
10005ce8:	d000      	beq.n	10005cec <gpio_rpi_pin_interrupt_configure+0x2e>
				events |= GPIO_IRQ_EDGE_FALL;
10005cea:	2104      	movs	r1, #4
			if (trig & GPIO_INT_HIGH_1) {
10005cec:	016d      	lsls	r5, r5, #5
10005cee:	d501      	bpl.n	10005cf4 <gpio_rpi_pin_interrupt_configure+0x36>
				events |= GPIO_IRQ_EDGE_RISE;
10005cf0:	2308      	movs	r3, #8
10005cf2:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
10005cf4:	2201      	movs	r2, #1
10005cf6:	0020      	movs	r0, r4
10005cf8:	f7fc f906 	bl	10001f08 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005cfc:	68fb      	ldr	r3, [r7, #12]
10005cfe:	2201      	movs	r2, #1
10005d00:	40a2      	lsls	r2, r4
10005d02:	4313      	orrs	r3, r2
10005d04:	60fb      	str	r3, [r7, #12]
}
10005d06:	2000      	movs	r0, #0
10005d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10005d0a:	68fb      	ldr	r3, [r7, #12]
10005d0c:	2201      	movs	r2, #1
10005d0e:	40a2      	lsls	r2, r4
10005d10:	4393      	bics	r3, r2
10005d12:	e7f7      	b.n	10005d04 <gpio_rpi_pin_interrupt_configure+0x46>
			if (trig & GPIO_INT_LOW_0) {
10005d14:	2380      	movs	r3, #128	; 0x80
10005d16:	049b      	lsls	r3, r3, #18
10005d18:	0029      	movs	r1, r5
10005d1a:	4019      	ands	r1, r3
10005d1c:	421d      	tst	r5, r3
10005d1e:	d000      	beq.n	10005d22 <gpio_rpi_pin_interrupt_configure+0x64>
				events |= GPIO_IRQ_LEVEL_LOW;
10005d20:	2101      	movs	r1, #1
			if (trig & GPIO_INT_HIGH_1) {
10005d22:	016d      	lsls	r5, r5, #5
10005d24:	d5e6      	bpl.n	10005cf4 <gpio_rpi_pin_interrupt_configure+0x36>
				events |= GPIO_IRQ_LEVEL_HIGH;
10005d26:	2302      	movs	r3, #2
10005d28:	4319      	orrs	r1, r3
10005d2a:	e7e3      	b.n	10005cf4 <gpio_rpi_pin_interrupt_configure+0x36>

10005d2c <gpio_rpi_configure>:
{
10005d2c:	b570      	push	{r4, r5, r6, lr}
10005d2e:	000d      	movs	r5, r1
10005d30:	0014      	movs	r4, r2
	if (flags & GPIO_SINGLE_ENDED) {
10005d32:	0793      	lsls	r3, r2, #30
10005d34:	d430      	bmi.n	10005d98 <gpio_rpi_configure+0x6c>
	gpio_set_function(pin, GPIO_FUNC_SIO);
10005d36:	2105      	movs	r1, #5
10005d38:	0028      	movs	r0, r5
10005d3a:	f7fc f86f 	bl	10001e1c <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10005d3e:	03a3      	lsls	r3, r4, #14
10005d40:	d512      	bpl.n	10005d68 <gpio_rpi_configure+0x3c>
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
10005d42:	2301      	movs	r3, #1
10005d44:	40ab      	lsls	r3, r5
    sio_hw->gpio_oe_set = mask;
10005d46:	22d0      	movs	r2, #208	; 0xd0
10005d48:	0612      	lsls	r2, r2, #24
10005d4a:	6253      	str	r3, [r2, #36]	; 0x24
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
10005d4c:	0322      	lsls	r2, r4, #12
10005d4e:	d504      	bpl.n	10005d5a <gpio_rpi_configure+0x2e>
    sio_hw->gpio_set = mask;
10005d50:	22d0      	movs	r2, #208	; 0xd0
10005d52:	0612      	lsls	r2, r2, #24
10005d54:	6153      	str	r3, [r2, #20]
	return 0;
10005d56:	2000      	movs	r0, #0
}
10005d58:	e009      	b.n	10005d6e <gpio_rpi_configure+0x42>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
10005d5a:	0364      	lsls	r4, r4, #13
10005d5c:	d51f      	bpl.n	10005d9e <gpio_rpi_configure+0x72>
    sio_hw->gpio_clr = mask;
10005d5e:	22d0      	movs	r2, #208	; 0xd0
10005d60:	0612      	lsls	r2, r2, #24
10005d62:	6193      	str	r3, [r2, #24]
	return 0;
10005d64:	2000      	movs	r0, #0
}
10005d66:	e002      	b.n	10005d6e <gpio_rpi_configure+0x42>
	} else if (flags & GPIO_INPUT) {
10005d68:	03e3      	lsls	r3, r4, #15
10005d6a:	d401      	bmi.n	10005d70 <gpio_rpi_configure+0x44>
	return 0;
10005d6c:	2000      	movs	r0, #0
}
10005d6e:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t mask = 1ul << gpio;
10005d70:	2301      	movs	r3, #1
10005d72:	40ab      	lsls	r3, r5
    sio_hw->gpio_oe_clr = mask;
10005d74:	22d0      	movs	r2, #208	; 0xd0
10005d76:	0612      	lsls	r2, r2, #24
10005d78:	6293      	str	r3, [r2, #40]	; 0x28
			(flags & GPIO_PULL_UP) != 0U,
10005d7a:	2110      	movs	r1, #16
10005d7c:	4021      	ands	r1, r4
			(flags & GPIO_PULL_DOWN) != 0U);
10005d7e:	2220      	movs	r2, #32
10005d80:	4022      	ands	r2, r4
		gpio_set_pulls(pin,
10005d82:	1e53      	subs	r3, r2, #1
10005d84:	419a      	sbcs	r2, r3
10005d86:	b2d2      	uxtb	r2, r2
10005d88:	1e4b      	subs	r3, r1, #1
10005d8a:	4199      	sbcs	r1, r3
10005d8c:	b2c9      	uxtb	r1, r1
10005d8e:	0028      	movs	r0, r5
10005d90:	f7fc f85c 	bl	10001e4c <gpio_set_pulls>
	return 0;
10005d94:	2000      	movs	r0, #0
10005d96:	e7ea      	b.n	10005d6e <gpio_rpi_configure+0x42>
		return -ENOTSUP;
10005d98:	2086      	movs	r0, #134	; 0x86
10005d9a:	4240      	negs	r0, r0
10005d9c:	e7e7      	b.n	10005d6e <gpio_rpi_configure+0x42>
	return 0;
10005d9e:	2000      	movs	r0, #0
10005da0:	e7e5      	b.n	10005d6e <gpio_rpi_configure+0x42>

10005da2 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
10005da2:	b510      	push	{r4, lr}
10005da4:	2200      	movs	r2, #0
10005da6:	2103      	movs	r1, #3
10005da8:	200d      	movs	r0, #13
10005daa:	f7ff fe1b 	bl	100059e4 <z_arm_irq_priority_set>
10005dae:	200d      	movs	r0, #13
10005db0:	f7fb f90c 	bl	10000fcc <arch_irq_enable>
10005db4:	bd10      	pop	{r4, pc}

10005db6 <i2c_dw_data_ask>:
{
10005db6:	b570      	push	{r4, r5, r6, lr}
	struct i2c_dw_dev_config * const dw = dev->data;
10005db8:	6903      	ldr	r3, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005dba:	6842      	ldr	r2, [r0, #4]
10005dbc:	6810      	ldr	r0, [r2, #0]
	if (dw->request_bytes == 0U) {
10005dbe:	2225      	movs	r2, #37	; 0x25
10005dc0:	5c9c      	ldrb	r4, [r3, r2]
10005dc2:	2c00      	cmp	r4, #0
10005dc4:	d023      	beq.n	10005e0e <i2c_dw_data_ask+0x58>
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
10005dc6:	0002      	movs	r2, r0
10005dc8:	32f4      	adds	r2, #244	; 0xf4
10005dca:	6812      	ldr	r2, [r2, #0]
	rx_buffer_depth = ic_comp_param_1.bits.rx_buffer_depth + 1;
10005dcc:	0411      	lsls	r1, r2, #16
10005dce:	0e09      	lsrs	r1, r1, #24
10005dd0:	3101      	adds	r1, #1
10005dd2:	b2c9      	uxtb	r1, r1
	tx_buffer_depth = ic_comp_param_1.bits.tx_buffer_depth + 1;
10005dd4:	0212      	lsls	r2, r2, #8
10005dd6:	0e12      	lsrs	r2, r2, #24
10005dd8:	3201      	adds	r2, #1
10005dda:	b2d5      	uxtb	r5, r2
10005ddc:	6f82      	ldr	r2, [r0, #120]	; 0x78
	rx_empty = (rx_buffer_depth - read_rxflr(reg_base)) - dw->rx_pending;
10005dde:	1a8a      	subs	r2, r1, r2
10005de0:	b2d2      	uxtb	r2, r2
10005de2:	69de      	ldr	r6, [r3, #28]
10005de4:	1b92      	subs	r2, r2, r6
10005de6:	b256      	sxtb	r6, r2
	if (rx_empty < 0) {
10005de8:	0612      	lsls	r2, r2, #24
10005dea:	d414      	bmi.n	10005e16 <i2c_dw_data_ask+0x60>
10005dec:	6f42      	ldr	r2, [r0, #116]	; 0x74
	tx_empty = tx_buffer_depth - read_txflr(reg_base);
10005dee:	b2d2      	uxtb	r2, r2
10005df0:	1aad      	subs	r5, r5, r2
10005df2:	b2ed      	uxtb	r5, r5
	cnt = MIN(rx_buffer_depth, dw->request_bytes);
10005df4:	1c22      	adds	r2, r4, #0
10005df6:	428c      	cmp	r4, r1
10005df8:	d900      	bls.n	10005dfc <i2c_dw_data_ask+0x46>
10005dfa:	1c0a      	adds	r2, r1, #0
10005dfc:	b2d2      	uxtb	r2, r2
	cnt = MIN(MIN(tx_empty, rx_empty), cnt);
10005dfe:	42ae      	cmp	r6, r5
10005e00:	dd00      	ble.n	10005e04 <i2c_dw_data_ask+0x4e>
10005e02:	002e      	movs	r6, r5
10005e04:	42b2      	cmp	r2, r6
10005e06:	dd00      	ble.n	10005e0a <i2c_dw_data_ask+0x54>
10005e08:	0032      	movs	r2, r6
10005e0a:	b2d2      	uxtb	r2, r2
	while (cnt > 0) {
10005e0c:	e01c      	b.n	10005e48 <i2c_dw_data_ask+0x92>
	uint32_t temp = *(volatile uint32_t *)addr;
10005e0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10005e10:	3a15      	subs	r2, #21
10005e12:	4393      	bics	r3, r2
10005e14:	6303      	str	r3, [r0, #48]	; 0x30
}
10005e16:	bd70      	pop	{r4, r5, r6, pc}
		data = IC_DATA_CMD_CMD;
10005e18:	2480      	movs	r4, #128	; 0x80
10005e1a:	0064      	lsls	r4, r4, #1
		if ((dw->xfr_flags & I2C_MSG_STOP)
10005e1c:	2126      	movs	r1, #38	; 0x26
10005e1e:	5c59      	ldrb	r1, [r3, r1]
10005e20:	0789      	lsls	r1, r1, #30
10005e22:	d503      	bpl.n	10005e2c <i2c_dw_data_ask+0x76>
		    && (dw->request_bytes == 1U)) {
10005e24:	2125      	movs	r1, #37	; 0x25
10005e26:	5c59      	ldrb	r1, [r3, r1]
10005e28:	2901      	cmp	r1, #1
10005e2a:	d01a      	beq.n	10005e62 <i2c_dw_data_ask+0xac>
	uint32_t temp = *(volatile uint32_t *)addr;
10005e2c:	6b01      	ldr	r1, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10005e2e:	2510      	movs	r5, #16
10005e30:	43a9      	bics	r1, r5
10005e32:	6301      	str	r1, [r0, #48]	; 0x30
	*(volatile uint32_t *)addr = data;
10005e34:	6104      	str	r4, [r0, #16]
		dw->rx_pending++;
10005e36:	69d9      	ldr	r1, [r3, #28]
10005e38:	3101      	adds	r1, #1
10005e3a:	61d9      	str	r1, [r3, #28]
		dw->request_bytes--;
10005e3c:	2425      	movs	r4, #37	; 0x25
10005e3e:	5d19      	ldrb	r1, [r3, r4]
10005e40:	3901      	subs	r1, #1
10005e42:	5519      	strb	r1, [r3, r4]
		cnt--;
10005e44:	3a01      	subs	r2, #1
10005e46:	b2d2      	uxtb	r2, r2
	while (cnt > 0) {
10005e48:	2a00      	cmp	r2, #0
10005e4a:	d0e4      	beq.n	10005e16 <i2c_dw_data_ask+0x60>
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005e4c:	2126      	movs	r1, #38	; 0x26
10005e4e:	5c59      	ldrb	r1, [r3, r1]
10005e50:	074c      	lsls	r4, r1, #29
10005e52:	d5e1      	bpl.n	10005e18 <i2c_dw_data_ask+0x62>
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10005e54:	2404      	movs	r4, #4
10005e56:	43a1      	bics	r1, r4
10005e58:	3422      	adds	r4, #34	; 0x22
10005e5a:	5519      	strb	r1, [r3, r4]
			data |= IC_DATA_CMD_RESTART;
10005e5c:	24a0      	movs	r4, #160	; 0xa0
10005e5e:	00e4      	lsls	r4, r4, #3
10005e60:	e7dc      	b.n	10005e1c <i2c_dw_data_ask+0x66>
			data |= IC_DATA_CMD_STOP;
10005e62:	2180      	movs	r1, #128	; 0x80
10005e64:	0089      	lsls	r1, r1, #2
10005e66:	430c      	orrs	r4, r1
10005e68:	e7e0      	b.n	10005e2c <i2c_dw_data_ask+0x76>

10005e6a <i2c_dw_data_read>:
	struct i2c_dw_dev_config * const dw = dev->data;
10005e6a:	6903      	ldr	r3, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005e6c:	6842      	ldr	r2, [r0, #4]
10005e6e:	6810      	ldr	r0, [r2, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10005e70:	6f02      	ldr	r2, [r0, #112]	; 0x70
	while (test_bit_status_rfne(reg_base) && (dw->xfr_len > 0)) {
10005e72:	0712      	lsls	r2, r2, #28
10005e74:	d510      	bpl.n	10005e98 <i2c_dw_data_read+0x2e>
10005e76:	699a      	ldr	r2, [r3, #24]
10005e78:	2a00      	cmp	r2, #0
10005e7a:	d00d      	beq.n	10005e98 <i2c_dw_data_read+0x2e>
	return *(volatile uint32_t *)addr;
10005e7c:	6901      	ldr	r1, [r0, #16]
		dw->xfr_buf[0] = (uint8_t)read_cmd_data(reg_base);
10005e7e:	695a      	ldr	r2, [r3, #20]
10005e80:	7011      	strb	r1, [r2, #0]
		dw->xfr_buf++;
10005e82:	695a      	ldr	r2, [r3, #20]
10005e84:	3201      	adds	r2, #1
10005e86:	615a      	str	r2, [r3, #20]
		dw->xfr_len--;
10005e88:	699a      	ldr	r2, [r3, #24]
10005e8a:	3a01      	subs	r2, #1
10005e8c:	619a      	str	r2, [r3, #24]
		dw->rx_pending--;
10005e8e:	69d9      	ldr	r1, [r3, #28]
10005e90:	3901      	subs	r1, #1
10005e92:	61d9      	str	r1, [r3, #28]
		if (dw->xfr_len == 0U) {
10005e94:	2a00      	cmp	r2, #0
10005e96:	d1eb      	bne.n	10005e70 <i2c_dw_data_read+0x6>
	if (dw->xfr_len == 0U) {
10005e98:	699a      	ldr	r2, [r3, #24]
10005e9a:	2a00      	cmp	r2, #0
10005e9c:	d000      	beq.n	10005ea0 <i2c_dw_data_read+0x36>
}
10005e9e:	4770      	bx	lr
		dw->state &= ~I2C_DW_CMD_RECV;
10005ea0:	2124      	movs	r1, #36	; 0x24
10005ea2:	5c5a      	ldrb	r2, [r3, r1]
10005ea4:	2002      	movs	r0, #2
10005ea6:	4382      	bics	r2, r0
10005ea8:	545a      	strb	r2, [r3, r1]
		return;
10005eaa:	e7f8      	b.n	10005e9e <i2c_dw_data_read+0x34>

10005eac <i2c_dw_data_send>:
{
10005eac:	b530      	push	{r4, r5, lr}
	struct i2c_dw_dev_config * const dw = dev->data;
10005eae:	6903      	ldr	r3, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005eb0:	6842      	ldr	r2, [r0, #4]
10005eb2:	6811      	ldr	r1, [r2, #0]
	if (dw->xfr_len == 0U) {
10005eb4:	699a      	ldr	r2, [r3, #24]
10005eb6:	2a00      	cmp	r2, #0
10005eb8:	d116      	bne.n	10005ee8 <i2c_dw_data_send+0x3c>
	uint32_t temp = *(volatile uint32_t *)addr;
10005eba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10005ebc:	2010      	movs	r0, #16
10005ebe:	4382      	bics	r2, r0
10005ec0:	630a      	str	r2, [r1, #48]	; 0x30
		dw->state &= ~I2C_DW_CMD_SEND;
10005ec2:	2124      	movs	r1, #36	; 0x24
10005ec4:	5c5a      	ldrb	r2, [r3, r1]
10005ec6:	380f      	subs	r0, #15
10005ec8:	4382      	bics	r2, r0
10005eca:	545a      	strb	r2, [r3, r1]
		return 0;
10005ecc:	2000      	movs	r0, #0
}
10005ece:	bd30      	pop	{r4, r5, pc}
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
10005ed0:	2c01      	cmp	r4, #1
10005ed2:	d01d      	beq.n	10005f10 <i2c_dw_data_send+0x64>
	*(volatile uint32_t *)addr = data;
10005ed4:	6108      	str	r0, [r1, #16]
		dw->xfr_len--;
10005ed6:	699a      	ldr	r2, [r3, #24]
10005ed8:	3a01      	subs	r2, #1
10005eda:	619a      	str	r2, [r3, #24]
		dw->xfr_buf++;
10005edc:	695a      	ldr	r2, [r3, #20]
10005ede:	3201      	adds	r2, #1
10005ee0:	615a      	str	r2, [r3, #20]
	uint32_t temp = *(volatile uint32_t *)addr;
10005ee2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
		if (test_bit_intr_stat_tx_abrt(reg_base)) {
10005ee4:	0652      	lsls	r2, r2, #25
10005ee6:	d41d      	bmi.n	10005f24 <i2c_dw_data_send+0x78>
10005ee8:	6f0a      	ldr	r2, [r1, #112]	; 0x70
	while (test_bit_status_tfnt(reg_base) && (dw->xfr_len > 0)) {
10005eea:	0792      	lsls	r2, r2, #30
10005eec:	d51d      	bpl.n	10005f2a <i2c_dw_data_send+0x7e>
10005eee:	699c      	ldr	r4, [r3, #24]
10005ef0:	2c00      	cmp	r4, #0
10005ef2:	d015      	beq.n	10005f20 <i2c_dw_data_send+0x74>
		data = dw->xfr_buf[0];
10005ef4:	695a      	ldr	r2, [r3, #20]
10005ef6:	7810      	ldrb	r0, [r2, #0]
		if (dw->xfr_flags & I2C_MSG_RESTART) {
10005ef8:	2226      	movs	r2, #38	; 0x26
10005efa:	5c9a      	ldrb	r2, [r3, r2]
10005efc:	0755      	lsls	r5, r2, #29
10005efe:	d5e7      	bpl.n	10005ed0 <i2c_dw_data_send+0x24>
			data |= IC_DATA_CMD_RESTART;
10005f00:	2580      	movs	r5, #128	; 0x80
10005f02:	00ed      	lsls	r5, r5, #3
10005f04:	4328      	orrs	r0, r5
			dw->xfr_flags &= ~(I2C_MSG_RESTART);
10005f06:	2504      	movs	r5, #4
10005f08:	43aa      	bics	r2, r5
10005f0a:	3522      	adds	r5, #34	; 0x22
10005f0c:	555a      	strb	r2, [r3, r5]
10005f0e:	e7df      	b.n	10005ed0 <i2c_dw_data_send+0x24>
		if ((dw->xfr_len == 1U) && (dw->xfr_flags & I2C_MSG_STOP)) {
10005f10:	2226      	movs	r2, #38	; 0x26
10005f12:	5c9a      	ldrb	r2, [r3, r2]
10005f14:	0792      	lsls	r2, r2, #30
10005f16:	d5dd      	bpl.n	10005ed4 <i2c_dw_data_send+0x28>
			data |= IC_DATA_CMD_STOP;
10005f18:	2280      	movs	r2, #128	; 0x80
10005f1a:	0092      	lsls	r2, r2, #2
10005f1c:	4310      	orrs	r0, r2
10005f1e:	e7d9      	b.n	10005ed4 <i2c_dw_data_send+0x28>
	return 0;
10005f20:	2000      	movs	r0, #0
10005f22:	e7d4      	b.n	10005ece <i2c_dw_data_send+0x22>
			return -EIO;
10005f24:	2005      	movs	r0, #5
10005f26:	4240      	negs	r0, r0
10005f28:	e7d1      	b.n	10005ece <i2c_dw_data_send+0x22>
	return 0;
10005f2a:	2000      	movs	r0, #0
10005f2c:	e7cf      	b.n	10005ece <i2c_dw_data_send+0x22>

10005f2e <i2c_dw_runtime_configure>:
{
10005f2e:	b530      	push	{r4, r5, lr}
	struct i2c_dw_dev_config * const dw = dev->data;
10005f30:	6904      	ldr	r4, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10005f32:	6843      	ldr	r3, [r0, #4]
10005f34:	681a      	ldr	r2, [r3, #0]
	dw->app_config = config;
10005f36:	6121      	str	r1, [r4, #16]
	switch (I2C_SPEED_GET(dw->app_config)) {
10005f38:	0848      	lsrs	r0, r1, #1
10005f3a:	2307      	movs	r3, #7
10005f3c:	4003      	ands	r3, r0
10005f3e:	2b03      	cmp	r3, #3
10005f40:	d820      	bhi.n	10005f84 <i2c_dw_runtime_configure+0x56>
10005f42:	2b02      	cmp	r3, #2
10005f44:	d23f      	bcs.n	10005fc6 <i2c_dw_runtime_configure+0x98>
10005f46:	2b01      	cmp	r3, #1
10005f48:	d115      	bne.n	10005f76 <i2c_dw_runtime_configure+0x48>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
10005f4a:	0013      	movs	r3, r2
10005f4c:	33a0      	adds	r3, #160	; 0xa0
	return *(volatile uint32_t *)addr;
10005f4e:	6818      	ldr	r0, [r3, #0]
		if (I2C_STD_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10005f50:	3007      	adds	r0, #7
10005f52:	25fa      	movs	r5, #250	; 0xfa
10005f54:	006d      	lsls	r5, r5, #1
10005f56:	42a8      	cmp	r0, r5
10005f58:	d32f      	bcc.n	10005fba <i2c_dw_runtime_configure+0x8c>
10005f5a:	6818      	ldr	r0, [r3, #0]
			value = read_fs_spklen(reg_base) + 8;
10005f5c:	3008      	adds	r0, #8
		dw->lcnt = value;
10005f5e:	8460      	strh	r0, [r4, #34]	; 0x22
10005f60:	6818      	ldr	r0, [r3, #0]
		if (I2C_STD_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10005f62:	3005      	adds	r0, #5
10005f64:	25c8      	movs	r5, #200	; 0xc8
10005f66:	006d      	lsls	r5, r5, #1
10005f68:	42a8      	cmp	r0, r5
10005f6a:	d329      	bcc.n	10005fc0 <i2c_dw_runtime_configure+0x92>
10005f6c:	681b      	ldr	r3, [r3, #0]
			value = read_fs_spklen(reg_base) + 6;
10005f6e:	3306      	adds	r3, #6
		dw->hcnt = value;
10005f70:	8423      	strh	r3, [r4, #32]
	uint32_t	rc = 0U;
10005f72:	2000      	movs	r0, #0
		break;
10005f74:	e001      	b.n	10005f7a <i2c_dw_runtime_configure+0x4c>
	switch (I2C_SPEED_GET(dw->app_config)) {
10005f76:	2016      	movs	r0, #22
10005f78:	4240      	negs	r0, r0
10005f7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
	dw->app_config |= I2C_MODE_CONTROLLER;
10005f7c:	2310      	movs	r3, #16
10005f7e:	4319      	orrs	r1, r3
10005f80:	6121      	str	r1, [r4, #16]
}
10005f82:	bd30      	pop	{r4, r5, pc}
	switch (I2C_SPEED_GET(dw->app_config)) {
10005f84:	2b04      	cmp	r3, #4
10005f86:	d115      	bne.n	10005fb4 <i2c_dw_runtime_configure+0x86>
		if (dw->support_hs_mode) {
10005f88:	2327      	movs	r3, #39	; 0x27
10005f8a:	5ce3      	ldrb	r3, [r4, r3]
10005f8c:	2b00      	cmp	r3, #0
10005f8e:	d034      	beq.n	10005ffa <i2c_dw_runtime_configure+0xcc>
DEFINE_MM_REG_READ(hs_spklen, DW_IC_REG_HS_SPKLEN, 32)
10005f90:	0010      	movs	r0, r2
10005f92:	30a4      	adds	r0, #164	; 0xa4
10005f94:	6803      	ldr	r3, [r0, #0]
			if (I2C_HS_LCNT <= (read_hs_spklen(reg_base) + 7)) {
10005f96:	3307      	adds	r3, #7
10005f98:	2b56      	cmp	r3, #86	; 0x56
10005f9a:	d92a      	bls.n	10005ff2 <i2c_dw_runtime_configure+0xc4>
10005f9c:	6803      	ldr	r3, [r0, #0]
				value = read_hs_spklen(reg_base) + 8;
10005f9e:	3308      	adds	r3, #8
			dw->lcnt = value;
10005fa0:	8463      	strh	r3, [r4, #34]	; 0x22
10005fa2:	6803      	ldr	r3, [r0, #0]
			if (I2C_HS_HCNT <= (read_hs_spklen(reg_base) + 5)) {
10005fa4:	3305      	adds	r3, #5
10005fa6:	2b4a      	cmp	r3, #74	; 0x4a
10005fa8:	d925      	bls.n	10005ff6 <i2c_dw_runtime_configure+0xc8>
10005faa:	6803      	ldr	r3, [r0, #0]
				value = read_hs_spklen(reg_base) + 6;
10005fac:	3306      	adds	r3, #6
			dw->hcnt = value;
10005fae:	8423      	strh	r3, [r4, #32]
	uint32_t	rc = 0U;
10005fb0:	2000      	movs	r0, #0
10005fb2:	e7e2      	b.n	10005f7a <i2c_dw_runtime_configure+0x4c>
	switch (I2C_SPEED_GET(dw->app_config)) {
10005fb4:	2016      	movs	r0, #22
10005fb6:	4240      	negs	r0, r0
10005fb8:	e7df      	b.n	10005f7a <i2c_dw_runtime_configure+0x4c>
			value = I2C_STD_LCNT;
10005fba:	20fa      	movs	r0, #250	; 0xfa
10005fbc:	0040      	lsls	r0, r0, #1
10005fbe:	e7ce      	b.n	10005f5e <i2c_dw_runtime_configure+0x30>
			value = I2C_STD_HCNT;
10005fc0:	23c8      	movs	r3, #200	; 0xc8
10005fc2:	005b      	lsls	r3, r3, #1
10005fc4:	e7d4      	b.n	10005f70 <i2c_dw_runtime_configure+0x42>
DEFINE_MM_REG_READ(fs_spklen, DW_IC_REG_FS_SPKLEN, 32)
10005fc6:	0013      	movs	r3, r2
10005fc8:	33a0      	adds	r3, #160	; 0xa0
10005fca:	6818      	ldr	r0, [r3, #0]
		if (I2C_FS_LCNT <= (read_fs_spklen(reg_base) + 7)) {
10005fcc:	3007      	adds	r0, #7
10005fce:	2856      	cmp	r0, #86	; 0x56
10005fd0:	d90b      	bls.n	10005fea <i2c_dw_runtime_configure+0xbc>
10005fd2:	6818      	ldr	r0, [r3, #0]
			value = read_fs_spklen(reg_base) + 8;
10005fd4:	3008      	adds	r0, #8
		dw->lcnt = value;
10005fd6:	8460      	strh	r0, [r4, #34]	; 0x22
10005fd8:	6818      	ldr	r0, [r3, #0]
		if (I2C_FS_HCNT <= (read_fs_spklen(reg_base) + 5)) {
10005fda:	3005      	adds	r0, #5
10005fdc:	284a      	cmp	r0, #74	; 0x4a
10005fde:	d906      	bls.n	10005fee <i2c_dw_runtime_configure+0xc0>
10005fe0:	681b      	ldr	r3, [r3, #0]
			value = read_fs_spklen(reg_base) + 6;
10005fe2:	3306      	adds	r3, #6
		dw->hcnt = value;
10005fe4:	8423      	strh	r3, [r4, #32]
	uint32_t	rc = 0U;
10005fe6:	2000      	movs	r0, #0
		break;
10005fe8:	e7c7      	b.n	10005f7a <i2c_dw_runtime_configure+0x4c>
			value = I2C_FS_LCNT;
10005fea:	2057      	movs	r0, #87	; 0x57
10005fec:	e7f3      	b.n	10005fd6 <i2c_dw_runtime_configure+0xa8>
			value = I2C_FS_HCNT;
10005fee:	234b      	movs	r3, #75	; 0x4b
10005ff0:	e7f8      	b.n	10005fe4 <i2c_dw_runtime_configure+0xb6>
				value = I2C_HS_LCNT;
10005ff2:	2357      	movs	r3, #87	; 0x57
10005ff4:	e7d4      	b.n	10005fa0 <i2c_dw_runtime_configure+0x72>
				value = I2C_HS_HCNT;
10005ff6:	234b      	movs	r3, #75	; 0x4b
10005ff8:	e7d9      	b.n	10005fae <i2c_dw_runtime_configure+0x80>
			rc = -EINVAL;
10005ffa:	2016      	movs	r0, #22
10005ffc:	4240      	negs	r0, r0
10005ffe:	e7bc      	b.n	10005f7a <i2c_dw_runtime_configure+0x4c>

10006000 <i2c_dw_set_master_mode>:
	return (uint32_t)DEVICE_MMIO_GET(dev);
10006000:	6843      	ldr	r3, [r0, #4]
10006002:	681b      	ldr	r3, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10006004:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
10006006:	2101      	movs	r1, #1
10006008:	438a      	bics	r2, r1
1000600a:	66da      	str	r2, [r3, #108]	; 0x6c
	ic_con.bits.rx_fifo_full = 0U;
1000600c:	2240      	movs	r2, #64	; 0x40
1000600e:	430a      	orrs	r2, r1
	*(volatile uint32_t *)addr = data;
10006010:	601a      	str	r2, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
10006012:	6eda      	ldr	r2, [r3, #108]	; 0x6c
	*(volatile uint32_t *)addr = temp | (1 << bit);
10006014:	430a      	orrs	r2, r1
10006016:	66da      	str	r2, [r3, #108]	; 0x6c
DEFINE_MM_REG_READ(comp_param_1, DW_IC_REG_COMP_PARAM_1, 32)
10006018:	001a      	movs	r2, r3
1000601a:	32f4      	adds	r2, #244	; 0xf4
	return *(volatile uint32_t *)addr;
1000601c:	6812      	ldr	r2, [r2, #0]
	write_tx_tl(ic_comp_param_1.bits.tx_buffer_depth + 1, reg_base);
1000601e:	0211      	lsls	r1, r2, #8
10006020:	0e09      	lsrs	r1, r1, #24
10006022:	3101      	adds	r1, #1
	*(volatile uint32_t *)addr = data;
10006024:	63d9      	str	r1, [r3, #60]	; 0x3c
	write_rx_tl(ic_comp_param_1.bits.rx_buffer_depth + 1, reg_base);
10006026:	0412      	lsls	r2, r2, #16
10006028:	0e12      	lsrs	r2, r2, #24
1000602a:	3201      	adds	r2, #1
1000602c:	639a      	str	r2, [r3, #56]	; 0x38
}
1000602e:	2000      	movs	r0, #0
10006030:	4770      	bx	lr

10006032 <i2c_dw_slave_unregister>:
{
10006032:	b510      	push	{r4, lr}
	struct i2c_dw_dev_config * const dw = dev->data;
10006034:	6902      	ldr	r2, [r0, #16]
	dw->state = I2C_DW_STATE_READY;
10006036:	2324      	movs	r3, #36	; 0x24
10006038:	2100      	movs	r1, #0
1000603a:	54d1      	strb	r1, [r2, r3]
	ret = i2c_dw_set_master_mode(dev);
1000603c:	f7ff ffe0 	bl	10006000 <i2c_dw_set_master_mode>
}
10006040:	bd10      	pop	{r4, pc}

10006042 <i2c_dw_slave_read_clear_intr_bits>:
{
10006042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct i2c_dw_dev_config * const dw = dev->data;
10006044:	6904      	ldr	r4, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10006046:	6843      	ldr	r3, [r0, #4]
10006048:	681d      	ldr	r5, [r3, #0]
	const struct i2c_target_callbacks *slave_cb = dw->slave_cfg->callbacks;
1000604a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000604c:	6881      	ldr	r1, [r0, #8]
	return *(volatile uint32_t *)addr;
1000604e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if (intr_stat.bits.tx_abrt) {
10006050:	b2da      	uxtb	r2, r3
10006052:	065e      	lsls	r6, r3, #25
10006054:	d503      	bpl.n	1000605e <i2c_dw_slave_read_clear_intr_bits+0x1c>
10006056:	6d6e      	ldr	r6, [r5, #84]	; 0x54
		dw->state = I2C_DW_STATE_READY;
10006058:	2624      	movs	r6, #36	; 0x24
1000605a:	2700      	movs	r7, #0
1000605c:	55a7      	strb	r7, [r4, r6]
	if (intr_stat.bits.rx_under) {
1000605e:	07d6      	lsls	r6, r2, #31
10006060:	d503      	bpl.n	1000606a <i2c_dw_slave_read_clear_intr_bits+0x28>
10006062:	6c6e      	ldr	r6, [r5, #68]	; 0x44
		dw->state = I2C_DW_STATE_READY;
10006064:	2624      	movs	r6, #36	; 0x24
10006066:	2700      	movs	r7, #0
10006068:	55a7      	strb	r7, [r4, r6]
	if (intr_stat.bits.rx_over) {
1000606a:	0796      	lsls	r6, r2, #30
1000606c:	d503      	bpl.n	10006076 <i2c_dw_slave_read_clear_intr_bits+0x34>
1000606e:	6cae      	ldr	r6, [r5, #72]	; 0x48
		dw->state = I2C_DW_STATE_READY;
10006070:	2624      	movs	r6, #36	; 0x24
10006072:	2700      	movs	r7, #0
10006074:	55a7      	strb	r7, [r4, r6]
	if (intr_stat.bits.tx_over) {
10006076:	0716      	lsls	r6, r2, #28
10006078:	d503      	bpl.n	10006082 <i2c_dw_slave_read_clear_intr_bits+0x40>
1000607a:	6cee      	ldr	r6, [r5, #76]	; 0x4c
		dw->state = I2C_DW_STATE_READY;
1000607c:	2624      	movs	r6, #36	; 0x24
1000607e:	2700      	movs	r7, #0
10006080:	55a7      	strb	r7, [r4, r6]
	if (intr_stat.bits.rx_done) {
10006082:	b252      	sxtb	r2, r2
10006084:	2a00      	cmp	r2, #0
10006086:	db1e      	blt.n	100060c6 <i2c_dw_slave_read_clear_intr_bits+0x84>
	if (intr_stat.bits.activity) {
10006088:	041b      	lsls	r3, r3, #16
1000608a:	0e1e      	lsrs	r6, r3, #24
1000608c:	01db      	lsls	r3, r3, #7
1000608e:	d503      	bpl.n	10006098 <i2c_dw_slave_read_clear_intr_bits+0x56>
10006090:	6deb      	ldr	r3, [r5, #92]	; 0x5c
		dw->state = I2C_DW_STATE_READY;
10006092:	2324      	movs	r3, #36	; 0x24
10006094:	2200      	movs	r2, #0
10006096:	54e2      	strb	r2, [r4, r3]
	if (intr_stat.bits.stop_det) {
10006098:	07b3      	lsls	r3, r6, #30
1000609a:	d507      	bpl.n	100060ac <i2c_dw_slave_read_clear_intr_bits+0x6a>
1000609c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
		dw->state = I2C_DW_STATE_READY;
1000609e:	2324      	movs	r3, #36	; 0x24
100060a0:	2200      	movs	r2, #0
100060a2:	54e2      	strb	r2, [r4, r3]
		if (slave_cb->stop) {
100060a4:	690b      	ldr	r3, [r1, #16]
100060a6:	2b00      	cmp	r3, #0
100060a8:	d000      	beq.n	100060ac <i2c_dw_slave_read_clear_intr_bits+0x6a>
			slave_cb->stop(dw->slave_cfg);
100060aa:	4798      	blx	r3
	if (intr_stat.bits.start_det) {
100060ac:	0773      	lsls	r3, r6, #29
100060ae:	d503      	bpl.n	100060b8 <i2c_dw_slave_read_clear_intr_bits+0x76>
100060b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		dw->state = I2C_DW_STATE_READY;
100060b2:	2324      	movs	r3, #36	; 0x24
100060b4:	2200      	movs	r2, #0
100060b6:	54e2      	strb	r2, [r4, r3]
	if (intr_stat.bits.gen_call) {
100060b8:	0736      	lsls	r6, r6, #28
100060ba:	d503      	bpl.n	100060c4 <i2c_dw_slave_read_clear_intr_bits+0x82>
100060bc:	6eab      	ldr	r3, [r5, #104]	; 0x68
		dw->state = I2C_DW_STATE_READY;
100060be:	2324      	movs	r3, #36	; 0x24
100060c0:	2200      	movs	r2, #0
100060c2:	54e2      	strb	r2, [r4, r3]
}
100060c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100060c6:	6daa      	ldr	r2, [r5, #88]	; 0x58
		dw->state = I2C_DW_STATE_READY;
100060c8:	2224      	movs	r2, #36	; 0x24
100060ca:	2600      	movs	r6, #0
100060cc:	54a6      	strb	r6, [r4, r2]
100060ce:	e7db      	b.n	10006088 <i2c_dw_slave_read_clear_intr_bits+0x46>

100060d0 <i2c_config_0>:
			      &i2c_##n##_runtime, &i2c_config_dw_##n,         \
			      POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,          \
			      &funcs);                                        \
	I2C_DW_IRQ_CONFIG(n)

DT_INST_FOREACH_STATUS_OKAY(I2C_DEVICE_INIT_DW)
100060d0:	b510      	push	{r4, lr}
100060d2:	2200      	movs	r2, #0
100060d4:	2103      	movs	r1, #3
100060d6:	2017      	movs	r0, #23
100060d8:	f7ff fc84 	bl	100059e4 <z_arm_irq_priority_set>
100060dc:	2017      	movs	r0, #23
100060de:	f7fa ff75 	bl	10000fcc <arch_irq_enable>
100060e2:	bd10      	pop	{r4, pc}

100060e4 <i2c_config_1>:
100060e4:	b510      	push	{r4, lr}
100060e6:	2200      	movs	r2, #0
100060e8:	2103      	movs	r1, #3
100060ea:	2018      	movs	r0, #24
100060ec:	f7ff fc7a 	bl	100059e4 <z_arm_irq_priority_set>
100060f0:	2018      	movs	r0, #24
100060f2:	f7fa ff6b 	bl	10000fcc <arch_irq_enable>
100060f6:	bd10      	pop	{r4, pc}

100060f8 <i2c_dw_transfer_complete>:
{
100060f8:	b510      	push	{r4, lr}
100060fa:	0003      	movs	r3, r0
	struct i2c_dw_dev_config * const dw = dev->data;
100060fc:	6900      	ldr	r0, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
100060fe:	685b      	ldr	r3, [r3, #4]
10006100:	681b      	ldr	r3, [r3, #0]
	*(volatile uint32_t *)addr = data;
10006102:	2200      	movs	r2, #0
10006104:	631a      	str	r2, [r3, #48]	; 0x30
	return *(volatile uint32_t *)addr;
10006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	z_impl_k_sem_give(sem);
10006108:	f7fc f9fe 	bl	10002508 <z_impl_k_sem_give>
}
1000610c:	bd10      	pop	{r4, pc}

1000610e <i2c_dw_isr>:
{
1000610e:	b5f0      	push	{r4, r5, r6, r7, lr}
10006110:	46d6      	mov	lr, sl
10006112:	464f      	mov	r7, r9
10006114:	4646      	mov	r6, r8
10006116:	b5c0      	push	{r6, r7, lr}
10006118:	b082      	sub	sp, #8
1000611a:	0004      	movs	r4, r0
	struct i2c_dw_dev_config * const dw = port->data;
1000611c:	6907      	ldr	r7, [r0, #16]
	return (uint32_t)DEVICE_MMIO_GET(dev);
1000611e:	6843      	ldr	r3, [r0, #4]
10006120:	681e      	ldr	r6, [r3, #0]
10006122:	6af5      	ldr	r5, [r6, #44]	; 0x2c
	uint32_t temp = *(volatile uint32_t *)addr;
10006124:	6833      	ldr	r3, [r6, #0]
	if (test_bit_con_master_mode(reg_base)) {
10006126:	07db      	lsls	r3, r3, #31
10006128:	d539      	bpl.n	1000619e <i2c_dw_isr+0x90>
		     DW_INTR_STAT_RX_OVER | DW_INTR_STAT_RX_UNDER) &
1000612a:	234b      	movs	r3, #75	; 0x4b
		if ((DW_INTR_STAT_TX_ABRT | DW_INTR_STAT_TX_OVER |
1000612c:	422b      	tst	r3, r5
1000612e:	d122      	bne.n	10006176 <i2c_dw_isr+0x68>
		if (intr_stat.bits.rx_full) {
10006130:	b2eb      	uxtb	r3, r5
10006132:	4698      	mov	r8, r3
10006134:	076b      	lsls	r3, r5, #29
10006136:	d42a      	bmi.n	1000618e <i2c_dw_isr+0x80>
		if ((dw->xfr_flags & I2C_MSG_RW_MASK)
10006138:	2326      	movs	r3, #38	; 0x26
1000613a:	5cfb      	ldrb	r3, [r7, r3]
1000613c:	07db      	lsls	r3, r3, #31
1000613e:	d503      	bpl.n	10006148 <i2c_dw_isr+0x3a>
	uint32_t temp = *(volatile uint32_t *)addr;
10006140:	6b33      	ldr	r3, [r6, #48]	; 0x30
	*(volatile uint32_t *)addr = temp | (1 << bit);
10006142:	2210      	movs	r2, #16
10006144:	4313      	orrs	r3, r2
10006146:	6333      	str	r3, [r6, #48]	; 0x30
		if (intr_stat.bits.tx_empty) {
10006148:	4643      	mov	r3, r8
1000614a:	06db      	lsls	r3, r3, #27
1000614c:	d50f      	bpl.n	1000616e <i2c_dw_isr+0x60>
			if ((dw->xfr_flags & I2C_MSG_RW_MASK)
1000614e:	2326      	movs	r3, #38	; 0x26
10006150:	5cfb      	ldrb	r3, [r7, r3]
10006152:	07db      	lsls	r3, r3, #31
10006154:	d41e      	bmi.n	10006194 <i2c_dw_isr+0x86>
				ret = i2c_dw_data_send(port);
10006156:	0020      	movs	r0, r4
10006158:	f7ff fea8 	bl	10005eac <i2c_dw_data_send>
			if (((dw->xfr_len == 0U)
1000615c:	69bb      	ldr	r3, [r7, #24]
1000615e:	2b00      	cmp	r3, #0
10006160:	d103      	bne.n	1000616a <i2c_dw_isr+0x5c>
			     && !(dw->xfr_flags & I2C_MSG_STOP))
10006162:	3326      	adds	r3, #38	; 0x26
10006164:	5cfb      	ldrb	r3, [r7, r3]
10006166:	079b      	lsls	r3, r3, #30
10006168:	d508      	bpl.n	1000617c <i2c_dw_isr+0x6e>
			    || (ret != 0)) {
1000616a:	2800      	cmp	r0, #0
1000616c:	d106      	bne.n	1000617c <i2c_dw_isr+0x6e>
		if (intr_stat.bits.stop_det) {
1000616e:	05ad      	lsls	r5, r5, #22
10006170:	d507      	bpl.n	10006182 <i2c_dw_isr+0x74>
10006172:	6e33      	ldr	r3, [r6, #96]	; 0x60
			goto done;
10006174:	e002      	b.n	1000617c <i2c_dw_isr+0x6e>
			dw->state = I2C_DW_CMD_ERROR;
10006176:	3b27      	subs	r3, #39	; 0x27
10006178:	2204      	movs	r2, #4
1000617a:	54fa      	strb	r2, [r7, r3]
	i2c_dw_transfer_complete(port);
1000617c:	0020      	movs	r0, r4
1000617e:	f7ff ffbb 	bl	100060f8 <i2c_dw_transfer_complete>
}
10006182:	b002      	add	sp, #8
10006184:	bce0      	pop	{r5, r6, r7}
10006186:	46ba      	mov	sl, r7
10006188:	46b1      	mov	r9, r6
1000618a:	46a8      	mov	r8, r5
1000618c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			i2c_dw_data_read(port);
1000618e:	f7ff fe6c 	bl	10005e6a <i2c_dw_data_read>
10006192:	e7d1      	b.n	10006138 <i2c_dw_isr+0x2a>
				i2c_dw_data_ask(port);
10006194:	0020      	movs	r0, r4
10006196:	f7ff fe0e 	bl	10005db6 <i2c_dw_data_ask>
	int ret = 0;
1000619a:	2000      	movs	r0, #0
1000619c:	e7de      	b.n	1000615c <i2c_dw_isr+0x4e>
		const struct i2c_target_callbacks *slave_cb = dw->slave_cfg->callbacks;
1000619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
100061a0:	689b      	ldr	r3, [r3, #8]
100061a2:	469a      	mov	sl, r3
	uint32_t temp = *(volatile uint32_t *)addr;
100061a4:	6f33      	ldr	r3, [r6, #112]	; 0x70

	return temp & (1 << bit);
100061a6:	2201      	movs	r2, #1
100061a8:	401a      	ands	r2, r3
100061aa:	4690      	mov	r8, r2
		i2c_dw_slave_read_clear_intr_bits(port);
100061ac:	f7ff ff49 	bl	10006042 <i2c_dw_slave_read_clear_intr_bits>
		if (intr_stat.bits.rx_full) {
100061b0:	b2eb      	uxtb	r3, r5
100061b2:	4699      	mov	r9, r3
100061b4:	076d      	lsls	r5, r5, #29
100061b6:	d51b      	bpl.n	100061f0 <i2c_dw_isr+0xe2>
			if (dw->state != I2C_DW_CMD_SEND) {
100061b8:	2324      	movs	r3, #36	; 0x24
100061ba:	5cfb      	ldrb	r3, [r7, r3]
100061bc:	2b01      	cmp	r3, #1
100061be:	d008      	beq.n	100061d2 <i2c_dw_isr+0xc4>
				dw->state = I2C_DW_CMD_SEND;
100061c0:	2324      	movs	r3, #36	; 0x24
100061c2:	2201      	movs	r2, #1
100061c4:	54fa      	strb	r2, [r7, r3]
				if (slave_cb->write_requested) {
100061c6:	4653      	mov	r3, sl
100061c8:	681b      	ldr	r3, [r3, #0]
100061ca:	2b00      	cmp	r3, #0
100061cc:	d001      	beq.n	100061d2 <i2c_dw_isr+0xc4>
					slave_cb->write_requested(dw->slave_cfg);
100061ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
100061d0:	4798      	blx	r3
	return (uint32_t)DEVICE_MMIO_GET(dev);
100061d2:	6863      	ldr	r3, [r4, #4]
100061d4:	681a      	ldr	r2, [r3, #0]
	uint32_t temp = *(volatile uint32_t *)addr;
100061d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
	if (!test_bit_status_rfne(reg_base)) { /* Rx FIFO must not be empty */
100061d8:	071b      	lsls	r3, r3, #28
100061da:	d52c      	bpl.n	10006236 <i2c_dw_isr+0x128>
100061dc:	6911      	ldr	r1, [r2, #16]
	return (uint8_t)read_cmd_data(reg_base);
100061de:	b2c9      	uxtb	r1, r1
			data = i2c_dw_read_byte_non_blocking(port);
100061e0:	466b      	mov	r3, sp
100061e2:	71d9      	strb	r1, [r3, #7]
			if (slave_cb->write_received) {
100061e4:	4653      	mov	r3, sl
100061e6:	689b      	ldr	r3, [r3, #8]
100061e8:	2b00      	cmp	r3, #0
100061ea:	d001      	beq.n	100061f0 <i2c_dw_isr+0xe2>
				slave_cb->write_received(dw->slave_cfg, data);
100061ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
100061ee:	4798      	blx	r3
		if (intr_stat.bits.rd_req) {
100061f0:	464b      	mov	r3, r9
100061f2:	069b      	lsls	r3, r3, #26
100061f4:	d5c5      	bpl.n	10006182 <i2c_dw_isr+0x74>
			if (slave_activity) {
100061f6:	4643      	mov	r3, r8
100061f8:	2b00      	cmp	r3, #0
100061fa:	d0c2      	beq.n	10006182 <i2c_dw_isr+0x74>
100061fc:	6d33      	ldr	r3, [r6, #80]	; 0x50
				dw->state = I2C_DW_CMD_RECV;
100061fe:	2324      	movs	r3, #36	; 0x24
10006200:	2202      	movs	r2, #2
10006202:	54fa      	strb	r2, [r7, r3]
				if (slave_cb->read_requested) {
10006204:	4653      	mov	r3, sl
10006206:	685b      	ldr	r3, [r3, #4]
10006208:	2b00      	cmp	r3, #0
1000620a:	d00b      	beq.n	10006224 <i2c_dw_isr+0x116>
					slave_cb->read_requested(dw->slave_cfg, &data);
1000620c:	466a      	mov	r2, sp
1000620e:	1dd5      	adds	r5, r2, #7
10006210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10006212:	0029      	movs	r1, r5
10006214:	4798      	blx	r3
					i2c_dw_write_byte_non_blocking(port, data);
10006216:	7829      	ldrb	r1, [r5, #0]
	return (uint32_t)DEVICE_MMIO_GET(dev);
10006218:	6863      	ldr	r3, [r4, #4]
1000621a:	681a      	ldr	r2, [r3, #0]
1000621c:	6f13      	ldr	r3, [r2, #112]	; 0x70
	if (!test_bit_status_tfnt(reg_base)) { /* Tx FIFO must not be full */
1000621e:	079b      	lsls	r3, r3, #30
10006220:	d500      	bpl.n	10006224 <i2c_dw_isr+0x116>
	*(volatile uint32_t *)addr = data;
10006222:	6111      	str	r1, [r2, #16]
				if (slave_cb->read_processed) {
10006224:	4653      	mov	r3, sl
10006226:	68db      	ldr	r3, [r3, #12]
10006228:	2b00      	cmp	r3, #0
1000622a:	d0aa      	beq.n	10006182 <i2c_dw_isr+0x74>
					slave_cb->read_processed(dw->slave_cfg, &data);
1000622c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000622e:	466a      	mov	r2, sp
10006230:	1dd1      	adds	r1, r2, #7
10006232:	4798      	blx	r3
10006234:	e7a5      	b.n	10006182 <i2c_dw_isr+0x74>
		return -EIO;
10006236:	21fb      	movs	r1, #251	; 0xfb
10006238:	e7d2      	b.n	100061e0 <i2c_dw_isr+0xd2>

1000623a <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
1000623a:	b500      	push	{lr}
1000623c:	b083      	sub	sp, #12
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
1000623e:	aa01      	add	r2, sp, #4
10006240:	f000 f9eb 	bl	1000661a <pinctrl_lookup_state>
	if (ret < 0) {
10006244:	2800      	cmp	r0, #0
10006246:	db05      	blt.n	10006254 <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
10006248:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
1000624a:	6818      	ldr	r0, [r3, #0]
1000624c:	7919      	ldrb	r1, [r3, #4]
1000624e:	2200      	movs	r2, #0
10006250:	f000 fa32 	bl	100066b8 <pinctrl_configure_pins>
}
10006254:	b003      	add	sp, #12
10006256:	bd00      	pop	{pc}

10006258 <i2c_read>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
10006258:	b510      	push	{r4, lr}
1000625a:	b084      	sub	sp, #16
1000625c:	000c      	movs	r4, r1
	struct i2c_msg msg;

	msg.buf = buf;
1000625e:	a901      	add	r1, sp, #4
10006260:	9401      	str	r4, [sp, #4]
	msg.len = num_bytes;
10006262:	604a      	str	r2, [r1, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
10006264:	2203      	movs	r2, #3
10006266:	720a      	strb	r2, [r1, #8]
	const struct i2c_driver_api *api =
10006268:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
1000626a:	6894      	ldr	r4, [r2, #8]
1000626c:	2201      	movs	r2, #1
1000626e:	47a0      	blx	r4

	return i2c_transfer(dev, &msg, 1, addr);
}
10006270:	b004      	add	sp, #16
10006272:	bd10      	pop	{r4, pc}

10006274 <ec2023_fetch_all>:
{
	return i2c_read_dt(&cfg->i2c, buf, size);
}

static inline int ec2023_fetch_all(const struct ec2023_config *cfg, struct ec2023_data *data)
{
10006274:	b510      	push	{r4, lr}
10006276:	b082      	sub	sp, #8
10006278:	0003      	movs	r3, r0
1000627a:	000c      	movs	r4, r1
 * @return a value from i2c_read()
 */
static inline int i2c_read_dt(const struct i2c_dt_spec *spec,
			      uint8_t *buf, uint32_t num_bytes)
{
	return i2c_read(spec->bus, buf, num_bytes, spec->addr);
1000627c:	6800      	ldr	r0, [r0, #0]
1000627e:	889b      	ldrh	r3, [r3, #4]
10006280:	2207      	movs	r2, #7
10006282:	4669      	mov	r1, sp
10006284:	f7ff ffe8 	bl	10006258 <i2c_read>
	int16_t soil;
    uint8_t air;
	int32_t temp;

	ret = ec2023_reg_read(cfg, data_read, sizeof(data_read));
	if (ret < 0) {
10006288:	2800      	cmp	r0, #0
1000628a:	db1a      	blt.n	100062c2 <ec2023_fetch_all+0x4e>
		LOG_ERR("Could not fetch temperature [%d]", ret);
		return -EIO;
	}
	
	soil = (int16_t)(((int16_t)data_read[0] << 8) | data_read[1]);
1000628c:	466b      	mov	r3, sp
1000628e:	781a      	ldrb	r2, [r3, #0]
10006290:	0212      	lsls	r2, r2, #8
10006292:	b212      	sxth	r2, r2
10006294:	785b      	ldrb	r3, [r3, #1]
10006296:	431a      	orrs	r2, r3
	air = (uint8_t)data_read[2];
10006298:	466b      	mov	r3, sp
1000629a:	7898      	ldrb	r0, [r3, #2]
	// air = (int16_t)(((int16_t)data_read[2] << 8) | data_read[3]);
	temp = (int32_t)((int32_t)data_read[3] << 24) | ((int32_t)data_read[4] << 16) | ((int16_t)data_read[5] << 8) | (data_read[6]);
1000629c:	78db      	ldrb	r3, [r3, #3]
1000629e:	061b      	lsls	r3, r3, #24
100062a0:	4669      	mov	r1, sp
100062a2:	7909      	ldrb	r1, [r1, #4]
100062a4:	0409      	lsls	r1, r1, #16
100062a6:	430b      	orrs	r3, r1
100062a8:	4669      	mov	r1, sp
100062aa:	7949      	ldrb	r1, [r1, #5]
100062ac:	0209      	lsls	r1, r1, #8
100062ae:	430b      	orrs	r3, r1
100062b0:	4669      	mov	r1, sp
100062b2:	7989      	ldrb	r1, [r1, #6]
100062b4:	430b      	orrs	r3, r1

	data->soil_moisture = soil;
100062b6:	8022      	strh	r2, [r4, #0]
	data->air_quality = air;
100062b8:	8060      	strh	r0, [r4, #2]
	data->temperature = temp;
100062ba:	6063      	str	r3, [r4, #4]
	return 0;
100062bc:	2000      	movs	r0, #0
}
100062be:	b002      	add	sp, #8
100062c0:	bd10      	pop	{r4, pc}
		return -EIO;
100062c2:	2005      	movs	r0, #5
100062c4:	4240      	negs	r0, r0
100062c6:	e7fa      	b.n	100062be <ec2023_fetch_all+0x4a>

100062c8 <ec2023_sample_fetch>:

static int ec2023_sample_fetch(const struct device *dev, enum sensor_channel chan)
{
100062c8:	b510      	push	{r4, lr}
	struct ec2023_data *data = dev->data;
100062ca:	6901      	ldr	r1, [r0, #16]
	const struct ec2023_config *cfg = dev->config;
100062cc:	6840      	ldr	r0, [r0, #4]

    __ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	return ec2023_fetch_all(cfg, data);
100062ce:	f7ff ffd1 	bl	10006274 <ec2023_fetch_all>
}
100062d2:	bd10      	pop	{r4, pc}

100062d4 <ec2023_channel_get>:

static int ec2023_channel_get(const struct device *dev, enum sensor_channel chan, struct sensor_value *val)
{
100062d4:	b570      	push	{r4, r5, r6, lr}
100062d6:	0014      	movs	r4, r2
	struct ec2023_data *data = dev->data;
100062d8:	6905      	ldr	r5, [r0, #16]

	switch (chan) {
100062da:	2910      	cmp	r1, #16
100062dc:	d017      	beq.n	1000630e <ec2023_channel_get+0x3a>
100062de:	291c      	cmp	r1, #28
100062e0:	d01c      	beq.n	1000631c <ec2023_channel_get+0x48>
100062e2:	290d      	cmp	r1, #13
100062e4:	d002      	beq.n	100062ec <ec2023_channel_get+0x18>
100062e6:	2086      	movs	r0, #134	; 0x86
100062e8:	4240      	negs	r0, r0
		val->val2 = 0;
		return 0;
	default:
		return -ENOTSUP;
	}
}
100062ea:	bd70      	pop	{r4, r5, r6, pc}
		val->val1 = data->temperature / 100;
100062ec:	6868      	ldr	r0, [r5, #4]
100062ee:	3157      	adds	r1, #87	; 0x57
100062f0:	f7f9 ffa0 	bl	10000234 <__divsi3>
100062f4:	6020      	str	r0, [r4, #0]
		val->val2 = (data->temperature % 100) * 1000;
100062f6:	6868      	ldr	r0, [r5, #4]
100062f8:	2164      	movs	r1, #100	; 0x64
100062fa:	f7f9 ffe5 	bl	100002c8 <__aeabi_idivmod>
100062fe:	014b      	lsls	r3, r1, #5
10006300:	1a5b      	subs	r3, r3, r1
10006302:	009b      	lsls	r3, r3, #2
10006304:	185b      	adds	r3, r3, r1
10006306:	00db      	lsls	r3, r3, #3
10006308:	6063      	str	r3, [r4, #4]
		return 0;
1000630a:	2000      	movs	r0, #0
1000630c:	e7ed      	b.n	100062ea <ec2023_channel_get+0x16>
		val->val1 = data->soil_moisture;
1000630e:	2200      	movs	r2, #0
10006310:	5eab      	ldrsh	r3, [r5, r2]
10006312:	6023      	str	r3, [r4, #0]
		val->val2 = 0;
10006314:	2300      	movs	r3, #0
10006316:	6063      	str	r3, [r4, #4]
		return 0;
10006318:	2000      	movs	r0, #0
1000631a:	e7e6      	b.n	100062ea <ec2023_channel_get+0x16>
		val->val1 = data->air_quality;
1000631c:	2202      	movs	r2, #2
1000631e:	5eab      	ldrsh	r3, [r5, r2]
10006320:	6023      	str	r3, [r4, #0]
		val->val2 = 0;
10006322:	2300      	movs	r3, #0
10006324:	6063      	str	r3, [r4, #4]
		return 0;
10006326:	2000      	movs	r0, #0
10006328:	e7df      	b.n	100062ea <ec2023_channel_get+0x16>

1000632a <ec2023_init>:
	.sample_fetch = ec2023_sample_fetch,
	.channel_get = ec2023_channel_get,
};

int ec2023_init(const struct device *dev)
{
1000632a:	b510      	push	{r4, lr}
	const struct ec2023_config *cfg = dev->config;
1000632c:	6843      	ldr	r3, [r0, #4]

	if (device_is_ready(cfg->i2c.bus)) {
1000632e:	6818      	ldr	r0, [r3, #0]
10006330:	f000 faa8 	bl	10006884 <z_device_is_ready>
10006334:	2800      	cmp	r0, #0
10006336:	d001      	beq.n	1000633c <ec2023_init+0x12>
		return 0;
10006338:	2000      	movs	r0, #0
	}
	
	return -ENODEV;
}
1000633a:	bd10      	pop	{r4, pc}
	return -ENODEV;
1000633c:	3813      	subs	r0, #19
1000633e:	e7fc      	b.n	1000633a <ec2023_init+0x10>

10006340 <uart_set_format>:
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
10006340:	b510      	push	{r4, lr}
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10006342:	0004      	movs	r4, r0
10006344:	342c      	adds	r4, #44	; 0x2c
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10006346:	3905      	subs	r1, #5
10006348:	0149      	lsls	r1, r1, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000634a:	3a01      	subs	r2, #1
1000634c:	00d2      	lsls	r2, r2, #3
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
1000634e:	4311      	orrs	r1, r2
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10006350:	2b00      	cmp	r3, #0
10006352:	d00e      	beq.n	10006372 <uart_set_format+0x32>
10006354:	2202      	movs	r2, #2
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10006356:	430a      	orrs	r2, r1
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10006358:	2b01      	cmp	r3, #1
1000635a:	d00c      	beq.n	10006376 <uart_set_format+0x36>
1000635c:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000635e:	4313      	orrs	r3, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10006360:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
10006362:	4053      	eors	r3, r2
10006364:	226e      	movs	r2, #110	; 0x6e
10006366:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10006368:	2380      	movs	r3, #128	; 0x80
1000636a:	015b      	lsls	r3, r3, #5
1000636c:	4323      	orrs	r3, r4
1000636e:	601a      	str	r2, [r3, #0]
                   UART_UARTLCR_H_WLEN_BITS |
                   UART_UARTLCR_H_STP2_BITS |
                   UART_UARTLCR_H_PEN_BITS |
                   UART_UARTLCR_H_EPS_BITS);
}
10006370:	bd10      	pop	{r4, pc}
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10006372:	2200      	movs	r2, #0
10006374:	e7ef      	b.n	10006356 <uart_set_format+0x16>
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10006376:	3303      	adds	r3, #3
10006378:	e7f1      	b.n	1000635e <uart_set_format+0x1e>

1000637a <uart_rpi_poll_in>:
	const struct uart_rpi_config *config = dev->config;
1000637a:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
1000637c:	685a      	ldr	r2, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000637e:	6993      	ldr	r3, [r2, #24]
10006380:	06db      	lsls	r3, r3, #27
10006382:	d403      	bmi.n	1000638c <uart_rpi_poll_in+0x12>
	*c = (unsigned char)uart_hw->dr;
10006384:	6813      	ldr	r3, [r2, #0]
10006386:	700b      	strb	r3, [r1, #0]
	return 0;
10006388:	2000      	movs	r0, #0
}
1000638a:	4770      	bx	lr
		return -1;
1000638c:	2001      	movs	r0, #1
1000638e:	4240      	negs	r0, r0
10006390:	e7fb      	b.n	1000638a <uart_rpi_poll_in+0x10>

10006392 <uart_rpi_poll_out>:
	const struct uart_rpi_config *config = dev->config;
10006392:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
10006394:	685a      	ldr	r2, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10006396:	6993      	ldr	r3, [r2, #24]
10006398:	069b      	lsls	r3, r3, #26
1000639a:	d4fc      	bmi.n	10006396 <uart_rpi_poll_out+0x4>
	uart_hw->dr = c;
1000639c:	6011      	str	r1, [r2, #0]
}
1000639e:	4770      	bx	lr

100063a0 <uart_rpi_set_format>:
{
100063a0:	b510      	push	{r4, lr}
100063a2:	000c      	movs	r4, r1
	const struct uart_rpi_config *config = dev->config;
100063a4:	6843      	ldr	r3, [r0, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
100063a6:	6818      	ldr	r0, [r3, #0]
	switch (cfg->data_bits) {
100063a8:	798b      	ldrb	r3, [r1, #6]
100063aa:	2b02      	cmp	r3, #2
100063ac:	d01c      	beq.n	100063e8 <uart_rpi_set_format+0x48>
100063ae:	d817      	bhi.n	100063e0 <uart_rpi_set_format+0x40>
100063b0:	2b00      	cmp	r3, #0
100063b2:	d01b      	beq.n	100063ec <uart_rpi_set_format+0x4c>
100063b4:	2b01      	cmp	r3, #1
100063b6:	d110      	bne.n	100063da <uart_rpi_set_format+0x3a>
		data_bits = 6;
100063b8:	2106      	movs	r1, #6
	switch (cfg->stop_bits) {
100063ba:	7963      	ldrb	r3, [r4, #5]
100063bc:	2b01      	cmp	r3, #1
100063be:	d017      	beq.n	100063f0 <uart_rpi_set_format+0x50>
100063c0:	2b03      	cmp	r3, #3
100063c2:	d121      	bne.n	10006408 <uart_rpi_set_format+0x68>
		stop_bits = 2;
100063c4:	2202      	movs	r2, #2
	switch (cfg->parity) {
100063c6:	7923      	ldrb	r3, [r4, #4]
100063c8:	2b01      	cmp	r3, #1
100063ca:	d013      	beq.n	100063f4 <uart_rpi_set_format+0x54>
100063cc:	2b02      	cmp	r3, #2
100063ce:	d013      	beq.n	100063f8 <uart_rpi_set_format+0x58>
100063d0:	2b00      	cmp	r3, #0
100063d2:	d012      	beq.n	100063fa <uart_rpi_set_format+0x5a>
100063d4:	2016      	movs	r0, #22
100063d6:	4240      	negs	r0, r0
100063d8:	e012      	b.n	10006400 <uart_rpi_set_format+0x60>
	switch (cfg->data_bits) {
100063da:	2016      	movs	r0, #22
100063dc:	4240      	negs	r0, r0
100063de:	e00f      	b.n	10006400 <uart_rpi_set_format+0x60>
100063e0:	2b03      	cmp	r3, #3
100063e2:	d10e      	bne.n	10006402 <uart_rpi_set_format+0x62>
		data_bits = 8;
100063e4:	2108      	movs	r1, #8
100063e6:	e7e8      	b.n	100063ba <uart_rpi_set_format+0x1a>
		data_bits = 7;
100063e8:	2107      	movs	r1, #7
100063ea:	e7e6      	b.n	100063ba <uart_rpi_set_format+0x1a>
	switch (cfg->data_bits) {
100063ec:	2105      	movs	r1, #5
100063ee:	e7e4      	b.n	100063ba <uart_rpi_set_format+0x1a>
	switch (cfg->stop_bits) {
100063f0:	2201      	movs	r2, #1
100063f2:	e7e8      	b.n	100063c6 <uart_rpi_set_format+0x26>
		parity = UART_PARITY_ODD;
100063f4:	2302      	movs	r3, #2
100063f6:	e000      	b.n	100063fa <uart_rpi_set_format+0x5a>
		parity = UART_PARITY_EVEN;
100063f8:	2301      	movs	r3, #1
	uart_set_format(uart_inst, data_bits, stop_bits, parity);
100063fa:	f7ff ffa1 	bl	10006340 <uart_set_format>
	return 0;
100063fe:	2000      	movs	r0, #0
}
10006400:	bd10      	pop	{r4, pc}
	switch (cfg->data_bits) {
10006402:	2016      	movs	r0, #22
10006404:	4240      	negs	r0, r0
10006406:	e7fb      	b.n	10006400 <uart_rpi_set_format+0x60>
	switch (cfg->stop_bits) {
10006408:	2016      	movs	r0, #22
1000640a:	4240      	negs	r0, r0
1000640c:	e7f8      	b.n	10006400 <uart_rpi_set_format+0x60>

1000640e <uart_rpi_err_check>:
	const struct uart_rpi_config * const config = dev->config;
1000640e:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
10006410:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10006412:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10006414:	051a      	lsls	r2, r3, #20
10006416:	d40d      	bmi.n	10006434 <uart_rpi_err_check+0x26>
	int errors = 0;
10006418:	2000      	movs	r0, #0
	if (data_reg & UART_UARTDR_BE_BITS) {
1000641a:	055a      	lsls	r2, r3, #21
1000641c:	d501      	bpl.n	10006422 <uart_rpi_err_check+0x14>
		errors |= UART_BREAK;
1000641e:	2208      	movs	r2, #8
10006420:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
10006422:	059a      	lsls	r2, r3, #22
10006424:	d501      	bpl.n	1000642a <uart_rpi_err_check+0x1c>
		errors |= UART_ERROR_PARITY;
10006426:	2202      	movs	r2, #2
10006428:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
1000642a:	05db      	lsls	r3, r3, #23
1000642c:	d501      	bpl.n	10006432 <uart_rpi_err_check+0x24>
		errors |= UART_ERROR_FRAMING;
1000642e:	2304      	movs	r3, #4
10006430:	4318      	orrs	r0, r3
}
10006432:	4770      	bx	lr
		errors |= UART_ERROR_OVERRUN;
10006434:	2001      	movs	r0, #1
10006436:	e7f0      	b.n	1000641a <uart_rpi_err_check+0xc>

10006438 <uart_rpi_fifo_fill>:
{
10006438:	b510      	push	{r4, lr}
	const struct uart_rpi_config * const config = dev->config;
1000643a:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
1000643c:	685c      	ldr	r4, [r3, #4]
	int tx_len = 0;
1000643e:	2000      	movs	r0, #0
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10006440:	e002      	b.n	10006448 <uart_rpi_fifo_fill+0x10>
		uart_hw->dr = tx_data[tx_len++];
10006442:	5c0b      	ldrb	r3, [r1, r0]
10006444:	6023      	str	r3, [r4, #0]
10006446:	3001      	adds	r0, #1
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
10006448:	69a3      	ldr	r3, [r4, #24]
1000644a:	069b      	lsls	r3, r3, #26
1000644c:	d402      	bmi.n	10006454 <uart_rpi_fifo_fill+0x1c>
1000644e:	1a13      	subs	r3, r2, r0
10006450:	2b00      	cmp	r3, #0
10006452:	dcf6      	bgt.n	10006442 <uart_rpi_fifo_fill+0xa>
}
10006454:	bd10      	pop	{r4, pc}

10006456 <uart_rpi_fifo_read>:
{
10006456:	b510      	push	{r4, lr}
	const struct uart_rpi_config * const config = dev->config;
10006458:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
1000645a:	685c      	ldr	r4, [r3, #4]
	int rx_len = 0;
1000645c:	2000      	movs	r0, #0
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
1000645e:	e002      	b.n	10006466 <uart_rpi_fifo_read+0x10>
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
10006460:	6823      	ldr	r3, [r4, #0]
10006462:	540b      	strb	r3, [r1, r0]
10006464:	3001      	adds	r0, #1
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
10006466:	69a3      	ldr	r3, [r4, #24]
10006468:	06db      	lsls	r3, r3, #27
1000646a:	d402      	bmi.n	10006472 <uart_rpi_fifo_read+0x1c>
1000646c:	1a13      	subs	r3, r2, r0
1000646e:	2b00      	cmp	r3, #0
10006470:	dcf6      	bgt.n	10006460 <uart_rpi_fifo_read+0xa>
}
10006472:	bd10      	pop	{r4, pc}

10006474 <uart_rpi_irq_tx_enable>:
	const struct uart_rpi_config * const config = dev->config;
10006474:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
10006476:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10006478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1000647a:	2120      	movs	r1, #32
1000647c:	430a      	orrs	r2, r1
1000647e:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10006482:	3919      	subs	r1, #25
10006484:	438a      	bics	r2, r1
10006486:	635a      	str	r2, [r3, #52]	; 0x34
}
10006488:	4770      	bx	lr

1000648a <uart_rpi_irq_tx_disable>:
	const struct uart_rpi_config * const config = dev->config;
1000648a:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
1000648c:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000648e:	6b93      	ldr	r3, [r2, #56]	; 0x38
10006490:	2120      	movs	r1, #32
10006492:	438b      	bics	r3, r1
10006494:	6393      	str	r3, [r2, #56]	; 0x38
}
10006496:	4770      	bx	lr

10006498 <uart_rpi_irq_tx_ready>:
	const struct uart_rpi_config * const config = dev->config;
10006498:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
1000649a:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
1000649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000649e:	2020      	movs	r0, #32
100064a0:	4018      	ands	r0, r3
100064a2:	1e43      	subs	r3, r0, #1
100064a4:	4198      	sbcs	r0, r3
}
100064a6:	4770      	bx	lr

100064a8 <uart_rpi_irq_rx_enable>:
	const struct uart_rpi_config * const config = dev->config;
100064a8:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
100064aa:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
100064ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
100064ae:	2110      	movs	r1, #16
100064b0:	430a      	orrs	r2, r1
100064b2:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
100064b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
100064b6:	3128      	adds	r1, #40	; 0x28
100064b8:	438a      	bics	r2, r1
100064ba:	635a      	str	r2, [r3, #52]	; 0x34
}
100064bc:	4770      	bx	lr

100064be <uart_rpi_irq_rx_disable>:
	const struct uart_rpi_config * const config = dev->config;
100064be:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
100064c0:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
100064c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
100064c4:	2110      	movs	r1, #16
100064c6:	438b      	bics	r3, r1
100064c8:	6393      	str	r3, [r2, #56]	; 0x38
}
100064ca:	4770      	bx	lr

100064cc <uart_rpi_irq_tx_complete>:
	const struct uart_rpi_config * const config = dev->config;
100064cc:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
100064ce:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
100064d0:	699b      	ldr	r3, [r3, #24]
100064d2:	2080      	movs	r0, #128	; 0x80
100064d4:	4018      	ands	r0, r3
100064d6:	1e43      	subs	r3, r0, #1
100064d8:	4198      	sbcs	r0, r3
}
100064da:	4770      	bx	lr

100064dc <uart_rpi_irq_rx_ready>:
	const struct uart_rpi_config * const config = dev->config;
100064dc:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
100064de:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
100064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100064e2:	2010      	movs	r0, #16
100064e4:	4018      	ands	r0, r3
100064e6:	1e43      	subs	r3, r0, #1
100064e8:	4198      	sbcs	r0, r3
}
100064ea:	4770      	bx	lr

100064ec <uart_rpi_irq_err_enable>:
	const struct uart_rpi_config * const config = dev->config;
100064ec:	6843      	ldr	r3, [r0, #4]
	uart_hw_t * const uart_hw = config->uart_regs;
100064ee:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
100064f0:	6b91      	ldr	r1, [r2, #56]	; 0x38
100064f2:	23f8      	movs	r3, #248	; 0xf8
100064f4:	00db      	lsls	r3, r3, #3
100064f6:	430b      	orrs	r3, r1
100064f8:	6393      	str	r3, [r2, #56]	; 0x38
}
100064fa:	4770      	bx	lr

100064fc <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
100064fc:	b510      	push	{r4, lr}
100064fe:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10006500:	f7ff ffec 	bl	100064dc <uart_rpi_irq_rx_ready>
10006504:	2800      	cmp	r0, #0
10006506:	d001      	beq.n	1000650c <uart_rpi_irq_is_pending+0x10>
10006508:	2001      	movs	r0, #1
}
1000650a:	bd10      	pop	{r4, pc}
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
1000650c:	0020      	movs	r0, r4
1000650e:	f7ff ffc3 	bl	10006498 <uart_rpi_irq_tx_ready>
10006512:	2800      	cmp	r0, #0
10006514:	d0f9      	beq.n	1000650a <uart_rpi_irq_is_pending+0xe>
10006516:	2001      	movs	r0, #1
10006518:	e7f7      	b.n	1000650a <uart_rpi_irq_is_pending+0xe>

1000651a <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
1000651a:	2001      	movs	r0, #1
1000651c:	4770      	bx	lr

1000651e <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
1000651e:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10006520:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10006522:	60da      	str	r2, [r3, #12]
}
10006524:	4770      	bx	lr

10006526 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10006526:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
10006528:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
1000652a:	6893      	ldr	r3, [r2, #8]
1000652c:	2b00      	cmp	r3, #0
1000652e:	d001      	beq.n	10006534 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
10006530:	68d1      	ldr	r1, [r2, #12]
10006532:	4798      	blx	r3
	}
}
10006534:	bd10      	pop	{r4, pc}

10006536 <uart_rpi_config_get>:
{
10006536:	b510      	push	{r4, lr}
10006538:	0003      	movs	r3, r0
1000653a:	0008      	movs	r0, r1
	struct uart_rpi_data *data = dev->data;
1000653c:	6919      	ldr	r1, [r3, #16]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
1000653e:	2208      	movs	r2, #8
10006540:	f7fd f854 	bl	100035ec <memcpy>
}
10006544:	2000      	movs	r0, #0
10006546:	bd10      	pop	{r4, pc}

10006548 <uart_rpi_configure>:
{
10006548:	b570      	push	{r4, r5, r6, lr}
1000654a:	0005      	movs	r5, r0
1000654c:	000c      	movs	r4, r1
	const struct uart_rpi_config *config = dev->config;
1000654e:	6843      	ldr	r3, [r0, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
10006550:	6818      	ldr	r0, [r3, #0]
	struct uart_rpi_data *data = dev->data;
10006552:	692e      	ldr	r6, [r5, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
10006554:	6809      	ldr	r1, [r1, #0]
10006556:	f7fb fcff 	bl	10001f58 <uart_set_baudrate>
	if (baudrate == 0) {
1000655a:	2800      	cmp	r0, #0
1000655c:	d008      	beq.n	10006570 <uart_rpi_configure+0x28>
	if (uart_rpi_set_format(dev, cfg) != 0) {
1000655e:	0021      	movs	r1, r4
10006560:	0028      	movs	r0, r5
10006562:	f7ff ff1d 	bl	100063a0 <uart_rpi_set_format>
10006566:	2800      	cmp	r0, #0
10006568:	d105      	bne.n	10006576 <uart_rpi_configure+0x2e>
	data->uart_config = *cfg;
1000656a:	cc06      	ldmia	r4!, {r1, r2}
1000656c:	c606      	stmia	r6!, {r1, r2}
}
1000656e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
10006570:	2016      	movs	r0, #22
10006572:	4240      	negs	r0, r0
10006574:	e7fb      	b.n	1000656e <uart_rpi_configure+0x26>
		return -EINVAL;
10006576:	2016      	movs	r0, #22
10006578:	4240      	negs	r0, r0
1000657a:	e7f8      	b.n	1000656e <uart_rpi_configure+0x26>

1000657c <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
1000657c:	b510      	push	{r4, lr}
1000657e:	2200      	movs	r2, #0
10006580:	2103      	movs	r1, #3
10006582:	2014      	movs	r0, #20
10006584:	f7ff fa2e 	bl	100059e4 <z_arm_irq_priority_set>
10006588:	2014      	movs	r0, #20
1000658a:	f7fa fd1f 	bl	10000fcc <arch_irq_enable>
1000658e:	bd10      	pop	{r4, pc}

10006590 <pinctrl_apply_state>:
{
10006590:	b500      	push	{lr}
10006592:	b083      	sub	sp, #12
	ret = pinctrl_lookup_state(config, id, &state);
10006594:	aa01      	add	r2, sp, #4
10006596:	f000 f840 	bl	1000661a <pinctrl_lookup_state>
	if (ret < 0) {
1000659a:	2800      	cmp	r0, #0
1000659c:	db05      	blt.n	100065aa <pinctrl_apply_state+0x1a>
	return pinctrl_apply_state_direct(config, state);
1000659e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100065a0:	6818      	ldr	r0, [r3, #0]
100065a2:	7919      	ldrb	r1, [r3, #4]
100065a4:	2200      	movs	r2, #0
100065a6:	f000 f887 	bl	100066b8 <pinctrl_configure_pins>
}
100065aa:	b003      	add	sp, #12
100065ac:	bd00      	pop	{pc}

100065ae <uart_rpi_init>:
{
100065ae:	b5f0      	push	{r4, r5, r6, r7, lr}
100065b0:	46c6      	mov	lr, r8
100065b2:	b500      	push	{lr}
100065b4:	0004      	movs	r4, r0
	const struct uart_rpi_config *config = dev->config;
100065b6:	6846      	ldr	r6, [r0, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
100065b8:	6833      	ldr	r3, [r6, #0]
100065ba:	4698      	mov	r8, r3
	uart_hw_t * const uart_hw = config->uart_regs;
100065bc:	6877      	ldr	r7, [r6, #4]
	struct uart_rpi_data * const data = dev->data;
100065be:	6905      	ldr	r5, [r0, #16]
	ret = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
100065c0:	68b0      	ldr	r0, [r6, #8]
100065c2:	2100      	movs	r1, #0
100065c4:	f7ff ffe4 	bl	10006590 <pinctrl_apply_state>
	if (ret < 0) {
100065c8:	2800      	cmp	r0, #0
100065ca:	db20      	blt.n	1000660e <uart_rpi_init+0x60>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
100065cc:	6829      	ldr	r1, [r5, #0]
100065ce:	4640      	mov	r0, r8
100065d0:	f7fb fd04 	bl	10001fdc <uart_init>
	if (baudrate == 0) {
100065d4:	2800      	cmp	r0, #0
100065d6:	d01d      	beq.n	10006614 <uart_rpi_init+0x66>
	data->uart_config = (struct uart_config){
100065d8:	6028      	str	r0, [r5, #0]
100065da:	2300      	movs	r3, #0
100065dc:	4698      	mov	r8, r3
100065de:	712b      	strb	r3, [r5, #4]
100065e0:	3301      	adds	r3, #1
100065e2:	716b      	strb	r3, [r5, #5]
100065e4:	3302      	adds	r3, #2
100065e6:	71ab      	strb	r3, [r5, #6]
100065e8:	4643      	mov	r3, r8
100065ea:	71eb      	strb	r3, [r5, #7]
	uart_rpi_set_format(dev, &data->uart_config);
100065ec:	0029      	movs	r1, r5
100065ee:	0020      	movs	r0, r4
100065f0:	f7ff fed6 	bl	100063a0 <uart_rpi_set_format>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
100065f4:	003a      	movs	r2, r7
100065f6:	322c      	adds	r2, #44	; 0x2c
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100065f8:	23c0      	movs	r3, #192	; 0xc0
100065fa:	019b      	lsls	r3, r3, #6
100065fc:	4313      	orrs	r3, r2
100065fe:	2210      	movs	r2, #16
10006600:	601a      	str	r2, [r3, #0]
	uart_hw->dr = 0U;
10006602:	4643      	mov	r3, r8
10006604:	603b      	str	r3, [r7, #0]
	config->irq_config_func(dev);
10006606:	6973      	ldr	r3, [r6, #20]
10006608:	0020      	movs	r0, r4
1000660a:	4798      	blx	r3
	return 0;
1000660c:	2000      	movs	r0, #0
}
1000660e:	bc80      	pop	{r7}
10006610:	46b8      	mov	r8, r7
10006612:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10006614:	2016      	movs	r0, #22
10006616:	4240      	negs	r0, r0
10006618:	e7f9      	b.n	1000660e <uart_rpi_init+0x60>

1000661a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
1000661a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
1000661c:	6803      	ldr	r3, [r0, #0]
1000661e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10006620:	e001      	b.n	10006626 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
10006622:	3308      	adds	r3, #8
10006624:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
10006626:	6813      	ldr	r3, [r2, #0]
10006628:	6804      	ldr	r4, [r0, #0]
1000662a:	7905      	ldrb	r5, [r0, #4]
1000662c:	00ed      	lsls	r5, r5, #3
1000662e:	1964      	adds	r4, r4, r5
10006630:	42a3      	cmp	r3, r4
10006632:	d204      	bcs.n	1000663e <pinctrl_lookup_state+0x24>
		if (id == (*state)->id) {
10006634:	795c      	ldrb	r4, [r3, #5]
10006636:	428c      	cmp	r4, r1
10006638:	d1f3      	bne.n	10006622 <pinctrl_lookup_state+0x8>
			return 0;
1000663a:	2000      	movs	r0, #0
1000663c:	e001      	b.n	10006642 <pinctrl_lookup_state+0x28>
	}

	return -ENOENT;
1000663e:	2002      	movs	r0, #2
10006640:	4240      	negs	r0, r0
}
10006642:	bd30      	pop	{r4, r5, pc}

10006644 <pinctrl_configure_pin>:

/* pico-sdk includes */
#include <hardware/gpio.h>

static void pinctrl_configure_pin(const pinctrl_soc_pin_t *pin)
{
10006644:	b510      	push	{r4, lr}
10006646:	0004      	movs	r4, r0
	gpio_init(pin->pin_num);
10006648:	7800      	ldrb	r0, [r0, #0]
1000664a:	06c0      	lsls	r0, r0, #27
1000664c:	0ec0      	lsrs	r0, r0, #27
1000664e:	f000 f90e 	bl	1000686e <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
10006652:	7820      	ldrb	r0, [r4, #0]
10006654:	06c0      	lsls	r0, r0, #27
10006656:	0ec0      	lsrs	r0, r0, #27
10006658:	8821      	ldrh	r1, [r4, #0]
1000665a:	05c9      	lsls	r1, r1, #23
1000665c:	0f09      	lsrs	r1, r1, #28
1000665e:	f7fb fbdd 	bl	10001e1c <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10006662:	7820      	ldrb	r0, [r4, #0]
10006664:	06c0      	lsls	r0, r0, #27
10006666:	0ec0      	lsrs	r0, r0, #27
10006668:	7862      	ldrb	r2, [r4, #1]
1000666a:	0651      	lsls	r1, r2, #25
1000666c:	0fc9      	lsrs	r1, r1, #31
1000666e:	09d2      	lsrs	r2, r2, #7
10006670:	f7fb fbec 	bl	10001e4c <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10006674:	7820      	ldrb	r0, [r4, #0]
10006676:	06c0      	lsls	r0, r0, #27
10006678:	0ec0      	lsrs	r0, r0, #27
1000667a:	7861      	ldrb	r1, [r4, #1]
1000667c:	06c9      	lsls	r1, r1, #27
1000667e:	0f09      	lsrs	r1, r1, #28
10006680:	f7fb fc26 	bl	10001ed0 <gpio_set_drive_strength>
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10006684:	7820      	ldrb	r0, [r4, #0]
10006686:	06c0      	lsls	r0, r0, #27
10006688:	0ec0      	lsrs	r0, r0, #27
1000668a:	7863      	ldrb	r3, [r4, #1]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
1000668c:	095b      	lsrs	r3, r3, #5
1000668e:	2101      	movs	r1, #1
10006690:	4019      	ands	r1, r3
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10006692:	f7fb fc0d 	bl	10001eb0 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10006696:	7820      	ldrb	r0, [r4, #0]
10006698:	06c0      	lsls	r0, r0, #27
1000669a:	0ec0      	lsrs	r0, r0, #27
1000669c:	78a1      	ldrb	r1, [r4, #2]
1000669e:	0789      	lsls	r1, r1, #30
100066a0:	0fc9      	lsrs	r1, r1, #31
100066a2:	f7fb fbed 	bl	10001e80 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
100066a6:	7820      	ldrb	r0, [r4, #0]
100066a8:	06c0      	lsls	r0, r0, #27
100066aa:	0ec0      	lsrs	r0, r0, #27
100066ac:	78a1      	ldrb	r1, [r4, #2]
100066ae:	07c9      	lsls	r1, r1, #31
100066b0:	0fc9      	lsrs	r1, r1, #31
100066b2:	f7fb fc39 	bl	10001f28 <gpio_set_input_enabled>
}
100066b6:	bd10      	pop	{r4, pc}

100066b8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
100066b8:	b570      	push	{r4, r5, r6, lr}
100066ba:	000e      	movs	r6, r1
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
100066bc:	2400      	movs	r4, #0
100066be:	e005      	b.n	100066cc <pinctrl_configure_pins+0x14>
		pinctrl_configure_pin(pins++);
100066c0:	1d05      	adds	r5, r0, #4
100066c2:	f7ff ffbf 	bl	10006644 <pinctrl_configure_pin>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
100066c6:	3401      	adds	r4, #1
100066c8:	b2e4      	uxtb	r4, r4
		pinctrl_configure_pin(pins++);
100066ca:	0028      	movs	r0, r5
	for (uint8_t i = 0U; i < pin_cnt; i++) {
100066cc:	42b4      	cmp	r4, r6
100066ce:	d3f7      	bcc.n	100066c0 <pinctrl_configure_pins+0x8>
	}

	return 0;
}
100066d0:	2000      	movs	r0, #0
100066d2:	bd70      	pop	{r4, r5, r6, pc}

100066d4 <reset_rpi_read_register>:
	uintptr_t base_address;
};

static int reset_rpi_read_register(const struct device *dev, uint16_t offset, uint32_t *value)
{
	const struct reset_rpi_config *config = dev->config;
100066d4:	6843      	ldr	r3, [r0, #4]
	uint32_t base_address = config->base_address;
100066d6:	6898      	ldr	r0, [r3, #8]

	switch (config->reg_width) {
100066d8:	791b      	ldrb	r3, [r3, #4]
100066da:	2b02      	cmp	r3, #2
100066dc:	d00b      	beq.n	100066f6 <reset_rpi_read_register+0x22>
100066de:	2b04      	cmp	r3, #4
100066e0:	d00e      	beq.n	10006700 <reset_rpi_read_register+0x2c>
100066e2:	2b01      	cmp	r3, #1
100066e4:	d002      	beq.n	100066ec <reset_rpi_read_register+0x18>
100066e6:	2016      	movs	r0, #22
100066e8:	4240      	negs	r0, r0
	default:
		return -EINVAL;
	}

	return 0;
}
100066ea:	4770      	bx	lr
		*value = sys_read8(base_address + offset);
100066ec:	1809      	adds	r1, r1, r0
	return *(volatile uint8_t *)addr;
100066ee:	780b      	ldrb	r3, [r1, #0]
100066f0:	6013      	str	r3, [r2, #0]
	return 0;
100066f2:	2000      	movs	r0, #0
		break;
100066f4:	e7f9      	b.n	100066ea <reset_rpi_read_register+0x16>
		*value = sys_read16(base_address + offset);
100066f6:	1809      	adds	r1, r1, r0
	return *(volatile uint16_t *)addr;
100066f8:	880b      	ldrh	r3, [r1, #0]
100066fa:	6013      	str	r3, [r2, #0]
	return 0;
100066fc:	2000      	movs	r0, #0
		break;
100066fe:	e7f4      	b.n	100066ea <reset_rpi_read_register+0x16>
		*value = sys_read32(base_address + offset);
10006700:	1809      	adds	r1, r1, r0
	return *(volatile uint32_t *)addr;
10006702:	680b      	ldr	r3, [r1, #0]
10006704:	6013      	str	r3, [r2, #0]
	return 0;
10006706:	2000      	movs	r0, #0
		break;
10006708:	e7ef      	b.n	100066ea <reset_rpi_read_register+0x16>

1000670a <reset_rpi_write_register>:

static int reset_rpi_write_register(const struct device *dev, uint16_t offset, uint32_t value)
{
	const struct reset_rpi_config *config = dev->config;
1000670a:	6843      	ldr	r3, [r0, #4]
	uint32_t base_address = config->base_address;
1000670c:	6898      	ldr	r0, [r3, #8]

	switch (config->reg_width) {
1000670e:	791b      	ldrb	r3, [r3, #4]
10006710:	2b02      	cmp	r3, #2
10006712:	d00b      	beq.n	1000672c <reset_rpi_write_register+0x22>
10006714:	2b04      	cmp	r3, #4
10006716:	d00e      	beq.n	10006736 <reset_rpi_write_register+0x2c>
10006718:	2b01      	cmp	r3, #1
1000671a:	d002      	beq.n	10006722 <reset_rpi_write_register+0x18>
1000671c:	2016      	movs	r0, #22
1000671e:	4240      	negs	r0, r0
	default:
		return -EINVAL;
	}

	return 0;
}
10006720:	4770      	bx	lr
		sys_write8(value, base_address + offset);
10006722:	b2d2      	uxtb	r2, r2
10006724:	1809      	adds	r1, r1, r0
	*(volatile uint8_t *)addr = data;
10006726:	700a      	strb	r2, [r1, #0]
	return 0;
10006728:	2000      	movs	r0, #0
}
1000672a:	e7f9      	b.n	10006720 <reset_rpi_write_register+0x16>
		sys_write16(value, base_address + offset);
1000672c:	b292      	uxth	r2, r2
1000672e:	1809      	adds	r1, r1, r0
	*(volatile uint16_t *)addr = data;
10006730:	800a      	strh	r2, [r1, #0]
	return 0;
10006732:	2000      	movs	r0, #0
}
10006734:	e7f4      	b.n	10006720 <reset_rpi_write_register+0x16>
		sys_write32(value, base_address + offset);
10006736:	1809      	adds	r1, r1, r0
	*(volatile uint32_t *)addr = data;
10006738:	600a      	str	r2, [r1, #0]
	return 0;
1000673a:	2000      	movs	r0, #0
}
1000673c:	e7f0      	b.n	10006720 <reset_rpi_write_register+0x16>

1000673e <reset_rpi_status>:

static int reset_rpi_status(const struct device *dev, uint32_t id, uint8_t *status)
{
1000673e:	b5f0      	push	{r4, r5, r6, r7, lr}
10006740:	46ce      	mov	lr, r9
10006742:	b500      	push	{lr}
10006744:	b084      	sub	sp, #16
10006746:	0004      	movs	r4, r0
10006748:	000d      	movs	r5, r1
1000674a:	9201      	str	r2, [sp, #4]
	const struct reset_rpi_config *config = dev->config;
1000674c:	6846      	ldr	r6, [r0, #4]
	uint16_t offset;
	uint32_t value;
	uint8_t regbit;
	int ret;

	offset = id / (config->reg_width * CHAR_BIT);
1000674e:	7937      	ldrb	r7, [r6, #4]
10006750:	00ff      	lsls	r7, r7, #3
10006752:	0039      	movs	r1, r7
10006754:	0028      	movs	r0, r5
10006756:	f7f9 fd27 	bl	100001a8 <__udivsi3>
1000675a:	b283      	uxth	r3, r0
1000675c:	4699      	mov	r9, r3
	regbit = id % (config->reg_width * CHAR_BIT);
1000675e:	0039      	movs	r1, r7
10006760:	0028      	movs	r0, r5
10006762:	f7f9 fd5d 	bl	10000220 <__aeabi_uidivmod>
10006766:	000d      	movs	r5, r1

	ret = reset_rpi_read_register(dev, offset, &value);
10006768:	aa03      	add	r2, sp, #12
1000676a:	4649      	mov	r1, r9
1000676c:	0020      	movs	r0, r4
1000676e:	f7ff ffb1 	bl	100066d4 <reset_rpi_read_register>
	if (ret) {
10006772:	2800      	cmp	r0, #0
10006774:	d10c      	bne.n	10006790 <reset_rpi_status+0x52>
		return ret;
	}

	*status = !(value & BIT(regbit)) ^ !config->active_low;
10006776:	22ff      	movs	r2, #255	; 0xff
10006778:	402a      	ands	r2, r5
1000677a:	9b03      	ldr	r3, [sp, #12]
1000677c:	40d3      	lsrs	r3, r2
1000677e:	2201      	movs	r2, #1
10006780:	4053      	eors	r3, r2
10006782:	401a      	ands	r2, r3
10006784:	7973      	ldrb	r3, [r6, #5]
10006786:	4259      	negs	r1, r3
10006788:	414b      	adcs	r3, r1
1000678a:	4053      	eors	r3, r2
1000678c:	9a01      	ldr	r2, [sp, #4]
1000678e:	7013      	strb	r3, [r2, #0]

	return ret;
}
10006790:	b004      	add	sp, #16
10006792:	bc80      	pop	{r7}
10006794:	46b9      	mov	r9, r7
10006796:	bdf0      	pop	{r4, r5, r6, r7, pc}

10006798 <reset_rpi_update>:

static int reset_rpi_update(const struct device *dev, uint32_t id, uint8_t assert)
{
10006798:	b5f0      	push	{r4, r5, r6, r7, lr}
1000679a:	46ce      	mov	lr, r9
1000679c:	b500      	push	{lr}
1000679e:	b084      	sub	sp, #16
100067a0:	0006      	movs	r6, r0
100067a2:	000d      	movs	r5, r1
100067a4:	9201      	str	r2, [sp, #4]
	const struct reset_rpi_config *config = dev->config;
100067a6:	6844      	ldr	r4, [r0, #4]
	uint16_t offset;
	uint32_t value;
	uint8_t regbit;
	int ret;

	offset = id / (config->reg_width * CHAR_BIT);
100067a8:	7923      	ldrb	r3, [r4, #4]
100067aa:	00db      	lsls	r3, r3, #3
100067ac:	4699      	mov	r9, r3
100067ae:	0019      	movs	r1, r3
100067b0:	0028      	movs	r0, r5
100067b2:	f7f9 fcf9 	bl	100001a8 <__udivsi3>
100067b6:	b287      	uxth	r7, r0
	regbit = id % (config->reg_width * CHAR_BIT);
100067b8:	4649      	mov	r1, r9
100067ba:	0028      	movs	r0, r5
100067bc:	f7f9 fd30 	bl	10000220 <__aeabi_uidivmod>
100067c0:	000d      	movs	r5, r1

	ret = reset_rpi_read_register(dev, offset, &value);
100067c2:	aa03      	add	r2, sp, #12
100067c4:	0039      	movs	r1, r7
100067c6:	0030      	movs	r0, r6
100067c8:	f7ff ff84 	bl	100066d4 <reset_rpi_read_register>
	if (ret) {
100067cc:	2800      	cmp	r0, #0
100067ce:	d10f      	bne.n	100067f0 <reset_rpi_update+0x58>
		return ret;
	}

	if (assert ^ config->active_low) {
100067d0:	7963      	ldrb	r3, [r4, #5]
100067d2:	9a01      	ldr	r2, [sp, #4]
100067d4:	4293      	cmp	r3, r2
100067d6:	d00f      	beq.n	100067f8 <reset_rpi_update+0x60>
		value |= BIT(regbit);
100067d8:	23ff      	movs	r3, #255	; 0xff
100067da:	402b      	ands	r3, r5
100067dc:	2201      	movs	r2, #1
100067de:	409a      	lsls	r2, r3
100067e0:	9b03      	ldr	r3, [sp, #12]
100067e2:	4313      	orrs	r3, r2
100067e4:	9303      	str	r3, [sp, #12]
	} else {
		value &= ~BIT(regbit);
	}

	return reset_rpi_write_register(dev, offset, value);
100067e6:	9a03      	ldr	r2, [sp, #12]
100067e8:	0039      	movs	r1, r7
100067ea:	0030      	movs	r0, r6
100067ec:	f7ff ff8d 	bl	1000670a <reset_rpi_write_register>
}
100067f0:	b004      	add	sp, #16
100067f2:	bc80      	pop	{r7}
100067f4:	46b9      	mov	r9, r7
100067f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value &= ~BIT(regbit);
100067f8:	23ff      	movs	r3, #255	; 0xff
100067fa:	402b      	ands	r3, r5
100067fc:	2201      	movs	r2, #1
100067fe:	409a      	lsls	r2, r3
10006800:	9b03      	ldr	r3, [sp, #12]
10006802:	4393      	bics	r3, r2
10006804:	9303      	str	r3, [sp, #12]
10006806:	e7ee      	b.n	100067e6 <reset_rpi_update+0x4e>

10006808 <reset_rpi_line_assert>:

static int reset_rpi_line_assert(const struct device *dev, uint32_t id)
{
10006808:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
1000680a:	2201      	movs	r2, #1
1000680c:	f7ff ffc4 	bl	10006798 <reset_rpi_update>
}
10006810:	bd10      	pop	{r4, pc}

10006812 <reset_rpi_line_deassert>:

static int reset_rpi_line_deassert(const struct device *dev, uint32_t id)
{
10006812:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
10006814:	2200      	movs	r2, #0
10006816:	f7ff ffbf 	bl	10006798 <reset_rpi_update>
}
1000681a:	bd10      	pop	{r4, pc}

1000681c <reset_rpi_line_toggle>:

static int reset_rpi_line_toggle(const struct device *dev, uint32_t id)
{
1000681c:	b570      	push	{r4, r5, r6, lr}
1000681e:	0004      	movs	r4, r0
10006820:	000d      	movs	r5, r1
	int ret;

	ret = reset_rpi_line_assert(dev, id);
10006822:	f7ff fff1 	bl	10006808 <reset_rpi_line_assert>
	if (ret) {
10006826:	2800      	cmp	r0, #0
10006828:	d000      	beq.n	1000682c <reset_rpi_line_toggle+0x10>
		return ret;
	}

	return reset_rpi_line_deassert(dev, id);
}
1000682a:	bd70      	pop	{r4, r5, r6, pc}
	return reset_rpi_line_deassert(dev, id);
1000682c:	0029      	movs	r1, r5
1000682e:	0020      	movs	r0, r4
10006830:	f7ff ffef 	bl	10006812 <reset_rpi_line_deassert>
10006834:	e7f9      	b.n	1000682a <reset_rpi_line_toggle+0xe>

10006836 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10006836:	2000      	movs	r0, #0
10006838:	4770      	bx	lr

1000683a <_gpio_set_irq_enabled>:
static void _gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled, io_irq_ctrl_hw_t *irq_ctrl_base) {
1000683a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000683c:	0007      	movs	r7, r0
1000683e:	000c      	movs	r4, r1
10006840:	0016      	movs	r6, r2
10006842:	001d      	movs	r5, r3
    gpio_acknowledge_irq(gpio, events);
10006844:	f7fb fb54 	bl	10001ef0 <gpio_acknowledge_irq>
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
10006848:	08fb      	lsrs	r3, r7, #3
1000684a:	009b      	lsls	r3, r3, #2
1000684c:	18ed      	adds	r5, r5, r3
    events <<= 4 * (gpio % 8);
1000684e:	2007      	movs	r0, #7
10006850:	4038      	ands	r0, r7
10006852:	0080      	lsls	r0, r0, #2
10006854:	4084      	lsls	r4, r0
    if (enabled)
10006856:	2e00      	cmp	r6, #0
10006858:	d004      	beq.n	10006864 <_gpio_set_irq_enabled+0x2a>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000685a:	2380      	movs	r3, #128	; 0x80
1000685c:	019b      	lsls	r3, r3, #6
1000685e:	432b      	orrs	r3, r5
10006860:	601c      	str	r4, [r3, #0]
}
10006862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10006864:	23c0      	movs	r3, #192	; 0xc0
10006866:	019b      	lsls	r3, r3, #6
10006868:	432b      	orrs	r3, r5
1000686a:	601c      	str	r4, [r3, #0]
1000686c:	e7f9      	b.n	10006862 <_gpio_set_irq_enabled+0x28>

1000686e <gpio_init>:

void gpio_init(uint gpio) {
1000686e:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10006870:	2301      	movs	r3, #1
10006872:	4083      	lsls	r3, r0
10006874:	22d0      	movs	r2, #208	; 0xd0
10006876:	0612      	lsls	r2, r2, #24
10006878:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
1000687a:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000687c:	2105      	movs	r1, #5
1000687e:	f7fb facd 	bl	10001e1c <gpio_set_function>
}
10006882:	bd10      	pop	{r4, pc}

10006884 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10006884:	2800      	cmp	r0, #0
10006886:	d00c      	beq.n	100068a2 <z_device_is_ready+0x1e>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
10006888:	68c2      	ldr	r2, [r0, #12]
1000688a:	7853      	ldrb	r3, [r2, #1]
1000688c:	07db      	lsls	r3, r3, #31
1000688e:	d504      	bpl.n	1000689a <z_device_is_ready+0x16>
10006890:	7813      	ldrb	r3, [r2, #0]
10006892:	2b00      	cmp	r3, #0
10006894:	d003      	beq.n	1000689e <z_device_is_ready+0x1a>
10006896:	2000      	movs	r0, #0
10006898:	e000      	b.n	1000689c <z_device_is_ready+0x18>
1000689a:	2000      	movs	r0, #0
}
1000689c:	4770      	bx	lr
	return dev->state->initialized && (dev->state->init_res == 0U);
1000689e:	2001      	movs	r0, #1
100068a0:	e7fc      	b.n	1000689c <z_device_is_ready+0x18>
		return false;
100068a2:	2000      	movs	r0, #0
100068a4:	e7fa      	b.n	1000689c <z_device_is_ready+0x18>

100068a6 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
100068a6:	f3ef 8310 	mrs	r3, PRIMASK
100068aa:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
100068ac:	e7fe      	b.n	100068ac <arch_system_halt+0x6>

100068ae <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
100068ae:	b510      	push	{r4, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
100068b0:	f7ff fff9 	bl	100068a6 <arch_system_halt>

100068b4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100068b6:	0005      	movs	r5, r0
100068b8:	000e      	movs	r6, r1
100068ba:	f3ef 8710 	mrs	r7, PRIMASK
100068be:	b672      	cpsid	i
	return z_impl_z_current_get();
100068c0:	f7fc f9ee 	bl	10002ca0 <z_impl_z_current_get>
100068c4:	0004      	movs	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
100068c6:	0031      	movs	r1, r6
100068c8:	0028      	movs	r0, r5
100068ca:	f7ff fff0 	bl	100068ae <k_sys_fatal_error_handler>
	if (key != 0U) {
100068ce:	2f00      	cmp	r7, #0
100068d0:	d102      	bne.n	100068d8 <z_fatal_error+0x24>
	__asm__ volatile(
100068d2:	b662      	cpsie	i
100068d4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
100068d8:	0020      	movs	r0, r4
100068da:	f7fa fceb 	bl	100012b4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
100068de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100068e0 <z_early_memset>:
{
100068e0:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
100068e2:	f7fc fecb 	bl	1000367c <memset>
}
100068e6:	bd10      	pop	{r4, pc}

100068e8 <z_early_memcpy>:
{
100068e8:	b510      	push	{r4, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
100068ea:	f7fc fe7f 	bl	100035ec <memcpy>
}
100068ee:	bd10      	pop	{r4, pc}

100068f0 <setup_thread_stack>:
{
100068f0:	0003      	movs	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
100068f2:	3207      	adds	r2, #7
100068f4:	2007      	movs	r0, #7
100068f6:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
100068f8:	1888      	adds	r0, r1, r2
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
100068fa:	6659      	str	r1, [r3, #100]	; 0x64
	new_thread->stack_info.size = stack_buf_size;
100068fc:	669a      	str	r2, [r3, #104]	; 0x68
	new_thread->stack_info.delta = delta;
100068fe:	2200      	movs	r2, #0
10006900:	66da      	str	r2, [r3, #108]	; 0x6c
}
10006902:	4770      	bx	lr

10006904 <z_impl_k_thread_start>:
{
10006904:	b510      	push	{r4, lr}
	z_sched_start(thread);
10006906:	f7fb ffdd 	bl	100028c4 <z_sched_start>
}
1000690a:	bd10      	pop	{r4, pc}

1000690c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
1000690c:	b510      	push	{r4, lr}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
1000690e:	2400      	movs	r4, #0
10006910:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
10006912:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10006914:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
10006916:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
10006918:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
1000691a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
1000691c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
1000691e:	bd10      	pop	{r4, pc}

10006920 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10006920:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10006922:	f3ef 8310 	mrs	r3, PRIMASK
10006926:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
10006928:	f7fa fb18 	bl	10000f5c <arch_cpu_idle>
1000692c:	e7f9      	b.n	10006922 <idle+0x2>

1000692e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
1000692e:	4288      	cmp	r0, r1
10006930:	da00      	bge.n	10006934 <new_prio_for_inheritance+0x6>
10006932:	0001      	movs	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
10006934:	000b      	movs	r3, r1
10006936:	337f      	adds	r3, #127	; 0x7f
10006938:	db01      	blt.n	1000693e <new_prio_for_inheritance+0x10>
1000693a:	0008      	movs	r0, r1
}
1000693c:	4770      	bx	lr
1000693e:	207f      	movs	r0, #127	; 0x7f
10006940:	4240      	negs	r0, r0
	return new_prio;
10006942:	e7fb      	b.n	1000693c <new_prio_for_inheritance+0xe>

10006944 <adjust_owner_prio>:
{
10006944:	b510      	push	{r4, lr}
	if (mutex->owner->base.prio != new_prio) {
10006946:	6880      	ldr	r0, [r0, #8]
10006948:	230e      	movs	r3, #14
1000694a:	56c3      	ldrsb	r3, [r0, r3]
1000694c:	428b      	cmp	r3, r1
1000694e:	d101      	bne.n	10006954 <adjust_owner_prio+0x10>
	return false;
10006950:	2000      	movs	r0, #0
}
10006952:	bd10      	pop	{r4, pc}
		return z_set_prio(mutex->owner, new_prio);
10006954:	f7fc f804 	bl	10002960 <z_set_prio>
10006958:	e7fb      	b.n	10006952 <adjust_owner_prio+0xe>

1000695a <z_impl_k_mutex_init>:
	mutex->owner = NULL;
1000695a:	2300      	movs	r3, #0
1000695c:	6083      	str	r3, [r0, #8]
	mutex->lock_count = 0U;
1000695e:	60c3      	str	r3, [r0, #12]
	list->head = (sys_dnode_t *)list;
10006960:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10006962:	6040      	str	r0, [r0, #4]
}
10006964:	2000      	movs	r0, #0
10006966:	4770      	bx	lr

10006968 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
10006968:	2a00      	cmp	r2, #0
1000696a:	d007      	beq.n	1000697c <z_impl_k_sem_init+0x14>
1000696c:	428a      	cmp	r2, r1
1000696e:	d308      	bcc.n	10006982 <z_impl_k_sem_init+0x1a>
	sem->count = initial_count;
10006970:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
10006972:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
10006974:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10006976:	6040      	str	r0, [r0, #4]
	return 0;
10006978:	2000      	movs	r0, #0
}
1000697a:	4770      	bx	lr
		return -EINVAL;
1000697c:	2016      	movs	r0, #22
1000697e:	4240      	negs	r0, r0
10006980:	e7fb      	b.n	1000697a <z_impl_k_sem_init+0x12>
10006982:	2016      	movs	r0, #22
10006984:	4240      	negs	r0, r0
10006986:	e7f8      	b.n	1000697a <z_impl_k_sem_init+0x12>

10006988 <thread_active_elsewhere>:
}
10006988:	2000      	movs	r0, #0
1000698a:	4770      	bx	lr

1000698c <pended_on_thread>:
	return thread->base.pended_on;
1000698c:	6880      	ldr	r0, [r0, #8]
}
1000698e:	4770      	bx	lr

10006990 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
10006990:	230e      	movs	r3, #14
10006992:	56c3      	ldrsb	r3, [r0, r3]
	int32_t b2 = thread_2->base.prio;
10006994:	200e      	movs	r0, #14
10006996:	5608      	ldrsb	r0, [r1, r0]
	if (b1 != b2) {
10006998:	4283      	cmp	r3, r0
1000699a:	d001      	beq.n	100069a0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
1000699c:	1ac0      	subs	r0, r0, r3
}
1000699e:	4770      	bx	lr
	return 0;
100069a0:	2000      	movs	r0, #0
100069a2:	e7fc      	b.n	1000699e <z_sched_prio_cmp+0xe>

100069a4 <z_reschedule_irqlock>:
{
100069a4:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
100069a6:	2800      	cmp	r0, #0
100069a8:	d106      	bne.n	100069b8 <z_reschedule_irqlock+0x14>
100069aa:	f3ef 8305 	mrs	r3, IPSR
100069ae:	2b00      	cmp	r3, #0
100069b0:	d102      	bne.n	100069b8 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
100069b2:	f7fa fb2f 	bl	10001014 <arch_swap>
	return ret;
100069b6:	e004      	b.n	100069c2 <z_reschedule_irqlock+0x1e>
	if (key != 0U) {
100069b8:	2800      	cmp	r0, #0
100069ba:	d102      	bne.n	100069c2 <z_reschedule_irqlock+0x1e>
	__asm__ volatile(
100069bc:	b662      	cpsie	i
100069be:	f3bf 8f6f 	isb	sy
}
100069c2:	bd10      	pop	{r4, pc}

100069c4 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
100069c4:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
100069c6:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
100069c8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
100069ca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
100069cc:	2300      	movs	r3, #0
100069ce:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
100069d0:	604b      	str	r3, [r1, #4]
}
100069d2:	4770      	bx	lr

100069d4 <unpend_thread_no_timeout>:
{
100069d4:	b510      	push	{r4, lr}
100069d6:	0004      	movs	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
100069d8:	f7ff ffd8 	bl	1000698c <pended_on_thread>
100069dc:	0021      	movs	r1, r4
100069de:	f7ff fff1 	bl	100069c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
100069e2:	7b63      	ldrb	r3, [r4, #13]
100069e4:	2202      	movs	r2, #2
100069e6:	4393      	bics	r3, r2
100069e8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
100069ea:	2300      	movs	r3, #0
100069ec:	60a3      	str	r3, [r4, #8]
}
100069ee:	bd10      	pop	{r4, pc}

100069f0 <z_priq_dumb_best>:
{
100069f0:	0003      	movs	r3, r0
	return list->head == list;
100069f2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100069f4:	4283      	cmp	r3, r0
100069f6:	d000      	beq.n	100069fa <z_priq_dumb_best+0xa>
}
100069f8:	4770      	bx	lr
	struct k_thread *thread = NULL;
100069fa:	2000      	movs	r0, #0
	return thread;
100069fc:	e7fc      	b.n	100069f8 <z_priq_dumb_best+0x8>

100069fe <z_ready_thread>:
{
100069fe:	b570      	push	{r4, r5, r6, lr}
10006a00:	0004      	movs	r4, r0
	LOCKED(&sched_spinlock) {
10006a02:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10006a04:	f3ef 8510 	mrs	r5, PRIMASK
10006a08:	b672      	cpsid	i
10006a0a:	e004      	b.n	10006a16 <z_ready_thread+0x18>
			ready_thread(thread);
10006a0c:	0020      	movs	r0, r4
10006a0e:	f7fb ff1b 	bl	10002848 <ready_thread>
10006a12:	e007      	b.n	10006a24 <z_ready_thread+0x26>
	LOCKED(&sched_spinlock) {
10006a14:	2301      	movs	r3, #1
10006a16:	2b00      	cmp	r3, #0
10006a18:	d10a      	bne.n	10006a30 <z_ready_thread+0x32>
		if (!thread_active_elsewhere(thread)) {
10006a1a:	0020      	movs	r0, r4
10006a1c:	f7ff ffb4 	bl	10006988 <thread_active_elsewhere>
10006a20:	2800      	cmp	r0, #0
10006a22:	d0f3      	beq.n	10006a0c <z_ready_thread+0xe>
	if (key != 0U) {
10006a24:	2d00      	cmp	r5, #0
10006a26:	d1f5      	bne.n	10006a14 <z_ready_thread+0x16>
	__asm__ volatile(
10006a28:	b662      	cpsie	i
10006a2a:	f3bf 8f6f 	isb	sy
10006a2e:	e7f1      	b.n	10006a14 <z_ready_thread+0x16>
}
10006a30:	bd70      	pop	{r4, r5, r6, pc}

10006a32 <z_thread_timeout>:
{
10006a32:	b570      	push	{r4, r5, r6, lr}
10006a34:	0004      	movs	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
10006a36:	0006      	movs	r6, r0
10006a38:	3e18      	subs	r6, #24
	LOCKED(&sched_spinlock) {
10006a3a:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10006a3c:	f3ef 8510 	mrs	r5, PRIMASK
10006a40:	b672      	cpsid	i
10006a42:	e012      	b.n	10006a6a <z_thread_timeout+0x38>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10006a44:	0022      	movs	r2, r4
10006a46:	3a18      	subs	r2, #24
10006a48:	7b53      	ldrb	r3, [r2, #13]
10006a4a:	2104      	movs	r1, #4
10006a4c:	0018      	movs	r0, r3
10006a4e:	4388      	bics	r0, r1
10006a50:	7350      	strb	r0, [r2, #13]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10006a52:	2114      	movs	r1, #20
10006a54:	438b      	bics	r3, r1
10006a56:	7353      	strb	r3, [r2, #13]
			ready_thread(thread);
10006a58:	0030      	movs	r0, r6
10006a5a:	f7fb fef5 	bl	10002848 <ready_thread>
	if (key != 0U) {
10006a5e:	2d00      	cmp	r5, #0
10006a60:	d102      	bne.n	10006a68 <z_thread_timeout+0x36>
	__asm__ volatile(
10006a62:	b662      	cpsie	i
10006a64:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
10006a68:	2301      	movs	r3, #1
10006a6a:	2b00      	cmp	r3, #0
10006a6c:	d10e      	bne.n	10006a8c <z_thread_timeout+0x5a>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
10006a6e:	0023      	movs	r3, r4
10006a70:	3b18      	subs	r3, #24
10006a72:	7b5b      	ldrb	r3, [r3, #13]
		if (!killed) {
10006a74:	2228      	movs	r2, #40	; 0x28
10006a76:	421a      	tst	r2, r3
10006a78:	d1f1      	bne.n	10006a5e <z_thread_timeout+0x2c>
			if (thread->base.pended_on != NULL) {
10006a7a:	0023      	movs	r3, r4
10006a7c:	3b18      	subs	r3, #24
10006a7e:	689b      	ldr	r3, [r3, #8]
10006a80:	2b00      	cmp	r3, #0
10006a82:	d0df      	beq.n	10006a44 <z_thread_timeout+0x12>
				unpend_thread_no_timeout(thread);
10006a84:	0030      	movs	r0, r6
10006a86:	f7ff ffa5 	bl	100069d4 <unpend_thread_no_timeout>
10006a8a:	e7db      	b.n	10006a44 <z_thread_timeout+0x12>
}
10006a8c:	bd70      	pop	{r4, r5, r6, pc}

10006a8e <unpend_all>:
{
10006a8e:	b570      	push	{r4, r5, r6, lr}
10006a90:	0005      	movs	r5, r0
	return list->head == list;
10006a92:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10006a94:	42a5      	cmp	r5, r4
10006a96:	d00e      	beq.n	10006ab6 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
10006a98:	2c00      	cmp	r4, #0
10006a9a:	d00c      	beq.n	10006ab6 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
10006a9c:	0020      	movs	r0, r4
10006a9e:	f7ff ff99 	bl	100069d4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
10006aa2:	0020      	movs	r0, r4
10006aa4:	3018      	adds	r0, #24
10006aa6:	f000 f878 	bl	10006b9a <z_abort_timeout>
10006aaa:	2300      	movs	r3, #0
10006aac:	67a3      	str	r3, [r4, #120]	; 0x78
		ready_thread(thread);
10006aae:	0020      	movs	r0, r4
10006ab0:	f7fb feca 	bl	10002848 <ready_thread>
10006ab4:	e7ed      	b.n	10006a92 <unpend_all+0x4>
}
10006ab6:	bd70      	pop	{r4, r5, r6, pc}

10006ab8 <add_to_waitq_locked>:
{
10006ab8:	b570      	push	{r4, r5, r6, lr}
10006aba:	0005      	movs	r5, r0
10006abc:	000e      	movs	r6, r1
	unready_thread(thread);
10006abe:	f7fb ff1b 	bl	100028f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
10006ac2:	7b6b      	ldrb	r3, [r5, #13]
10006ac4:	2202      	movs	r2, #2
10006ac6:	4313      	orrs	r3, r2
10006ac8:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
10006aca:	2e00      	cmp	r6, #0
10006acc:	d020      	beq.n	10006b10 <add_to_waitq_locked+0x58>
		thread->base.pended_on = wait_q;
10006ace:	60ae      	str	r6, [r5, #8]
	return list->head == list;
10006ad0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10006ad2:	42a6      	cmp	r6, r4
10006ad4:	d108      	bne.n	10006ae8 <add_to_waitq_locked+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10006ad6:	2400      	movs	r4, #0
10006ad8:	e006      	b.n	10006ae8 <add_to_waitq_locked+0x30>
	sys_dnode_t *const prev = successor->prev;
10006ada:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
10006adc:	606b      	str	r3, [r5, #4]
	node->next = successor;
10006ade:	602c      	str	r4, [r5, #0]
	prev->next = node;
10006ae0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
10006ae2:	6065      	str	r5, [r4, #4]
}
10006ae4:	e014      	b.n	10006b10 <add_to_waitq_locked+0x58>
10006ae6:	2400      	movs	r4, #0
10006ae8:	2c00      	cmp	r4, #0
10006aea:	d00c      	beq.n	10006b06 <add_to_waitq_locked+0x4e>
		if (z_sched_prio_cmp(thread, t) > 0) {
10006aec:	0021      	movs	r1, r4
10006aee:	0028      	movs	r0, r5
10006af0:	f7ff ff4e 	bl	10006990 <z_sched_prio_cmp>
10006af4:	2800      	cmp	r0, #0
10006af6:	dcf0      	bgt.n	10006ada <add_to_waitq_locked+0x22>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10006af8:	2c00      	cmp	r4, #0
10006afa:	d0f5      	beq.n	10006ae8 <add_to_waitq_locked+0x30>
	return (node == list->tail) ? NULL : node->next;
10006afc:	6872      	ldr	r2, [r6, #4]
10006afe:	4294      	cmp	r4, r2
10006b00:	d0f1      	beq.n	10006ae6 <add_to_waitq_locked+0x2e>
10006b02:	6824      	ldr	r4, [r4, #0]
10006b04:	e7f0      	b.n	10006ae8 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
10006b06:	6873      	ldr	r3, [r6, #4]
	node->next = list;
10006b08:	602e      	str	r6, [r5, #0]
	node->prev = tail;
10006b0a:	606b      	str	r3, [r5, #4]
	tail->next = node;
10006b0c:	601d      	str	r5, [r3, #0]
	list->tail = node;
10006b0e:	6075      	str	r5, [r6, #4]
}
10006b10:	bd70      	pop	{r4, r5, r6, pc}

10006b12 <pend_locked>:
{
10006b12:	b570      	push	{r4, r5, r6, lr}
10006b14:	0004      	movs	r4, r0
10006b16:	0016      	movs	r6, r2
10006b18:	001d      	movs	r5, r3
	add_to_waitq_locked(thread, wait_q);
10006b1a:	f7ff ffcd 	bl	10006ab8 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
10006b1e:	0032      	movs	r2, r6
10006b20:	002b      	movs	r3, r5
10006b22:	0020      	movs	r0, r4
10006b24:	f7fb fd54 	bl	100025d0 <add_thread_timeout>
}
10006b28:	bd70      	pop	{r4, r5, r6, pc}

10006b2a <z_unpend_first_thread>:
{
10006b2a:	b570      	push	{r4, r5, r6, lr}
10006b2c:	0006      	movs	r6, r0
	LOCKED(&sched_spinlock) {
10006b2e:	2300      	movs	r3, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10006b30:	f3ef 8510 	mrs	r5, PRIMASK
10006b34:	b672      	cpsid	i
	struct k_thread *thread = NULL;
10006b36:	2400      	movs	r4, #0
10006b38:	e005      	b.n	10006b46 <z_unpend_first_thread+0x1c>
	if (key != 0U) {
10006b3a:	2d00      	cmp	r5, #0
10006b3c:	d102      	bne.n	10006b44 <z_unpend_first_thread+0x1a>
	__asm__ volatile(
10006b3e:	b662      	cpsie	i
10006b40:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
10006b44:	2301      	movs	r3, #1
10006b46:	2b00      	cmp	r3, #0
10006b48:	d10b      	bne.n	10006b62 <z_unpend_first_thread+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
10006b4a:	0030      	movs	r0, r6
10006b4c:	f7ff ff50 	bl	100069f0 <z_priq_dumb_best>
10006b50:	1e04      	subs	r4, r0, #0
		if (thread != NULL) {
10006b52:	d0f2      	beq.n	10006b3a <z_unpend_first_thread+0x10>
			unpend_thread_no_timeout(thread);
10006b54:	f7ff ff3e 	bl	100069d4 <unpend_thread_no_timeout>
10006b58:	0020      	movs	r0, r4
10006b5a:	3018      	adds	r0, #24
10006b5c:	f000 f81d 	bl	10006b9a <z_abort_timeout>
10006b60:	e7eb      	b.n	10006b3a <z_unpend_first_thread+0x10>
}
10006b62:	0020      	movs	r0, r4
10006b64:	bd70      	pop	{r4, r5, r6, pc}

10006b66 <init_ready_q>:
	sys_dlist_init(&rq->runq);
10006b66:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
10006b68:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
10006b6a:	6083      	str	r3, [r0, #8]
}
10006b6c:	4770      	bx	lr

10006b6e <remove_timeout>:
{
10006b6e:	b5d0      	push	{r4, r6, r7, lr}
10006b70:	0004      	movs	r4, r0
	if (next(t) != NULL) {
10006b72:	f7fc f8f1 	bl	10002d58 <next>
10006b76:	2800      	cmp	r0, #0
10006b78:	d007      	beq.n	10006b8a <remove_timeout+0x1c>
		next(t)->dticks += t->dticks;
10006b7a:	6902      	ldr	r2, [r0, #16]
10006b7c:	6943      	ldr	r3, [r0, #20]
10006b7e:	6926      	ldr	r6, [r4, #16]
10006b80:	6967      	ldr	r7, [r4, #20]
10006b82:	1992      	adds	r2, r2, r6
10006b84:	417b      	adcs	r3, r7
10006b86:	6102      	str	r2, [r0, #16]
10006b88:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = node->prev;
10006b8a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
10006b8c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
10006b8e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10006b90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
10006b92:	2300      	movs	r3, #0
10006b94:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
10006b96:	6063      	str	r3, [r4, #4]
}
10006b98:	bdd0      	pop	{r4, r6, r7, pc}

10006b9a <z_abort_timeout>:
{
10006b9a:	b570      	push	{r4, r5, r6, lr}
10006b9c:	0005      	movs	r5, r0
	LOCKED(&timeout_lock) {
10006b9e:	2400      	movs	r4, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10006ba0:	f3ef 8610 	mrs	r6, PRIMASK
10006ba4:	b672      	cpsid	i
	int ret = -EINVAL;
10006ba6:	2016      	movs	r0, #22
10006ba8:	4240      	negs	r0, r0
10006baa:	e005      	b.n	10006bb8 <z_abort_timeout+0x1e>
	if (key != 0U) {
10006bac:	2e00      	cmp	r6, #0
10006bae:	d102      	bne.n	10006bb6 <z_abort_timeout+0x1c>
	__asm__ volatile(
10006bb0:	b662      	cpsie	i
10006bb2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
10006bb6:	2401      	movs	r4, #1
10006bb8:	2c00      	cmp	r4, #0
10006bba:	d107      	bne.n	10006bcc <z_abort_timeout+0x32>
	return node->next != NULL;
10006bbc:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
10006bbe:	2b00      	cmp	r3, #0
10006bc0:	d0f4      	beq.n	10006bac <z_abort_timeout+0x12>
			remove_timeout(to);
10006bc2:	0028      	movs	r0, r5
10006bc4:	f7ff ffd3 	bl	10006b6e <remove_timeout>
			ret = 0;
10006bc8:	0020      	movs	r0, r4
10006bca:	e7ef      	b.n	10006bac <z_abort_timeout+0x12>
}
10006bcc:	bd70      	pop	{r4, r5, r6, pc}

10006bce <z_set_timeout_expiry>:
{
10006bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006bd0:	0006      	movs	r6, r0
10006bd2:	000f      	movs	r7, r1
	LOCKED(&timeout_lock) {
10006bd4:	2400      	movs	r4, #0
	__asm__ volatile("mrs %0, PRIMASK;"
10006bd6:	f3ef 8510 	mrs	r5, PRIMASK
10006bda:	b672      	cpsid	i
10006bdc:	e00c      	b.n	10006bf8 <z_set_timeout_expiry+0x2a>
			      || (ticks <= next_to);
10006bde:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
10006be0:	2301      	movs	r3, #1
10006be2:	4023      	ands	r3, r4
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
10006be4:	2801      	cmp	r0, #1
10006be6:	dd01      	ble.n	10006bec <z_set_timeout_expiry+0x1e>
10006be8:	2b00      	cmp	r3, #0
10006bea:	d10f      	bne.n	10006c0c <z_set_timeout_expiry+0x3e>
	if (key != 0U) {
10006bec:	2d00      	cmp	r5, #0
10006bee:	d102      	bne.n	10006bf6 <z_set_timeout_expiry+0x28>
	__asm__ volatile(
10006bf0:	b662      	cpsie	i
10006bf2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
10006bf6:	2401      	movs	r4, #1
10006bf8:	2c00      	cmp	r4, #0
10006bfa:	d10e      	bne.n	10006c1a <z_set_timeout_expiry+0x4c>
		int next_to = next_timeout();
10006bfc:	f7fc f8c4 	bl	10002d88 <next_timeout>
			      || (ticks <= next_to);
10006c00:	1c43      	adds	r3, r0, #1
10006c02:	d0ec      	beq.n	10006bde <z_set_timeout_expiry+0x10>
10006c04:	42b0      	cmp	r0, r6
10006c06:	dbeb      	blt.n	10006be0 <z_set_timeout_expiry+0x12>
10006c08:	2401      	movs	r4, #1
10006c0a:	e7e9      	b.n	10006be0 <z_set_timeout_expiry+0x12>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
10006c0c:	42b0      	cmp	r0, r6
10006c0e:	dd00      	ble.n	10006c12 <z_set_timeout_expiry+0x44>
10006c10:	0030      	movs	r0, r6
10006c12:	0039      	movs	r1, r7
10006c14:	f7fa fe9c 	bl	10001950 <sys_clock_set_timeout>
10006c18:	e7e8      	b.n	10006bec <z_set_timeout_expiry+0x1e>
}
10006c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10006c1c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
10006c1c:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
10006c1e:	f7fc f9d5 	bl	10002fcc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
10006c22:	bd10      	pop	{r4, pc}

10006c24 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
10006c24:	46c0      	nop			; (mov r8, r8)
	arch_nop();

#ifdef CONFIG_CPP_MAIN
	return 0;
#endif
}
10006c26:	4770      	bx	lr
